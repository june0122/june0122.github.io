<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>카미유 테크 블로그</title>
    <link>http://june0122.github.io/</link>
    
    <atom:link href="http://june0122.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 01 Jul 2021 14:25:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[BOJ] BFS (Breadth First Search)</title>
      <link>http://june0122.github.io/2021/07/01/boj-bfs/</link>
      <guid>http://june0122.github.io/2021/07/01/boj-bfs/</guid>
      <pubDate>Thu, 01 Jul 2021 14:23:18 GMT</pubDate>
      
      <description>[바킹독의 실전 알고리즘] 0x09강 - BFS</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="설명"><a class="markdownIt-Anchor" href="#설명"></a> 설명</h2><blockquote><h3 id="다차원-배열에서-각-칸을-방문할-때-너비를-우선으로-방문하는-알고리즘"><a class="markdownIt-Anchor" href="#다차원-배열에서-각-칸을-방문할-때-너비를-우선으로-방문하는-알고리즘"></a> 다차원 배열에서 각 칸을 방문할 때 너비를 우선으로 방문하는 알고리즘</h3></blockquote><ol><li>시작하는 칸을 큐에 넣고 방문했다는 표시를 남김</li><li>큐에서 원소를 꺼내어 그 칸에 상하좌우로 인접한 칸에 대해 <code>3번</code>을 진행</li><li>해당 칸을 이전에 방문했다면 아무것도 하지 않고, 처음으로 방문했다면 방문했다는 표시를 남기고 해당 칸을 큐에 삽입</li><li>큐가 빌 때까지 <code>2번</code>을 반복</li></ol><p>모든 칸이 큐에 1번씩 들어가므로 시간복잡도는 칸이 N개일 때 O(N)</p><h4 id="bfs-구현-시-자주하는-실수"><a class="markdownIt-Anchor" href="#bfs-구현-시-자주하는-실수"></a> BFS 구현 시 자주하는 실수</h4><ol><li>시작점을 큐에 넣긴하는데 정작 방문했다는 표시를 남기지 않은 채로 진행하는 경우</li><li>큐에 넣을 때 해당 칸에 방문했다는 표시를 남기지 않고 큐에서 빼낼 때 남기는 경우</li><li>nx, ny가 배열 바깥으로 벗어났는지에 대한 루틴을 아예 빼먹었거나, 아니면 이상하게 구현을 한 상황</li></ol><h2 id="예시-및-응용"><a class="markdownIt-Anchor" href="#예시-및-응용"></a> 예시 및 응용</h2><h3 id="예시-flood-fill"><a class="markdownIt-Anchor" href="#예시-flood-fill"></a> 예시 : Flood Fill</h3><blockquote><p><a href="https://www.acmicpc.net/problem/1926">BOJ 1926, 그림</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (n, m) = Pair(nextInt(), nextInt())</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>) <span class="comment">// 상하좌우 네 방향을 의미</span></span><br><span class="line">    <span class="keyword">val</span> paper = Array(n) &#123; IntArray(m) &#125;</span><br><span class="line">    <span class="keyword">val</span> visitMap = Array(n) &#123; BooleanArray(m) &#125; <span class="comment">// 해당 칸을 방문했는지 여부를 저장</span></span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">0</span> <span class="comment">// 그림의 최댓값</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span> <span class="comment">// 그림의 개수</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> paper.indices) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> paper[i].indices) &#123;</span><br><span class="line">            paper[i][j] = nextInt()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> paper.indices) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> paper[i].indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (paper[i][j] == <span class="number">0</span> || visitMap[i][j]) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> queue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line">            <span class="keyword">var</span> area = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            visitMap[i][j] = <span class="literal">true</span></span><br><span class="line">            queue.offer(i to j)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">                area += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> cur = queue.poll()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123; <span class="comment">// 상하좌우 칸을 탐색</span></span><br><span class="line">                    <span class="keyword">val</span> nx = cur.first + dx[dir]</span><br><span class="line">                    <span class="keyword">val</span> ny = cur.second + dy[dir] <span class="comment">// nx, ny에 dir에서 정한 방향의 인접한 칸의 좌표가 들어감</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span> <span class="comment">// 범위 밖일 경우 넘어감</span></span><br><span class="line">                    <span class="keyword">if</span> (visitMap[nx][ny]|| paper[nx][ny] != <span class="number">1</span>) <span class="keyword">continue</span> <span class="comment">// 이미 방문한 칸이거나 색칠된 칸이 아닐 경우</span></span><br><span class="line"></span><br><span class="line">                    visitMap[nx][ny] = <span class="literal">true</span> <span class="comment">// (nx, ny)를 방문했다고 명시</span></span><br><span class="line">                    queue.offer(nx to ny)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max = max(max, area)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$num</span>\n<span class="variable">$max</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="응용-1-거리-측정"><a class="markdownIt-Anchor" href="#응용-1-거리-측정"></a> 응용 1 : 거리 측정</h3><blockquote><p><a href="https://www.acmicpc.net/problem/2178">BOJ 2178번, 미로 탐색</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (n, m) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> maze = Array(n) &#123; IntArray(m) &#125;</span><br><span class="line">    <span class="keyword">val</span> dist = Array(n) &#123; IntArray(m) &#123; -<span class="number">1</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123; <span class="comment">// 각각의 수들은 &#x27;붙어서&#x27; 입력으로 주어진다.</span></span><br><span class="line">        <span class="keyword">val</span> line = next()</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            maze[i][j] = line[j] - <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line">    queue.offer(<span class="number">0</span> to <span class="number">0</span>)</span><br><span class="line">    dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> (curX, curY) = queue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> nx = curX + dx[dir]</span><br><span class="line">            <span class="keyword">val</span> ny = curY + dy[dir]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (dist[nx][ny] &gt;= <span class="number">0</span> || maze[nx][ny] != <span class="number">1</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            dist[nx][ny] = dist[curX][curY] + <span class="number">1</span></span><br><span class="line">            queue.offer(nx to ny)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(dist[n - <span class="number">1</span>][m - <span class="number">1</span>] + <span class="number">1</span>) <span class="comment">// 지나는 칸 수를 출력이므로 + 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="응용-2-시작점이-여러-개일-때"><a class="markdownIt-Anchor" href="#응용-2-시작점이-여러-개일-때"></a> 응용 2 : 시작점이 여러 개일 때</h3><blockquote><p><a href="https://www.acmicpc.net/problem/7576">BOJ 7576번, 토마토</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> (m, n) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> box = Array(n) &#123; IntArray(m) &#125;</span><br><span class="line">    <span class="keyword">val</span> vis = Array(n) &#123; BooleanArray(m) &#123; <span class="literal">false</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            box[i][j] = nextInt()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (box[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                queue.offer(i to j)</span><br><span class="line">                vis[i][j] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> temp = mutableListOf&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (rottenNum <span class="keyword">in</span> <span class="number">0</span> until queue.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> (curX, curY) = queue.poll()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> (nx, ny) = curX + dx[dir] to curY + dy[dir]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> (box[nx][ny] == <span class="number">1</span> || box[nx][ny] == -<span class="number">1</span> || vis[nx][ny]) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                vis[nx][ny] = <span class="literal">true</span></span><br><span class="line">                box[nx][ny] = <span class="number">1</span></span><br><span class="line">                temp.add(nx to ny)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp.forEach &#123;</span><br><span class="line">            queue.offer(it)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp.clear()</span><br><span class="line"></span><br><span class="line">        date += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (box[i][j] == <span class="number">0</span>) date = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(date - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> (m, n) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> box = Array(n) &#123; IntArray(m) &#125;</span><br><span class="line">    <span class="keyword">val</span> dist = Array(n) &#123; IntArray(m) &#125; <span class="comment">// 익은 토마토가 들어있거나 토마토가 없는 칸은 값이 0</span></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            box[i][j] = nextInt()</span><br><span class="line">            <span class="keyword">when</span> (box[i][j]) &#123;</span><br><span class="line">                <span class="number">1</span> -&gt; queue.offer(i to j) <span class="comment">// 익은 토마토, 즉 거리가 0인 칸을 큐에 넣음</span></span><br><span class="line">                <span class="number">0</span> -&gt; dist[i][j] = -<span class="number">1</span> <span class="comment">// 익지 않은 토마토의 dist값을 -1로 설정</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> (curX, curY) = queue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> (nx, ny) = curX + dx[dir] to curY + dy[dir]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (dist[nx][ny] &gt;= <span class="number">0</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            dist[nx][ny] = dist[curX][curY] + <span class="number">1</span></span><br><span class="line">            queue.offer(nx to ny)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dist[i][j] == -<span class="number">1</span>) &#123; <span class="comment">// 익지 않은 토마토가 있다면 -1 출력</span></span><br><span class="line">                print(-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            date = max(date, dist[i][j])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="응용-3-시작점이-두-종류일-때"><a class="markdownIt-Anchor" href="#응용-3-시작점이-두-종류일-때"></a> 응용 3 : 시작점이 두 종류일 때</h3><blockquote><p><a href="https://www.acmicpc.net/problem/4179">BOJ 4179번, 불!</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (row, col) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> maze = Array(row) &#123; CharArray(col) &#125;</span><br><span class="line">    <span class="keyword">val</span> fireDist = Array(row) &#123; IntArray(col) &#123; -<span class="number">1</span> &#125; &#125; <span class="comment">// 불의 전파 시간</span></span><br><span class="line">    <span class="keyword">val</span> jihoonDist = Array(row) &#123; IntArray(col) &#123; -<span class="number">1</span> &#125; &#125; <span class="comment">// 지훈이의 이동 시간</span></span><br><span class="line">    <span class="keyword">val</span> fireQueue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line">    <span class="keyword">val</span> jihoonQueue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until row) &#123;</span><br><span class="line">        <span class="keyword">val</span> line = next()</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until col) &#123;</span><br><span class="line">            maze[i][j] = line[j]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (maze[i][j] == <span class="string">&#x27;F&#x27;</span>) &#123;</span><br><span class="line">                fireQueue.offer(i to j)</span><br><span class="line">                fireDist[i][j] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maze[i][j] == <span class="string">&#x27;J&#x27;</span>) &#123;</span><br><span class="line">                jihoonQueue.offer(i to j)</span><br><span class="line">                jihoonDist[i][j] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 불에 대한 BFS</span></span><br><span class="line">    <span class="keyword">while</span> (fireQueue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> (curX, curY) = fireQueue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> (nx, ny) = curX + dx[dir] to curY + dy[dir]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= row || ny &lt; <span class="number">0</span> || ny &gt;= col) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (fireDist[nx][ny] &gt;= <span class="number">0</span> || maze[nx][ny] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            fireDist[nx][ny] = fireDist[curX][curY] + <span class="number">1</span></span><br><span class="line">            fireQueue.offer(nx to ny)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 지훈이에 대한 BFS</span></span><br><span class="line">    <span class="keyword">while</span> (jihoonQueue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> (curX, curY) = jihoonQueue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> (nx, ny) = curX + dx[dir] to curY + dy[dir]</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 범위를 벗어난 것은 탈출에 성공했다는 의미. 큐에 거리 순으로 들어가므로 최초에 탈출한 시간을 출력하면 됨.</span></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= row || ny &lt; <span class="number">0</span> || ny &gt;= col) &#123;</span><br><span class="line">                println(jihoonDist[curX][curY] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jihoonDist[nx][ny] &gt;= <span class="number">0</span> || maze[nx][ny] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (fireDist[nx][ny] != -<span class="number">1</span> &amp;&amp; fireDist[nx][ny] &lt;= jihoonDist[curX][curY] + <span class="number">1</span>) <span class="keyword">continue</span></span><br><span class="line">            <span class="comment">// 불의 전파 시간을 조건에 추가. 지훈이 도착한 시간과 동시에, 혹은 더 빨리 불이 도착하는 자리로는 갈 수 없음.</span></span><br><span class="line"></span><br><span class="line">            jihoonDist[nx][ny] = jihoonDist[curX][curY] + <span class="number">1</span></span><br><span class="line">            jihoonQueue.offer(nx to ny)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">&quot;IMPOSSIBLE&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>fireDist[nx][ny] != -1</code> 조건이 필요한 이유를 설명해주는 input 케이스</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">###F</span><br><span class="line">.J#.</span><br><span class="line">###.</span><br></pre></td></tr></table></figure><blockquote><p>continue를 사용하지 않고 조건을 만족할 떄 로직을 실행</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jihoonDist[nx][ny] == -<span class="number">1</span> &amp;&amp; maze[nx][ny] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fireDist[nx][ny] == -<span class="number">1</span> || fireDist[nx][ny] &gt; jihoonDist[curX][curY] + <span class="number">1</span>) &#123;</span><br><span class="line">        jihoonDist[nx][ny] = jihoonDist[curX][curY] + <span class="number">1</span></span><br><span class="line">        jihoonQueue.offer(nx to ny)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>maze 초기화 시 forEachIndeded 사용하는 방법</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until row) &#123;</span><br><span class="line">        next().forEachIndexed &#123; j, char -&gt;</span><br><span class="line">            maze[i][j] = char</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>이렇게 시작점이 두 종류인 문제를 해결할 수 있게 되었다. 하지만 시작점이 두 종류인 문제에 관해서 생각해야 할 점이 추가로 존재한다. 본 문제는 지훈이의 이동은 불의 전파에 영향을 받지만 불의 전파는 지훈이의 이동에 영향을 받지 않아서 불만 먼저 전파를 쭉 시키는게 가능했다. 그러나 시작점이 A, B 두 종류가 있고, A의 전파에 B가 영향을 주고 B의 전파에도 A가 영향을 준다고 가정해본다면 어느 하나를 먼저 끝까지 전파시키는게 불가능하다. (예를 들어, 불과 소방수 내지는 불과 물이 전파되는 문제여서 둘이 만나면 뭔가 상호작용이 발생하는 케이스)</p><p>위의 케이스를 다루는 문제가 바로 <a href="https://www.acmicpc.net/problem/18809">BOJ 18809번, Gaaaaaaaaaarden</a> 문제이다. 아쉽게도 이 문제는 <strong>백트래킹 기법</strong>을 추가로 알고 있어야 해결이 가능하기 때문에 당장 풀어볼 수는 없지만, 두 종류의 BFS에서 BFS를 돌 때 어느 하나가 독립적이지 않고 서로에게 영향을 준다면 위의 방법으로는 해결할 수 없다는 것을 꼭 이해해야 한다. 그런 상황에서는 시간 순으로 A와 B를 동시에 진행시켜야 한다.</p><h3 id="응용-4-1차원에서의-bfs"><a class="markdownIt-Anchor" href="#응용-4-1차원에서의-bfs"></a> 응용 4 : 1차원에서의 BFS</h3><blockquote><p><a href="https://www.acmicpc.net/problem/1697">BOJ 1697번, 숨바꼭질</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (n, k) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> line = Array(<span class="number">100001</span>) &#123; -<span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;<span class="built_in">Int</span>&gt; = LinkedList()</span><br><span class="line"></span><br><span class="line">    line[n] = <span class="number">0</span></span><br><span class="line">    queue.offer(n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> current = queue.poll()</span><br><span class="line">        <span class="keyword">val</span> dx = intArrayOf(<span class="number">1</span>, -<span class="number">1</span>, current)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> dx.indices) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = current + dx[dir]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next &lt; <span class="number">0</span> || next &gt; <span class="number">100000</span>) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (line[next] != -<span class="number">1</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            line[next] = line[current] + <span class="number">1</span></span><br><span class="line">            queue.offer(next)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(line[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><p><a href="https://youtu.be/ftOmGdm95XI">[바킹독의 실전 알고리즘] 0x09강 - BFS</a></p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%94%ED%82%B9%EB%8F%85/">바킹독</category>
      
      <category domain="http://june0122.github.io/tags/BFS/">BFS</category>
      
      
      <comments>http://june0122.github.io/2021/07/01/boj-bfs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] 다이나믹 프로그래밍 (Dynamic Programming, DP)</title>
      <link>http://june0122.github.io/2021/06/30/boj-dynamic-programming/</link>
      <guid>http://june0122.github.io/2021/06/30/boj-dynamic-programming/</guid>
      <pubDate>Tue, 29 Jun 2021 16:23:11 GMT</pubDate>
      
      <description>[바킹독의 실전 알고리즘] 0x10강 - 다이나믹 프로그래밍</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>여러 개의 하위 문제를 먼저 푼 후 그 결과를 쌓아올려 주어진 문제를 해결하는 알고리즘</p></blockquote><h3 id="dp를-푸는-과정"><a class="markdownIt-Anchor" href="#dp를-푸는-과정"></a> DP를 푸는 과정</h3><ol><li>테이블 정의하기</li><li>점화식 찾기</li><li>초기값 정하기</li></ol><h2 id="연습-문제"><a class="markdownIt-Anchor" href="#연습-문제"></a> 연습 문제</h2><h3 id="boj-1463-1로-만들기"><a class="markdownIt-Anchor" href="#boj-1463-1로-만들기"></a> <a href="https://www.acmicpc.net/problem/1463">BOJ 1463 : 1로 만들기</a></h3><blockquote><p>DP</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">2.</span>.n) &#123;</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) d[i] = min(d[i], d[i / <span class="number">2</span>] + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) d[i] = min(d[i], d[i / <span class="number">3</span>] + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(d[n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BFS</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;<span class="built_in">Int</span>&gt; = LinkedList()</span><br><span class="line">    <span class="keyword">val</span> dist = IntArray(n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> dx = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    queue.offer(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> cur = queue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> dx.indices) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = <span class="keyword">when</span> (dir) &#123;</span><br><span class="line">                <span class="number">0</span> -&gt; cur + dx[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span> -&gt; cur * dx[dir]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next &gt; n) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (dist[next] != <span class="number">0</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            dist[next] = dist[cur] + <span class="number">1</span></span><br><span class="line">            queue.offer(next)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(dist[n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boj-9095-1-2-3-더하기"><a class="markdownIt-Anchor" href="#boj-9095-1-2-3-더하기"></a> <a href="https://www.acmicpc.net/problem/9095">BOJ 9095 : 1, 2, 3 더하기</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> t = nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    d[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    d[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span> until <span class="number">11</span>) &#123;</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + d[i - <span class="number">2</span>] + d[i - <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repeat(t) &#123; println(d[nextInt()]) &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="boj-2579-계단-오르기"><a class="markdownIt-Anchor" href="#boj-2579-계단-오르기"></a> <a href="https://www.acmicpc.net/problem/2579">BOJ 2579 : 계단 오르기</a></h3><blockquote><p>2차원 배열 이용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> s = IntArray(n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> d = Array(n + <span class="number">1</span>) &#123; IntArray(<span class="number">3</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.n) s[i] = nextInt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        println(s[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@with</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d[<span class="number">1</span>][<span class="number">1</span>] = s[<span class="number">1</span>]</span><br><span class="line">    d[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">    d[<span class="number">2</span>][<span class="number">1</span>] = s[<span class="number">2</span>]</span><br><span class="line">    d[<span class="number">2</span>][<span class="number">2</span>] = s[<span class="number">1</span>] + s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3.</span>.n) &#123;</span><br><span class="line">        d[i][<span class="number">1</span>] = max(d[i - <span class="number">2</span>][<span class="number">1</span>], d[i - <span class="number">2</span>][<span class="number">2</span>]) + s[i]</span><br><span class="line">        d[i][<span class="number">2</span>] = d[i - <span class="number">1</span>][<span class="number">1</span>] + s[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(max(d[n][<span class="number">1</span>], d[n][<span class="number">2</span>]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>D[i][j]</code> = 현재까지 <code>j</code>개의 계단을 연속해서 밟고 <code>i</code>번째 계단까지 올라섰을 때 점수 합의 최댓값, 단 <code>i</code>번째 계단은 반드시 밟아야 함</p><p>이렇게 2차원 배열을 선언한 이유는 지금까지 몇 개의 계단을 밟았는지에 대한 정보가 추가로 있어야 점화식을 세울 때 계단을 오르는 규칙을 고려할 수 있기 때문이다. 그리고 i번째 계단은 반드시 밟아야 한다는 조건이 있어야 점화식을 이끌어낼 수 있다. 이 2차원 배열에서 <code>j</code>는 어떤 값을 가지냐 보면 <code>i</code>번째 계단을 반드시 밟아야 한다는 조건이 있어서 <code>j = 1</code> 혹은 <code>2</code>이다. 연속된 세 개의 계단을 모두 밟아서는 안된다는 조건으로 인해 <code>j</code>가 <code>3</code> 이상일 수는 없다.</p><blockquote><p>1차원 배열 이용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> s = IntArray(<span class="number">300</span>)</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) s[i] = nextInt()</span><br><span class="line"></span><br><span class="line">    d[<span class="number">0</span>] = s[<span class="number">0</span>]</span><br><span class="line">    d[<span class="number">1</span>] = max(s[<span class="number">0</span>] + s[<span class="number">1</span>], s[<span class="number">1</span>])</span><br><span class="line">    d[<span class="number">2</span>] = max(s[<span class="number">0</span>] + s[<span class="number">2</span>], s[<span class="number">1</span>] + s[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3</span> until n) &#123;</span><br><span class="line">        d[i] = max(d[i - <span class="number">2</span>] + s[i], d[i - <span class="number">3</span>] + s[i - <span class="number">1</span>] + s[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(d[n - <span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boj-1149-rgb거리"><a class="markdownIt-Anchor" href="#boj-1149-rgb거리"></a> <a href="https://www.acmicpc.net/problem/1149">BOJ 1149 : RGB거리</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.min</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">RGB</span></span>(<span class="keyword">var</span> red: <span class="built_in">Int</span>, <span class="keyword">var</span> green: <span class="built_in">Int</span>, <span class="keyword">var</span> blue: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> colors = Array(n + <span class="number">1</span>) &#123; RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &#125;</span><br><span class="line">    <span class="keyword">val</span> d = Array(n + <span class="number">1</span>) &#123; IntArray(<span class="number">3</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        colors[i].red = nextInt()</span><br><span class="line">        colors[i].green = nextInt()</span><br><span class="line">        colors[i].blue = nextInt()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = colors[<span class="number">0</span>].red</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">1</span>] = colors[<span class="number">0</span>].green</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">2</span>] = colors[<span class="number">0</span>].blue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until n) &#123;</span><br><span class="line">        d[i][<span class="number">0</span>] = min(d[i-<span class="number">1</span>][<span class="number">1</span>], d[i-<span class="number">1</span>][<span class="number">2</span>]) + colors[i].red</span><br><span class="line">        d[i][<span class="number">1</span>] = min(d[i-<span class="number">1</span>][<span class="number">0</span>], d[i-<span class="number">1</span>][<span class="number">2</span>]) + colors[i].green</span><br><span class="line">        d[i][<span class="number">2</span>] = min(d[i-<span class="number">1</span>][<span class="number">0</span>], d[i-<span class="number">1</span>][<span class="number">1</span>]) + colors[i].blue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(minOf(d[n - <span class="number">1</span>][<span class="number">0</span>], d[n - <span class="number">1</span>][<span class="number">1</span>], d[n - <span class="number">1</span>][<span class="number">2</span>]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boj-11726-2n-타일링"><a class="markdownIt-Anchor" href="#boj-11726-2n-타일링"></a> <a href="https://www.acmicpc.net/problem/11726">BOJ 11726 : 2×n 타일링</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(n + <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> mod = <span class="number">10007</span></span><br><span class="line"></span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    d[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3.</span>.n) d[i] = (d[i - <span class="number">1</span>] + d[i - <span class="number">2</span>]) % mod</span><br><span class="line"></span><br><span class="line">    println(d[n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boj-11659-구간-합-구하기-4"><a class="markdownIt-Anchor" href="#boj-11659-구간-합-구하기-4"></a> <a href="https://www.acmicpc.net/problem/11659">BOJ 11659 : 구간 합 구하기 4</a></h3><blockquote><p>Prefix Sum 기법</p></blockquote><p>Prefix Sum은 시작 위치부터 현재 위치까지의 원소 합을 저장하는 배열이다.</p><p>부분 합(partial sum) 또는 누적 합(cumulative sum)이라고도 한다.</p><table><thead><tr><th style="text-align:center">Number</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">Prefix sum</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">6</td><td style="text-align:center">10</td><td style="text-align:center">15</td></tr></tbody></table><p>Prefix sum은 누적 합을 미리 구하는 전처리 과정을 통해 구간 합(range sum)을 빠르게 구할 때 사용된다.</p><ul><li>prefix sum : <code>0 ~ b</code> 까지의 누적합 (반드시 첫번 째 원소를 포함하는 구간)</li><li>range sum : <code>a ~ b</code> 까지의 구간 합</li></ul><h4 id="시간-복잡도"><a class="markdownIt-Anchor" href="#시간-복잡도"></a> 시간 복잡도</h4><ul><li>전처리 단계<ul><li>1차원 : O(n)</li><li>2차원 : O(n*m)</li></ul></li><li>계산 : O(1)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (n, m) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> a = IntArray(n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.n) &#123;</span><br><span class="line">        a[i] = nextInt()</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + a[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repeat(m) &#123;</span><br><span class="line">        <span class="keyword">val</span> (i, j) = nextInt() to nextInt()</span><br><span class="line">        println(d[j] - d[i - <span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// O(n^2)</span><br><span class="line">D[i] = A[i] + A[2] + … + A[i]</span><br><span class="line"></span><br><span class="line">// O(n)</span><br><span class="line">D[i] = D[i-1] + A[i]</span><br><span class="line"></span><br><span class="line">// O(1)</span><br><span class="line">A[i] + A[i+1] + … + A[j]</span><br><span class="line">= (A[1] + A[2] + … + A[j]) - (A[1] + A[2] + … + A[i-1])</span><br><span class="line">= D[j] - D[i-1] </span><br></pre></td></tr></table></figure><h2 id="경로-추적"><a class="markdownIt-Anchor" href="#경로-추적"></a> 경로 추적</h2><h3 id="boj-12852-1로-만들기-2"><a class="markdownIt-Anchor" href="#boj-12852-1로-만들기-2"></a> <a href="https://www.acmicpc.net/problem/12852">BOJ 12852 : 1로 만들기 2</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> pre = IntArray(n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">2.</span>.n) &#123;</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        pre[i] = i - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; d[i] &gt; d[i / <span class="number">2</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">            d[i] = d[i / <span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">            pre[i] = i / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; d[i] &gt; d[i / <span class="number">3</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">            d[i] = d[i / <span class="number">3</span>] + <span class="number">1</span></span><br><span class="line">            pre[i] = i / <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(d[n])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cur = n</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        print(<span class="string">&quot;<span class="variable">$cur</span> &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">1</span>) <span class="keyword">break</span></span><br><span class="line">        cur = pre[cur]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 문제를 BFS로 경로 복원 문제 풀이도 가능하다.</li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li>바킹독의 실전 알고리즘 - <a href="https://www.youtube.com/watch?v=5leTtB3PQu0">https://www.youtube.com/watch?v=5leTtB3PQu0</a></li><li>Prefix sum - <a href="https://gamedevlog.tistory.com/68">https://gamedevlog.tistory.com/68</a></li></ul>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/DP/">DP</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%94%ED%82%B9%EB%8F%85/">바킹독</category>
      
      
      <comments>http://june0122.github.io/2021/06/30/boj-dynamic-programming/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[코틀린 자료구조] 연결 리스트 (Linked List)</title>
      <link>http://june0122.github.io/2021/06/27/data-structure-linked-list/</link>
      <guid>http://june0122.github.io/2021/06/27/data-structure-linked-list/</guid>
      <pubDate>Sun, 27 Jun 2021 12:51:57 GMT</pubDate>
      
      <description>&lt;b&gt;Linked list&lt;/b&gt;는 선형, 단방향 시퀀스로 배열된 값의 모음이다. linked list는 Kotlin Array, ArrayList와 같은 연속적인 저장소 옵션들&lt;small&gt;(contiguous storage options)&lt;/small&gt;에 비해 몇 가지 이론적인 장점이 있다.</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="linked-list"><a class="markdownIt-Anchor" href="#linked-list"></a> Linked List</h1><p><strong>Linked list</strong>는 선형, 단방향 시퀀스로 배열된 값의 모음이다. linked list는 <em>Kotlin Array, ArrayList</em>와 같은 연속적인 저장소 옵션들<small>(contiguous storage options)</small>에 비해 몇 가지 이론적인 장점이 있다.</p><ol><li>리스트의 앞부분에서 <strong>상수 시간</strong> 삽입 및 제거 수행</li><li>안정적인 성능</li></ol><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/122393576-f87b7900-cfaf-11eb-9b60-ac29477387db.png'></p><p>다이어그램이 보여주듯, linked list는 노드들의 체인이다. 노드는 두 가지의 책임을 가지고 있다.</p><ol><li>값을 가지고 있어야한다.</li><li>다음 노드에 대한 참조를 가지고 있어야 한다. 다음 노드에 대한 참조가 없다면 <em>null</em>을 통해 리스트의 끝을 나타낸다.</li></ol><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/122393617-06c99500-cfb0-11eb-959a-18b6ea1d2fc8.png'></p><h2 id="node"><a class="markdownIt-Anchor" href="#node"></a> Node</h2><blockquote><p>Node.kt</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">var</span> value: T, <span class="keyword">var</span> next: Node&lt;T&gt;? = <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="string">&quot;<span class="variable">$value</span> -&gt; <span class="subst">$&#123;next.toString()&#125;</span>&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="string">&quot;<span class="variable">$value</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>테스트 (<em>Main.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 노드 생성 및 연결하기</span></span><br><span class="line">    <span class="keyword">val</span> node1 = Node(value = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> node2 = Node(value = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">val</span> node3 = Node(value = <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    node1.next = node2</span><br><span class="line">    node2.next = node3</span><br><span class="line">    </span><br><span class="line">    println(node1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; 2 -&gt; 3</span><br></pre></td></tr></table></figure><p>이런 방법으로 리스트를 작성하는 것은 실용적이지 못하다. 이러한 문제를 해결시켜주는 일반적인 방법은 Node 객체들을 관리하는 <strong>LinkedList</strong>를 사용하는 것이다.</p><h2 id="linkedlist"><a class="markdownIt-Anchor" href="#linkedlist"></a> LinkedList</h2><blockquote><p>LinkedList.kt</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> head: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> tail: Node&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> size = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="string">&quot;Empty list&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head.toString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Linked list에는 첫 번째와 마지막 노드를 각각 참조하는 <strong>head</strong>와 <strong>tail</strong>의 개념이 있다.</p><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/122397634-1c40be00-cfb4-11eb-8ed1-2db54feb2e5f.png'></p><p>또한 <em>size</em> 속성<small>(property)</small>에서 linked list의 크기를 추적할 수 있다.</p><h2 id="리스트에-값들을-추가하기"><a class="markdownIt-Anchor" href="#리스트에-값들을-추가하기"></a> 리스트에 값들을 추가하기</h2><p>다음으로, Node 객체를 관리하기 위한 인터페이스를 작성한다. 먼저 값 추가를 처리한다. Linked list에 값을 추가하는 방법에는 세 가지가 있으며, 각각 고유한 성능 특징을 지니고 있다.</p><ol><li><strong>push</strong> : 리스트의 맨 앞에 값을 추가</li><li><strong>append</strong> : 리스트의 끝에 값을 추가</li><li><strong>insert</strong> : 리스트의 특정 노드 뒤에 값을 추가</li></ol><p>이들 각각을 차례로 구현하고 성능 특징을 분석해본다.</p><h3 id="push-연산"><a class="markdownIt-Anchor" href="#push-연산"></a> push 연산</h3><p>리스트의 맨 앞에 값을 추가하는 것은 <strong>push</strong> 연산으로 알려져 있다. 또한 <strong>head-first insertion</strong>이라고도 한다. push 연산의 코드는 매우 간단하다.</p><blockquote><p><code>push(…)</code> (<em>LinkedList.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">    head = Node(value = value, next = head)</span><br><span class="line">    <span class="keyword">if</span> (tail == <span class="literal">null</span>) &#123;</span><br><span class="line">        tail = head</span><br><span class="line">    &#125;</span><br><span class="line">    size += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>빈 리스트에 값을 push할 경우, 새로운 노드는 리스트의 head와 tail이 된다. 리스트에 새로운 노드가 추가되었기 때문에 <em>size</em>의 값도 증가시켜준다.</p><blockquote><p>테스트 (<em>Main.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// push 예시</span></span><br><span class="line">    <span class="keyword">val</span> list = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    list.push(<span class="number">3</span>)</span><br><span class="line">    list.push(<span class="number">2</span>)</span><br><span class="line">    list.push(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; 2 -&gt; 3</span><br></pre></td></tr></table></figure><p>이대로도 괜찮지만 더욱 멋지게 개선할 수 있다. <b><a href="https://ko.wikipedia.org/wiki/%ED%94%8C%EB%A3%A8%EC%96%B8%ED%8A%B8_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4">Fluent interface</a></b> 패턴을 사용하여 여러 push 호출을 연결할 수 있다. <code>push()</code>로 돌아가서 <code>LinkedList&lt;T&gt;</code>를 반환 타입으로 추가한다. 그런 다음 마지막 줄에 <code>return this</code>를 추가하여 방금 요소를 push한 목록을 반환한다.</p><blockquote><p>Fluent interface pattern <code>push(…)</code> (<em>LinkedList.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(value: <span class="type">T</span>)</span></span>: LinkedList&lt;T&gt; &#123;</span><br><span class="line">    head = Node(value = value, next = head)</span><br><span class="line">    <span class="keyword">if</span> (tail == <span class="literal">null</span>) &#123;</span><br><span class="line">        tail = head</span><br><span class="line">    &#125;</span><br><span class="line">    size += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>테스트 (<em>Main.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// fluent interface push 예시</span></span><br><span class="line">    <span class="keyword">val</span> list = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    list.push(<span class="number">3</span>).push(<span class="number">2</span>).push(<span class="number">1</span>)</span><br><span class="line">    println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fluent interface 패턴을 통해 복수의 요소들을 리스트의 시작 부분에 쉽게 추가할 수 있게 되었다.</p><h3 id="append-연산"><a class="markdownIt-Anchor" href="#append-연산"></a> append 연산</h3><p>append 연산은 리스트의 끝에 값을 추가하며, <strong>tail-end insertion</strong>이라고도 한다.</p><blockquote><p><code>append(…)</code> (<em>LinkedList.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">append</span><span class="params">(value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ➀</span></span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">        push(value)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ➁</span></span><br><span class="line">    tail?.next = Node(value = value)</span><br><span class="line">    <span class="comment">// ➂</span></span><br><span class="line">    tail = tail?.next</span><br><span class="line">    size += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>이전과 마찬가지로 리스트가 비어있으면 head와 tail을 모두 새 노드로 업데이트해야한다. 빈 리스트에 추가하는 것은 기능적으로 <em>push</em>와 동일하므로 <em>push</em>를 호출하여 작업을 수행한다.</li><li>다른 모든 경우에는 현재 tail 노드 뒤에 새 노드를 만든다. if 문에서 리스트가 비어있는 경우<small>(<code>isEmpty()</code>)</small>를 이미 처리 했으므로 tail은 여기서 null이 되지 않는다.</li><li><strong>tail-end insertion</strong>이므로 새 노드도 리스트의 tail이 된다.</li></ol><blockquote><p>테스트 (<em>Main.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    list.append(<span class="number">1</span>)</span><br><span class="line">    list.append(<span class="number">2</span>)</span><br><span class="line">    list.append(<span class="number">3</span>)</span><br><span class="line">    println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>append도 물론 Fluent interface 패턴을 적용시킬 수 있다!</p><blockquote><blockquote><p>Fluent interface pattern <code>append(…)</code> (<em>LinkedList.kt</em>)</p></blockquote></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">append</span><span class="params">(value: <span class="type">T</span>)</span></span>: LinkedList&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">        push(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    tail?.next = Node(value = value)</span><br><span class="line">    tail = tail?.next</span><br><span class="line">    size += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert-연산"><a class="markdownIt-Anchor" href="#insert-연산"></a> insert 연산</h3><p><strong>insert</strong> 연산은 리스트의 지정된 위치에 값을 삽입하며 두 단계가 필요하다.</p><ol><li>리스트에서 지정된 노드를 찾는다.</li><li>지정된 노드의 뒤에 새로운 노드를 삽입한다.</li></ol><p>먼저 값을 삽일할 노드를 찾는 코드를 구현하자.</p><blockquote><p><code>nodeAt(…)</code> (<em>LinkedList.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">nodeAt</span><span class="params">(index: <span class="type">Int</span>)</span></span>: Node&lt;T&gt;? &#123;</span><br><span class="line">    <span class="comment">// ➀</span></span><br><span class="line">    <span class="keyword">var</span> currentNode = head</span><br><span class="line">    <span class="keyword">var</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="comment">// ➁</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">null</span> &amp;&amp; currentIndex &lt; index) &#123;</span><br><span class="line">        currentNode = currentNode.next</span><br><span class="line">        currentIndex += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nodeAt()</code>은 주어진 인덱스를 기반으로 리스트에서 노드 검색을 시도한다. head 노드에서만 리스트의 노드에 접근할 수 있으므로 반복 순회<small>(iterative traversals)</small>를 수행해야 한다.</p><ol><li>head에 대한 새 참조를 만들고 현재 순회 수를 추적한다.</li><li>while 루프를 사용하여 원하는 인덱스에 도달할 때까지 리스트 참조를 다음으로 이동시킨다. 빈 리스트 또는 범위를 벗어난 인덱스는 null을 반환한다.</li></ol><p>이제 새로운 노드를 삽입해보자.</p><blockquote><p><code>insert(…)</code> (<em>LinkedList.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(value: <span class="type">T</span>, afterNode: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span>: Node&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// ①</span></span><br><span class="line">    <span class="keyword">if</span> (tail == afterNode) &#123;</span><br><span class="line">        append(value)</span><br><span class="line">        <span class="keyword">return</span> tail!!</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ②</span></span><br><span class="line">    <span class="keyword">val</span> newNode = Node(value = value, next = afterNode.next)</span><br><span class="line">    <span class="comment">// ③</span></span><br><span class="line">    afterNode.next = newNode</span><br><span class="line">    size += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> newNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>수행한 작업은 다음과 같다.</p><ol><li>이 메서드가 tail 노드와 함께 호출되는 경우, 기능적으로 동일한 <em>append</em> 메서드를 호출할 수 있다. 이것은 tail의 업데이트를 처리한다.</li><li>그렇지 않으면, 새 노드를 만들고 <em>next</em> 속성을 리스트의 다음 노드에 연결한다.</li><li>지정된 노드의 <em>next</em> 값을 다시 할당하여 방금 만든 새 노드에 연결한다.</li></ol><blockquote><p>테스트 (<em>Main.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    list.push(<span class="number">3</span>)</span><br><span class="line">    list.push(<span class="number">2</span>)</span><br><span class="line">    list.push(<span class="number">1</span>)</span><br><span class="line">    println(<span class="string">&quot;Before inserting: <span class="variable">$list</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> middleNode = list.nodeAt(<span class="number">1</span>)!!</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        middleNode = list.insert(-<span class="number">1</span> * i, middleNode)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;After inserting: <span class="variable">$list</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Before inserting: 1 -&gt; 2 -&gt; 3</span><br><span class="line">After inserting: 1 -&gt; 2 -&gt; -1 -&gt; -2 -&gt; -3 -&gt; 3</span><br></pre></td></tr></table></figure><h3 id="성능-분석"><a class="markdownIt-Anchor" href="#성능-분석"></a> 성능 분석</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">push</th><th style="text-align:center">append</th><th style="text-align:center">insert</th><th style="text-align:center">nodeAt</th></tr></thead><tbody><tr><td style="text-align:center">행동</td><td style="text-align:center">head에 삽입</td><td style="text-align:center">tail에 삽입</td><td style="text-align:center">노드 뒤에 삽입</td><td style="text-align:center">주어진 인덱스의 노드를 반환</td></tr><tr><td style="text-align:center">시간 복잡도</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(i), i는 주어진 인덱스</td></tr></tbody></table><h2 id="리스트에서-값들을-제거하기"><a class="markdownIt-Anchor" href="#리스트에서-값들을-제거하기"></a> 리스트에서 값들을 제거하기</h2><p>노드의 제거에는 3가지 대표적인 연산들이 있다.</p><ol><li><strong>pop</strong> : 리스트 앞부분의 값을 제거</li><li><strong>removeLast</strong> : 리스트 끝에 있는 값을 제거</li><li><strong>removeAfter</strong> : 리스트의 어느 곳의 값이든 제거</li></ol><h3 id="pop-연산"><a class="markdownIt-Anchor" href="#pop-연산"></a> pop 연산</h3><blockquote><p><code>pop()</code> (<em>LinkedList.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEmpty()) size -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">val</span> result = head?.value</span><br><span class="line">    head = head?.next</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) tail = <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pop()</code>은 리스트에서 제거된 값을 반환한다. 리스트가 비어있을 수 있으므로 이 값은</p><p>head를 다음 노드로 이동시켜 리스트의 첫 번째 노드를 효과적으로 제거할 수 있다. 더 이상 연결된 참조가 없기 때문에 가비지 컬렉터는 메서드가 완료되면 메모리에서 이전 노드를 제거한다. 리스트가 비어 있으면 tail도 null로 설정한다.</p><blockquote><p>테스트 (<em>Main.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    list.push(<span class="number">3</span>)</span><br><span class="line">    list.push(<span class="number">2</span>)</span><br><span class="line">    list.push(<span class="number">1</span>)</span><br><span class="line">    println(<span class="string">&quot;Before popping list: <span class="variable">$list</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> poppedValue = list.pop()</span><br><span class="line">    println(<span class="string">&quot;After popping list: <span class="variable">$list</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Popped value: <span class="variable">$poppedValue</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before popping list: 1 -&gt; 2 -&gt; 3</span><br><span class="line">After popping list: 2 -&gt; 3</span><br><span class="line">Popped value: 1</span><br></pre></td></tr></table></figure><h3 id="removelast-연산"><a class="markdownIt-Anchor" href="#removelast-연산"></a> removeLast 연산</h3><p>리스트의 마지막 노드를 제거하는 것은 다소 번거로운 작업이다.</p><p>tail 노드에 대한 참조가 있더라도 그 앞에 노드에 대한 참조가 없으면 잘라낼 수 없다. 따라서 마지막 노드 이전의 노드를 찾으려면 전체 리스트를 탐색해야한다.</p><blockquote><p><code>removeLast()</code> (<em>LinkedList.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">removeLast</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="comment">// ①</span></span><br><span class="line">    <span class="keyword">val</span> head = head ?: <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="comment">// ②</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="literal">null</span>) <span class="keyword">return</span> pop()</span><br><span class="line">    <span class="comment">// ③</span></span><br><span class="line">    size -= <span class="number">1</span></span><br><span class="line">    <span class="comment">// ④</span></span><br><span class="line">    <span class="keyword">var</span> prev = head</span><br><span class="line">    <span class="keyword">var</span> current = head</span><br><span class="line">    <span class="keyword">var</span> next = current.next</span><br><span class="line">    <span class="keyword">while</span> (next != <span class="literal">null</span>) &#123;</span><br><span class="line">        prev = current</span><br><span class="line">        current = next</span><br><span class="line">        next = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ⑤</span></span><br><span class="line">    prev.next = <span class="literal">null</span></span><br><span class="line">    tail = prev</span><br><span class="line">    <span class="keyword">return</span> current.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>head가 null이면 제거할 항목이 없으므로 null을 반환한다.</li><li>목록이 하나의 노드로만 구성된 경우 <em>removeLast</em>는 기능적으로 <em>pop</em>과 동일하다. <em>pop</em>은 head 및 tail의 참조를 업데이트하는 것을 처리하므로 이 작업을 <em>pop</em> 함수에 위임할 수 있다.</li><li>이 시점에서 노드를 제거 할 것임을 알고 있으므로 그에 따라 목록의 크기를 업데이트한다.</li><li>current.next가 null이 될 때까지 다음 노드를 계속 검색한다. 이것은 current가 목록의 마지막 노드임을 나타낸다.</li><li>current가 마지막 노드이므로 prev.next 참조를 사용하여 연결을 끊는다. tail의 참조도 업데이트해야 한다.</li></ol><blockquote><p>테스트 (<em>Main.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    list.push(<span class="number">3</span>)</span><br><span class="line">    list.push(<span class="number">2</span>)</span><br><span class="line">    list.push(<span class="number">1</span>)</span><br><span class="line">    println(<span class="string">&quot;Before removing last node: <span class="variable">$list</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> removedValue = list.removeLast()</span><br><span class="line">    println(<span class="string">&quot;After removing last node: <span class="variable">$list</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Removed value: <span class="variable">$removedValue</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before removing last node: 1 -&gt; 2 -&gt; 3</span><br><span class="line">After removing last node: 1 -&gt; 2</span><br><span class="line">Removed value: 3</span><br></pre></td></tr></table></figure><p><code>removeLast()</code>를 사용하려면 리스트를 순회해야 한다. 이것은 비교적 비용이 많이 드는 <em>O(n)</em> 연산을 하게 된다.</p><h3 id="remove-연산"><a class="markdownIt-Anchor" href="#remove-연산"></a> remove 연산</h3><p>remove 연산은 리스트의 특정 지점에서 노드를 제거하는 것이다. 이것은 <code>insert()</code>와 매우 유사하다. 먼저 제거하려는 노드의 바로 앞 노드를 찾은 다음 연결을 해제<small>(unlink)</small>해야 한다.</p><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/122572442-b40fdc00-d088-11eb-9132-9ac1d7a295f0.png'></p><blockquote><p><code>removeAfter()</code> (<em>LinkedList.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">removeAfter</span><span class="params">(node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">val</span> result = node.next?.value</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (node.next == tail) tail = node</span><br><span class="line">    <span class="keyword">if</span> (node.next != <span class="literal">null</span>) size -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    node.next = node.next?.next</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tail 참조를 업데이트해야 하므로 제거된 노드가 tail 노드인 경우 특별한 주의가 필요하다.</p><blockquote><p>테스트 (<em>Main.kt</em>)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before removing at particular index: <span class="number">1</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span></span><br><span class="line">After removing at index <span class="number">1</span>: <span class="number">1</span> -&gt; <span class="number">3</span></span><br><span class="line">Removed value: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>insert()</code>와 유사하게 이 작업의 시간 복잡도는 *O(1)*이지만 미리 특정 노드에 대한 참조가 있어야 한다.</p><h3 id="성능-분석-2"><a class="markdownIt-Anchor" href="#성능-분석-2"></a> 성능 분석</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">pop</th><th style="text-align:center">removeLast</th><th style="text-align:center">removeAfter</th></tr></thead><tbody><tr><td style="text-align:center">행동</td><td style="text-align:center">head를 제거</td><td style="text-align:center">tail을 제거</td><td style="text-align:center">바로 다음 노드를 제거</td></tr><tr><td style="text-align:center">시간 복잡도</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr></tbody></table><p>지금까지 대부분의 프로그래머가 공감할 수 있는 linked list에 대한 인터페이스를 정의했다. 하지만 Kotlin semantic을 더욱 돋보이게 하려면 수행해야 할 작업이 존재한다. 본문의 다음 절반에서는 Kotlin의 관용적<small>(idomatic)</small>인 부분을 활용하여 더 나은 인터페이스를 만드는데 초점을 맞출 것이다.</p><h2 id="kotlin-collection-interfaces"><a class="markdownIt-Anchor" href="#kotlin-collection-interfaces"></a> Kotlin collection interfaces</h2><p>Kotlin 표준 라이브러리에는 특정 유형에 대해 예상되는 사항을 정의하는데 도움이 되는 인터페이스 모음이 있다. 이러한 각 인터페이스는 특성과 성능에 대한 특정한 보증을 제공한다. 이러한 인터페이스 모음 중 4개를 컬렉션 인터페이스라고 한다.</p><p>다음은 각 인터페이스가 나타내는 작은 예시들이다.</p><ol><li>Iterable : iterable 타입은 <em>Iterator</em>를 통해 요소들에 대한 순차적 접근을 제공한다.</li><li>Collection : 컬렉션 타입은 추가 기능을 제공하는 iterable 타입으로, 컬렉션이 특정 요소 또는 요소들의 컬렉션을 포함하고 있는지 확인할 수 있게 해준다.</li><li>MutableIterable : 주어진 컬렉션에서 항목들을 제거할 수 있는 MutableIterator를 제공한다.</li><li>MutableCollection : 단순 컬렉션과 달리, MutableCollection 인터페이스는 컬렉션을 변경하는 메서드를 제공한다. 예를 들어, 요소를 <em>추가</em> 및 <em>제거</em>할 수 있으며 전체 <em>컬렉션을 지울 수도</em> 있다.</li></ol><p>Linked list는 컬렉션 인터페이스의 계층 4에 도달 할 수 있습니다. Linked list는 연결된 노드들이므로<small>(chain of nodes)</small> Iterable 인터페이스를 채택하는 것이 합리적이다. 이미 요소 추가 및 제거를 구현 했으므로 MutableCollection 인터페이스로 이동할 수 있다는 것이 매우 분명하다.</p><br><div style="text-align: right"> <a href="https://www.raywenderlich.com/books/data-structures-algorithms-in-kotlin/v1.0"><b><i>Data Structures & Algorithms in Kotlin</i></b></a> 서적을 참고하여 작성했습니다. </div>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Data-Structure/">Data Structure</category>
      
      <category domain="http://june0122.github.io/tags/Linked-List/">Linked List</category>
      
      
      <comments>http://june0122.github.io/2021/06/27/data-structure-linked-list/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 레벨 2 : 카펫</title>
      <link>http://june0122.github.io/2021/06/26/programmers-42842/</link>
      <guid>http://june0122.github.io/2021/06/26/programmers-42842/</guid>
      <pubDate>Sat, 26 Jun 2021 11:28:54 GMT</pubDate>
      
      <description>[코딩테스트 고득점 Kit - 완전탐색] 레벨 2</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42842">문제 보기</a></h3><p><code>완전탐색</code></p><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><blockquote><p>첫 시도</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(brown: <span class="type">Int</span>, yellow: <span class="type">Int</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">val</span> total = brown + yellow</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3</span> .. (total / <span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">3</span> .. (total / <span class="number">2</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= j &amp;&amp; i * j == total &amp;&amp; checkBrown(i to j, brown)) <span class="keyword">return</span> intArrayOf(i, j)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> intArrayOf()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">checkBrown</span><span class="params">(pair: <span class="type">Pair</span>&lt;<span class="type">Int</span>, <span class="built_in">Int</span>&gt;, brown: <span class="type">Int</span>)</span></span> = (pair.first * <span class="number">2</span>) + (pair.second * <span class="number">2</span>) - <span class="number">4</span> == brown</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(가로 * 2) + (세로 * 2) - 4 = brown</code></p><p>테두리의 갈색 격자의 개수는 가로와 세로를 각각 2를 곱해주고 모서리 부분에서 중복되는 4만큼을 빼서 구할 수 있는 것을 이용하였다.</p><p>이렇게 하면 간단하게 구현할 수 있지만 시간 복잡도적인 측면에서 효율적이진 못한 코드라 개선이 필요해보인다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">테스트 <span class="number">1</span> 〉통과 (<span class="number">0.</span>71ms, <span class="number">54.</span>8MB)</span><br><span class="line">테스트 <span class="number">2</span> 〉통과 (<span class="number">1.</span>04ms, <span class="number">55.</span>1MB)</span><br><span class="line">테스트 <span class="number">3</span> 〉통과 (<span class="number">229.</span>05ms, <span class="number">54.</span>4MB)</span><br><span class="line">테스트 <span class="number">4</span> 〉통과 (<span class="number">30.</span>27ms, <span class="number">55.</span>2MB)</span><br><span class="line">테스트 <span class="number">5</span> 〉통과 (<span class="number">28.</span>67ms, <span class="number">54.</span>5MB)</span><br><span class="line">테스트 <span class="number">6</span> 〉통과 (<span class="number">152.</span>95ms, <span class="number">54.</span>7MB)</span><br><span class="line">테스트 <span class="number">7</span> 〉통과 (<span class="number">688.</span>13ms, <span class="number">54.</span>2MB)</span><br><span class="line">테스트 <span class="number">8</span> 〉통과 (<span class="number">239.</span>40ms, <span class="number">54.</span>4MB)</span><br><span class="line">테스트 <span class="number">9</span> 〉통과 (<span class="number">379.</span>53ms, 55MB)</span><br><span class="line">테스트 <span class="number">10</span> 〉통과 (<span class="number">400.</span>44ms, <span class="number">55.</span>5MB)</span><br><span class="line">테스트 <span class="number">11</span> 〉통과 (<span class="number">0.</span>65ms, <span class="number">55.</span>4MB)</span><br><span class="line">테스트 <span class="number">12</span> 〉통과 (<span class="number">0.</span>66ms, <span class="number">55.</span>8MB)</span><br><span class="line">테스트 <span class="number">13</span> 〉통과 (<span class="number">1.</span>30ms, 55MB)</span><br></pre></td></tr></table></figure><blockquote><p>근의 공식 활용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.math.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(brown: <span class="type">Int</span>, yellow: <span class="type">Int</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">val</span> D = ((brown + <span class="number">4</span>) / <span class="number">2</span>).toDouble().pow(<span class="number">2.0</span>) - <span class="number">4</span> * (brown + yellow)</span><br><span class="line">        <span class="keyword">val</span> width = ((brown + <span class="number">4</span>) / <span class="number">2</span> + sqrt(D)) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">val</span> height = ((brown + <span class="number">4</span>) / <span class="number">2</span> - sqrt(D)) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> intArrayOf(width.toInt(), height.toInt())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>먼저 문제의 지문에서 아래 두 개의 식을 구할 수 있다.</li></ol><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/123511666-9a404b80-d6bd-11eb-99c8-20393430d471.png'></p><ol start="2"><li>그 다음 계산의 편의성을 위해 아래와 같이 <code>A</code>와 <code>B</code>로 치환시킨다.</li></ol><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/123511670-a0cec300-d6bd-11eb-8ba7-03f931e5403b.png'></p><ol start="3"><li>치환한 값을 대입시키면 아래와 같은 이차 방정식을 구할 수 있다.</li></ol><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/123511672-a75d3a80-d6bd-11eb-9968-1bd1a87322b9.png'></p><ol start="4"><li>근의 공식을 이용하면 가로와 세로의 크기를 구할 수 있다. 근의 공식은 다음과 같다.</li></ol><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/123511675-ad531b80-d6bd-11eb-835d-335a687c8714.png'></p><ol start="5"><li>가로가 세로보다 크거나 같으므로 가로인 <code>w</code>에 sqrt(D)를 더하고 세로인 <code>h</code>에서는 빼면 값을 구할 수 있다.</li></ol><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/123511680-b348fc80-d6bd-11eb-9c14-4cc2bb606850.png'></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">테스트 <span class="number">1</span> 〉통과 (<span class="number">0.</span>05ms, <span class="number">55.</span>3MB)</span><br><span class="line">테스트 <span class="number">2</span> 〉통과 (<span class="number">0.</span>04ms, <span class="number">55.</span>4MB)</span><br><span class="line">테스트 <span class="number">3</span> 〉통과 (<span class="number">0.</span>04ms, <span class="number">54.</span>6MB)</span><br><span class="line">테스트 <span class="number">4</span> 〉통과 (<span class="number">0.</span>05ms, 55MB)</span><br><span class="line">테스트 <span class="number">5</span> 〉통과 (<span class="number">0.</span>05ms, <span class="number">55.</span>1MB)</span><br><span class="line">테스트 <span class="number">6</span> 〉통과 (<span class="number">0.</span>07ms, <span class="number">54.</span>9MB)</span><br><span class="line">테스트 <span class="number">7</span> 〉통과 (<span class="number">0.</span>06ms, <span class="number">54.</span>6MB)</span><br><span class="line">테스트 <span class="number">8</span> 〉통과 (<span class="number">0.</span>04ms, <span class="number">54.</span>8MB)</span><br><span class="line">테스트 <span class="number">9</span> 〉통과 (<span class="number">0.</span>06ms, <span class="number">54.</span>6MB)</span><br><span class="line">테스트 <span class="number">10</span> 〉통과 (<span class="number">0.</span>05ms, <span class="number">55.</span>3MB)</span><br><span class="line">테스트 <span class="number">11</span> 〉통과 (<span class="number">0.</span>04ms, <span class="number">54.</span>7MB)</span><br><span class="line">테스트 <span class="number">12</span> 〉통과 (<span class="number">0.</span>05ms, 55MB)</span><br><span class="line">테스트 <span class="number">13</span> 〉통과 (<span class="number">0.</span>04ms, <span class="number">54.</span>5MB)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/Programmers/">Programmers</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/Programmers/">Programmers</category>
      
      <category domain="http://june0122.github.io/tags/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/">완전탐색</category>
      
      
      <comments>http://june0122.github.io/2021/06/26/programmers-42842/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 레벨 2 : H-Index</title>
      <link>http://june0122.github.io/2021/06/25/programmers-42747/</link>
      <guid>http://june0122.github.io/2021/06/25/programmers-42747/</guid>
      <pubDate>Fri, 25 Jun 2021 04:46:25 GMT</pubDate>
      
      <description>[코딩테스트 고득점 Kit - 정렬] 레벨 2</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42747">문제 보기</a></h3><p><code>정렬</code></p><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><blockquote><p>나의 풀이</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(citations: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> h = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">val</span> citedList = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">val</span> uncitedList = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">        citations.sort()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count &lt;= citations.size) &#123;</span><br><span class="line">            citations.forEach &#123;</span><br><span class="line">                <span class="keyword">if</span> (it &gt;= count) citedList.add(it)</span><br><span class="line">                <span class="keyword">else</span> uncitedList.add(it)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (citedList.size &gt;= count &amp;&amp; uncitedList.size &lt;= count) h = count</span><br><span class="line">            &#125;</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            citedList.clear()</span><br><span class="line">            uncitedList.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>다른 사람의 풀이</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.math.min</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(citations: <span class="type">IntArray</span>)</span></span> = citations.sortedDescending().mapIndexed &#123; idx, item -&gt; min(idx + <span class="number">1</span>, item) &#125;.max()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/Programmers/">Programmers</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/Programmers/">Programmers</category>
      
      <category domain="http://june0122.github.io/tags/%EC%A0%95%EB%A0%AC/">정렬</category>
      
      
      <comments>http://june0122.github.io/2021/06/25/programmers-42747/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 레벨 2 : 튜플</title>
      <link>http://june0122.github.io/2021/06/25/programmers-64065/</link>
      <guid>http://june0122.github.io/2021/06/25/programmers-64065/</guid>
      <pubDate>Fri, 25 Jun 2021 04:39:51 GMT</pubDate>
      
      <description>[2019 카카오 개발자 겨울 인턴십] 레벨 2</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/64065">문제 보기</a></h3><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><blockquote><p>나의 풀이</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(s: <span class="type">String</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">set</span> = mutableSetOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">val</span> elements = s.replace(<span class="string">&quot;&#123;&#123;&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#125;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;&#125;,&#123;&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> arr = elements.map &#123; it.split(<span class="string">&quot;,&quot;</span>) &#125;.sortedBy &#123; it.size &#125;</span><br><span class="line"></span><br><span class="line">        arr.forEach &#123;</span><br><span class="line">            it.forEach &#123; </span><br><span class="line">                <span class="keyword">set</span>.add(it.toInt())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">set</span>.toIntArray()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>fold(…)</code> 사용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(s: <span class="type">String</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">return</span> s.split(<span class="string">&quot;&#125;,&#123;&quot;</span>)</span><br><span class="line">            .map &#123; it.replace(<span class="string">&quot;[^0-9,]&quot;</span>.toRegex(), <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;,&quot;</span>).map &#123; it.toInt() &#125; &#125;</span><br><span class="line">            .sortedBy &#123; it.size &#125;</span><br><span class="line">            .fold(setOf&lt;<span class="built_in">Int</span>&gt;()) &#123; acc, list -&gt; acc.union(list) &#125;</span><br><span class="line">            .toIntArray()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/Programmers/">Programmers</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/Programmers/">Programmers</category>
      
      <category domain="http://june0122.github.io/tags/%EC%A0%95%EB%A0%AC/">정렬</category>
      
      
      <comments>http://june0122.github.io/2021/06/25/programmers-64065/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[LeetCode] 2. Add Two Numbers</title>
      <link>http://june0122.github.io/2021/06/15/leetcode-2/</link>
      <guid>http://june0122.github.io/2021/06/15/leetcode-2/</guid>
      <pubDate>Tue, 15 Jun 2021 04:59:28 GMT</pubDate>
      
      <description>2. Add Two Numbers</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="leetcode-2-add-two-numbers"><a class="markdownIt-Anchor" href="#leetcode-2-add-two-numbers"></a> <a href="https://leetcode.com/problems/add-two-numbers/">[LeetCode] 2. Add Two Numbers</a></h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h3><blockquote><h3 id="자리올림smallcarrysmall-이용"><a class="markdownIt-Anchor" href="#자리올림smallcarrysmall-이용"></a> 자리올림<small>(carry)</small> 이용</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> ListNode.<span class="title">value</span><span class="params">()</span></span> = <span class="keyword">this</span>?.`<span class="keyword">val</span>` ?: <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addTwoNumbers</span><span class="params">(l1: <span class="type">ListNode</span>?, l2: <span class="type">ListNode</span>?)</span></span>: ListNode? &#123;</span><br><span class="line">        <span class="keyword">var</span> (list1, list2) = l1 to l2</span><br><span class="line">        <span class="keyword">var</span> head = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> cur = head</span><br><span class="line">        <span class="keyword">var</span> carry = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> || list2 != <span class="literal">null</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> x = list1?.value() ?: <span class="number">0</span></span><br><span class="line">            <span class="keyword">val</span> y = list2?.value() ?: <span class="number">0</span></span><br><span class="line">            <span class="keyword">val</span> sum = (x + y + carry) % <span class="number">10</span></span><br><span class="line">            carry = (x + y + carry) / <span class="number">10</span></span><br><span class="line">            cur?.next = ListNode(sum)</span><br><span class="line">            cur = cur.next</span><br><span class="line">            <span class="keyword">if</span> (list1 != <span class="literal">null</span>) list1 = list1.next</span><br><span class="line">            <span class="keyword">if</span> (list2 != <span class="literal">null</span>) list2 = list2.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime: 240 ms, faster than 18.40% of Kotlin online submissions for Add Two Numbers.</span><br><span class="line">Memory Usage: 43.6 MB, less than 11.74% of Kotlin online submissions for Add Two Numbers.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/LeetCode/">LeetCode</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://june0122.github.io/2021/06/15/leetcode-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[LeetCode] 1. Two Sum</title>
      <link>http://june0122.github.io/2021/06/13/leetcode-1/</link>
      <guid>http://june0122.github.io/2021/06/13/leetcode-1/</guid>
      <pubDate>Sun, 13 Jun 2021 11:49:45 GMT</pubDate>
      
      <description>1. Two Sum</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="leetcode-1-two-sum"><a class="markdownIt-Anchor" href="#leetcode-1-two-sum"></a> <a href="https://leetcode.com/problems/two-sum/">[LeetCode] 1. Two Sum</a></h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h3><blockquote><h3 id="brute-force"><a class="markdownIt-Anchor" href="#brute-force"></a> Brute Force</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">twoSum</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">var</span> twoNum = <span class="number">0</span> to <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> nums.indices) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> i + <span class="number">1</span> until nums.size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) twoNum = i to j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> intArrayOf(twoNum.first, twoNum.second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">232 ms36.5 MB</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">twoSum</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> nums.indices) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j <span class="keyword">in</span> i + <span class="number">1</span> until nums.size) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) <span class="keyword">return</span> intArrayOf(i, j)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">236 ms36.8 MB</span><br></pre></td></tr></table></figure><h4 id="시간-복잡도-onsup2sup"><a class="markdownIt-Anchor" href="#시간-복잡도-onsup2sup"></a> 시간 복잡도 : O(n<sup>2</sup>)</h4><h4 id="공간-복잡도-o1"><a class="markdownIt-Anchor" href="#공간-복잡도-o1"></a> 공간 복잡도 : O(1)</h4><blockquote><h3 id="two-pass-hash-table"><a class="markdownIt-Anchor" href="#two-pass-hash-table"></a> Two-pass Hash Table</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">twoSum</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">val</span> hashmap = HashMap&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;()</span><br><span class="line">        </span><br><span class="line">        nums.forEachIndexed &#123; index, value -&gt;</span><br><span class="line">            hashmap[value] = index</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        nums.forEachIndexed &#123; index, value -&gt;</span><br><span class="line">            <span class="keyword">val</span> complement = target - value</span><br><span class="line">            <span class="keyword">if</span> (hashmap.containsKey(complement) &amp;&amp; hashmap.getValue(complement) != index) &#123;</span><br><span class="line">                <span class="keyword">return</span> intArrayOf(index, hashmap.getValue(complement))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">204 ms37.4 MB</span><br></pre></td></tr></table></figure><h4 id="시간-복잡도-on"><a class="markdownIt-Anchor" href="#시간-복잡도-on"></a> 시간 복잡도 : O(n)</h4><p>n개의 요소들을 가지고 있는 리스트를 2번 순회하지만, HashMap을 사용하여 look up time을 O(1)으로 줄였기 때문에 결과적으론 O(n)이다.</p><h4 id="공간-복잡도-on"><a class="markdownIt-Anchor" href="#공간-복잡도-on"></a> 공간 복잡도 : O(n)</h4><p>HashMap 사용으로 n개의 요소들을 저장하기 때문에 추가적인 공간이 필요하다.</p><blockquote><h3 id="one-pass-hash-table"><a class="markdownIt-Anchor" href="#one-pass-hash-table"></a> One-pass Hash Table</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">twoSum</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">val</span> hashmap = HashMap&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;()</span><br><span class="line">        </span><br><span class="line">        nums.forEachIndexed &#123; index, value -&gt;</span><br><span class="line">            <span class="keyword">val</span> complement = target - value</span><br><span class="line">            <span class="keyword">if</span> (hashmap.containsKey(complement)) &#123;</span><br><span class="line">                <span class="keyword">return</span> intArrayOf(hashmap.getValue(complement), index)</span><br><span class="line">            &#125;</span><br><span class="line">            hashmap[value] = index</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">188 ms37.9 MB</span><br></pre></td></tr></table></figure><h4 id="시간-복잡도-on-2"><a class="markdownIt-Anchor" href="#시간-복잡도-on-2"></a> 시간 복잡도 : O(n)</h4><p>n개의 원소들을 가진 리스트를 딱 한 번만 순회하고, HashMap에서의 look up time은 오직 O(1)만 소모하므로 시간 복잡도는 O(n)이다.</p><h4 id="공간-복잡도-on-2"><a class="markdownIt-Anchor" href="#공간-복잡도-on-2"></a> 공간 복잡도 : O(n)</h4><p>Two-pass Hash Table 방법과 마찬가지로 HashMap 사용으로 n개의 요소들을 저장하기 때문에 추가적인 공간이 필요하다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/LeetCode/">LeetCode</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://june0122.github.io/2021/06/13/leetcode-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[LeetCode] 232. Implement Queue using Stacks</title>
      <link>http://june0122.github.io/2021/06/12/leetcode-232/</link>
      <guid>http://june0122.github.io/2021/06/12/leetcode-232/</guid>
      <pubDate>Sat, 12 Jun 2021 00:33:36 GMT</pubDate>
      
      <description>232. Implement Queue using Stacks</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="leetcode-232-implement-queue-using-stacks"><a class="markdownIt-Anchor" href="#leetcode-232-implement-queue-using-stacks"></a> <a href="https://leetcode.com/problems/implement-queue-using-stacks/">[LeetCode] 232. Implement Queue using Stacks</a></h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">val</span> input = Stack&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    <span class="keyword">val</span> output = Stack&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(x: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        input.push(x)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        peek()</span><br><span class="line">        <span class="keyword">return</span> output.pop()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (output.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span>(input.isNotEmpty()) &#123;</span><br><span class="line">                output.push(input.pop())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.peek()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">empty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input.isEmpty() &amp;&amp; output.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runtime: 168 ms, faster than 26.03% of Kotlin online submissions for Implement Queue using Stacks.</span><br><span class="line">Memory Usage: 35.4 MB, less than 100.00% of Kotlin online submissions for Implement Queue using Stacks.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/LeetCode/">LeetCode</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://june0122.github.io/2021/06/12/leetcode-232/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[LeetCode] 225. Implement Stack using Queues</title>
      <link>http://june0122.github.io/2021/06/12/leetcode-225/</link>
      <guid>http://june0122.github.io/2021/06/12/leetcode-225/</guid>
      <pubDate>Sat, 12 Jun 2021 00:33:36 GMT</pubDate>
      
      <description>225. Implement Stack using Queues</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="leetcode-225-implement-stack-using-queues"><a class="markdownIt-Anchor" href="#leetcode-225-implement-stack-using-queues"></a> <a href="https://leetcode.com/problems/implement-stack-using-queues/">[LeetCode] 225. Implement Stack using Queues</a></h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h3><blockquote><p>Queue 1개 사용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">val</span> q1: Queue&lt;<span class="built_in">Int</span>&gt; = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(x: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> size = q1.size</span><br><span class="line">        q1.offer(x)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until size) &#123;</span><br><span class="line">            q1.offer(q1.poll())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q1.poll()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">top</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q1.peek()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">empty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q1.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Queue 2개 사용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">val</span> q1: Queue&lt;<span class="built_in">Int</span>&gt; = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    <span class="keyword">val</span> q2: Queue&lt;<span class="built_in">Int</span>&gt; = LinkedList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(x: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        q1.add(x);</span><br><span class="line">        <span class="keyword">while</span> (!q2.isEmpty())</span><br><span class="line">            q1.add(q2.poll());</span><br><span class="line">        <span class="keyword">while</span> (!q1.isEmpty())</span><br><span class="line">            q2.add(q1.poll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q2.poll()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">top</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q2.peek()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">empty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> q1.isEmpty() &amp;&amp; q2.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/LeetCode/">LeetCode</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://june0122.github.io/2021/06/12/leetcode-225/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Kotlin] Coroutine - 코루틴의 내부 구현</title>
      <link>http://june0122.github.io/2021/06/09/coroutines-under-the-hood/</link>
      <guid>http://june0122.github.io/2021/06/09/coroutines-under-the-hood/</guid>
      <pubDate>Wed, 09 Jun 2021 08:48:07 GMT</pubDate>
      
      <description>코루틴은 디컴파일되면 일반 코드일 뿐이다. &lt;b&gt;Continuation Passing Style&lt;small&gt;(CPS, 연속 전달 방식)&lt;/b&gt; 이라는 형태로 동작하며, 결과를 호출자에게 직접 반환하는 대신 &lt;b&gt;Continuation&lt;/b&gt;으로 결과를 전달한다. &lt;b&gt;Continuation&lt;/b&gt;이라는 객체가 있고, 매 번 함수를 호출할 때마다 &lt;b&gt;continuation&lt;/b&gt;을 넘겨준다. &lt;b&gt;continuation&lt;/b&gt;은 Callback 인터페이스 같은 것으로, 재개를 해주는 인터페이스를 가진 객체인 것이다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="코루틴은-jvm에서-내부적으로-어떻게-동작하는-것일까"><a class="markdownIt-Anchor" href="#코루틴은-jvm에서-내부적으로-어떻게-동작하는-것일까"></a> 코루틴은 JVM에서 내부적으로 어떻게 동작하는 것일까?</h2><p>아래의 내용은 <a href="https://www.youtube.com/watch?v=YrrUCSi72E8&amp;t=110s">KotlinConf 2017 - Deep Dive into Coroutines on JVM by Roman Elizarov</a> 영상의 내용들이다.</p><h4 id="there-is-no-magic"><a class="markdownIt-Anchor" href="#there-is-no-magic"></a> There is no magic</h4><p>코루틴은 디컴파일되면 일반 코드일 뿐이다. <strong>Continuation Passing Style<small>(CPS, 연속 전달 방식)</small></strong> 이라는 형태의 코드로 전환한다.</p><blockquote><h3 id="a-toy-problem"><a class="markdownIt-Anchor" href="#a-toy-problem"></a> A toy problem</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">postItem</span><span class="params">(item: <span class="type">Item</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> token = requestToken()</span><br><span class="line">    <span class="keyword">val</span> post = createPost(token, item)</span><br><span class="line">    processPost(post)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>서버에서 토큰을 가져와서 게시물을 포스트한 다음, 포스트 완료처리를 하는 세 가지 연산을 코루틴으로 만들면 JVM 혹은 바이트코드에서 내부적으로 어떤 형태로 동작하는 것일까?</p><p>이것이 Continuation Passing Style로 내부적으로 컴파일할 때 아래와 같이 바뀐다.</p><blockquote><h3 id="continuation-passing-style"><a class="markdownIt-Anchor" href="#continuation-passing-style"></a> Continuation Passing Style</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">postItem</span><span class="params">(item: <span class="type">Item</span>)</span></span> &#123;</span><br><span class="line">    requestToken &#123; token -&gt;</span><br><span class="line">        <span class="keyword">val</span> post = createPost(token, item)</span><br><span class="line">        processPost(post)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Continuation Passing Style은 결과를 호출자에게 직접 반환하는 대신 <strong>Callback</strong>같은 것 <sup>continuation</sup>으로 결과를 전달하는 것을 의미한다.</p><blockquote><h3 id="kotlin-suspending-functions"><a class="markdownIt-Anchor" href="#kotlin-suspending-functions"></a> Kotlin suspending functions</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">createPost</span><span class="params">(token: <span class="type">Token</span>, item: <span class="type">Item</span>)</span></span>: Post &#123; … &#125;</span><br></pre></td></tr></table></figure><p><code>createPost(…)</code>라는 suspend 함수를 하나를 만들었을 때, 코루틴에서는 일시 중단이 되었다가 재개가 되는데 어떻게 이것이 가능한 것인지 알아보자.</p><blockquote><h3 id="kotlin-suspending-functions-2"><a class="markdownIt-Anchor" href="#kotlin-suspending-functions-2"></a> Kotlin suspending functions</h3></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// suspend fun createPost(token: Token, item: Item): Post &#123; … &#125;</span></span><br><span class="line">     ↓</span><br><span class="line"><span class="comment">// Java/JVM </span></span><br><span class="line"><span class="function">Object <span class="title">createPost</span><span class="params">(Token token, Item item, Continuation&lt;Post&gt; cont)</span> </span>&#123; … &#125;</span><br></pre></td></tr></table></figure><p>내부적으로는 JVM에 들어갈 때 바이트코드로 컴파일되면서 같은 <code>createPost(…)</code>인데 <strong>Continuation</strong>이 생성되어 Continuation Passing Style로 변환된다.</p><p>호출했던 함수의 끝에 매개변수가 하나 추가되서 <strong>Continuation</strong>이라는 객체를 넘겨주는 것으로 변환되는 것이다.</p><blockquote><h3 id="labels"><a class="markdownIt-Anchor" href="#labels"></a> Labels</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    suspen <span class="function"><span class="keyword">fun</span> <span class="title">postItem</span><span class="params">(item: <span class="type">Item</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// LABEL 0</span></span><br><span class="line">↛       <span class="keyword">val</span> token = requestToken()</span><br><span class="line">    <span class="comment">// LABEL 1</span></span><br><span class="line">↛       <span class="keyword">val</span> post = createPost(token, item)</span><br><span class="line">    <span class="comment">// LABEL 2</span></span><br><span class="line">        processPost(post)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>먼저 Labael이라는 작업을 하게 되는데 코루틴에서 순차적으로 작성했던 코드들이 <code>suspend</code> 함수가 되면 컴파일할 때 Label이 찍히게 된다.</p><p>이 함수가 재개되어야 하는데, 재개될 때 필요한 <strong>Suspention Point</strong><small>(중단 지점과 재개 지점)</small>가 요구된다. 그래서 이 지점들을 Label로 찍어놓는 것이다. 이런 작업을 코틀린 컴파일러가 내부적으로 하게 된다.</p><p>대략적으로 아래와 같은 형태가 되는데, 작성했던 함수가 내부적으론 <code>switch-case</code>문처럼 바뀌어 case문이 3개가 생성되고 세 번을 실행하는 것을 알 수 있다. 함수를 실행할 때 0번이든, 1번이든, 2번이든 함수를 재개할 수 있는 지점이 생긴 것이다. 그리고 이 함수를 호출한 지점은 중단점이 될 수도 있는 것이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">postItem</span><span class="params">(item: <span class="type">Item</span>)</span></span> &#123;</span><br><span class="line">    switch (label) &#123;</span><br><span class="line">        case <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">val</span> token = requestToken()</span><br><span class="line">        case <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">val</span> post = createPost(token, item)</span><br><span class="line">        case <span class="number">2</span>:</span><br><span class="line">            processPost(post)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Label들이 다 완성되고 나면 Continuation Passing Style로 변환을 하게 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">postItem</span><span class="params">(item: <span class="type">Item</span>, cont: <span class="type">Continuation</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> sm = <span class="keyword">object</span> : CoroutineImpl &#123; … &#125;</span><br><span class="line">    switch (sm.label) &#123;</span><br><span class="line">        case <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">val</span> token = requestToken(sm)</span><br><span class="line">        case <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">val</span> post = createPost(token, item, sm)</span><br><span class="line">        case <span class="number">2</span>:</span><br><span class="line">            processPost(post)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Continuation</strong>이라는 객체가 있고, 매 번 함수를 호출할 때마다 <strong>continuation</strong>을 넘겨준다. <strong>continuation</strong>은 Callback 인터페이스 같은 것으로, 재개를 해주는 인터페이스를 가진 객체인 것이다.</p><p>위의 코드에서 <code>sm</code>이라고 하는 것은 <strong>state machine</strong>을 의미하는데, 각각의 함수가 호출될 때 상태<small>(지금까지 했던 연산의 결과)</small>를 같이 넘겨줘야 한다. 이 <strong>state machine</strong>의 정체는 결국 <strong>Continuation</strong>이고, <strong>Continuation</strong>이 어떠한 정보값을 가진 형태로 Passing이 되면서 코루틴이 내부적으로 동작하게 되는 것이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">postItem</span><span class="params">(item: <span class="type">Item</span>, cont: <span class="type">Continuation</span>)</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> sm = cont <span class="keyword">as</span>? ThisSM ?: <span class="keyword">object</span> : ThisSM &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">resume</span><span class="params">(…)</span></span> &#123;</span><br><span class="line">            postItem(<span class="literal">null</span>, <span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch (sm.label) &#123;</span><br><span class="line">        case <span class="number">0</span>:</span><br><span class="line">            sm.item = item</span><br><span class="line">            sm.label = <span class="number">1</span></span><br><span class="line">            requestToken(sm)</span><br><span class="line">        case <span class="number">1</span>:</span><br><span class="line">            createPost(token, item, sm)</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각각의 suspend function이 Continuation<small>(위 코드에선 <code>sm</code>)</small>을 마지막 매개변수로 가져가게 된다.</p><ul><li>만약 <code>requestToken(sm)</code>이 완료되었다면 <code>sm</code><small>(continuation)</small>에다가 <code>resume()</code>을 호출하게 된다.</li><li>다시 <code>createPost(token, item, sm)</code>가 호출되고 이것이 완료되었을 때도 <code>sm</code><small>(continuation)</small>에다가 <code>resume()</code>을 호출하는 형태가 반복되는 것이다.</li></ul><p>그렇다면 <code>resume()</code>은 정체가 무엇일까? 위의 코드에서 <code>resume()</code>은 결국 자기 자신을 불러주는 것이다. <small>(<code>postItem(…)</code> 내부에서 <code>postItem(…)</code>을 다시 호출하고 있음)</small></p><ul><li>예시로, suspend function인 <code>requestToken(sm)</code>의 연산이 끝났을 때 <code>resume()</code>을 통해 다시 <code>postItem(…)</code>이 호출되는데, 그때 Label 값을 하나 올려서 다른 케이스가 호출되도록 하는 것이다. 이렇게 되면 내부적으로는 마치 suspend function이 호출되고 다음 번 케이스, 그리고 또다시 다음 번 케이스로 넘어가는 형태가 되는 것이다.</li></ul><h2 id="decomplie된-코드-살펴보기"><a class="markdownIt-Anchor" href="#decomplie된-코드-살펴보기"></a> Decomplie된 코드 살펴보기</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">    GlobalScope.launch &#123;</span><br><span class="line">        <span class="keyword">val</span> userData = fetchUserData()</span><br><span class="line">        <span class="keyword">val</span> userCache = cacheUserData(userData)</span><br><span class="line">        updateTextView(userCache)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchUserData</span><span class="params">()</span></span> = <span class="string">&quot;user_name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">cacheUserData</span><span class="params">(user: <span class="type">String</span>)</span></span> = user</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">updateTextView</span><span class="params">(user: <span class="type">String</span>)</span></span> = user</span><br></pre></td></tr></table></figure><p>위의 코드를 코틀린의 바이트코드로 만든 다음, Decompile하여 Java 코드로 만들어보자.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/120593066-e3fc9400-c479-11eb-9f3d-3ad7738018d3.png'></p><blockquote><p>Decomplie된 코드</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Example_nomagic_01Kt</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> static <span class="keyword">final</span> void main() &#123;</span><br><span class="line">      BuildersKt.launch$default((CoroutineScope)GlobalScope.INSTANCE, (CoroutineContext)<span class="literal">null</span>, (CoroutineStart)<span class="literal">null</span>, (Function2)(new Function2((Continuation)<span class="literal">null</span>) &#123;</span><br><span class="line">         int label;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Nullable</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">final</span> Object invokeSuspend(<span class="meta">@NotNull</span> Object $result) &#123;</span><br><span class="line">            Object var10000;</span><br><span class="line">            label17: &#123;</span><br><span class="line">               Object var4 = IntrinsicsKt.getCOROUTINE_SUSPENDED();</span><br><span class="line">               switch(<span class="keyword">this</span>.label) &#123;</span><br><span class="line">               case <span class="number">0</span>:</span><br><span class="line">                  ResultKt.throwOnFailure($result);</span><br><span class="line">                  <span class="keyword">this</span>.label = <span class="number">1</span>;</span><br><span class="line">                  var10000 = Example_nomagic_01Kt.fetchUserData(<span class="keyword">this</span>);</span><br><span class="line">                  <span class="keyword">if</span> (var10000 == var4) &#123;</span><br><span class="line">                     <span class="keyword">return</span> var4;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">               case <span class="number">1</span>:</span><br><span class="line">                  ResultKt.throwOnFailure($result);</span><br><span class="line">                  var10000 = $result;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">               case <span class="number">2</span>:</span><br><span class="line">                  ResultKt.throwOnFailure($result);</span><br><span class="line">                  var10000 = $result;</span><br><span class="line">                  <span class="keyword">break</span> label17;</span><br><span class="line">               default:</span><br><span class="line">                  <span class="keyword">throw</span> new IllegalStateException(<span class="string">&quot;call to &#x27;resume&#x27; before &#x27;invoke&#x27; with coroutine&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               String userData = (String)var10000;</span><br><span class="line">               <span class="keyword">this</span>.label = <span class="number">2</span>;</span><br><span class="line">               var10000 = Example_nomagic_01Kt.cacheUserData(userData, <span class="keyword">this</span>);</span><br><span class="line">               <span class="keyword">if</span> (var10000 == var4) &#123;</span><br><span class="line">                  <span class="keyword">return</span> var4;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String userCache = (String)var10000;</span><br><span class="line">            Example_nomagic_01Kt.updateTextView(userCache);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Unit</span>.INSTANCE;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@NotNull</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">final</span> Continuation create(<span class="meta">@Nullable</span> Object value, <span class="meta">@NotNull</span> Continuation completion) &#123;</span><br><span class="line">            Intrinsics.checkNotNullParameter(completion, <span class="string">&quot;completion&quot;</span>);</span><br><span class="line">            Function2 var3 = new &lt;anonymous <span class="keyword">constructor</span>&gt;(completion);</span><br><span class="line">            <span class="keyword">return</span> var3;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">final</span> Object invoke(Object var1, Object var2) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((&lt;undefinedtype&gt;)<span class="keyword">this</span>.create(var1, (Continuation)var2)).invokeSuspend(<span class="built_in">Unit</span>.INSTANCE);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;), <span class="number">3</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// $FF: synthetic method</span></span><br><span class="line">   <span class="keyword">public</span> static void main(String[] var0) &#123;</span><br><span class="line">      main();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">public</span> static <span class="keyword">final</span> Object fetchUserData(<span class="meta">@NotNull</span> Continuation $completion) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;user_name&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">public</span> static <span class="keyword">final</span> Object cacheUserData(<span class="meta">@NotNull</span> String user, <span class="meta">@NotNull</span> Continuation $completion) &#123;</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">public</span> static <span class="keyword">final</span> String updateTextView(<span class="meta">@NotNull</span> String user) &#123;</span><br><span class="line">      Intrinsics.checkNotNullParameter(user, <span class="string">&quot;user&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>코드의 <em>64번째 라인</em>을 보면 <code>fetchUserData(…)</code>와 <code>cacheUserData(…)</code>와 같이 suspend function이었던 함수들이 일반 함수로 변경되고 마지막 매개변수로 Continuation이 들어간 것을 확인할 수 있다.</p></li><li><p>일시 중단과 재개를 위해서 suspention point를 label로 표시해두는 <strong>Labeling</strong> 작업이 Decompile되어 <em>11번째 라인</em>과 같이 <code>switch-case</code>문이 생성된 것을 확인할 수 있다.</p><ul><li>케이스가 3개 생성되었는데 첫 번째 케이스에서 <code>fetchUserData(…)</code>를 호출하면서 <strong>Continuation</strong> 객체가 넘어가는 것을 확인할 수 있다.</li><li>위의 자료에서 설명했던 부분과는 다른 부분이 존재하지만, 요지는 <code>switch-case</code> 형태로 Decompile되면서 다시 재개될 수 있는 형태로 만들어지고 <strong>Continuation</strong> 객체가 전달되고 있는 것을 확인할 수 있다는 것이다.</li><li>아래 이미지처럼 <em>15번째 라인</em>과 <em>34번째 라인</em>에서 함수의 마지막 매개변수로 Continuation 객체가 <code>this</code>로 전달되고 있다.</li></ul></li></ol><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/120595224-004e0000-c47d-11eb-8e2c-3f965f4c09ed.png'></p><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/120595278-10fe7600-c47d-11eb-8ffc-cbcb1437b475.png'></p><h2 id="cps-simulation-해보기"><a class="markdownIt-Anchor" href="#cps-simulation-해보기"></a> CPS simulation 해보기</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    GlobalScope.launch &#123;</span><br><span class="line">↛       <span class="keyword">val</span> userData = fetchUserData()</span><br><span class="line">↛       <span class="keyword">val</span> userCache = cacheUserData(userData)</span><br><span class="line">        updateTextView(userCache)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;[in] main&quot;</span>)</span><br><span class="line">    myCoroutine(MyContinuation())</span><br><span class="line">    println(<span class="string">&quot;\n[out] main&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">myCoroutine</span><span class="params">(cont: <span class="type">MyContinuation</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span>(cont.label) &#123;</span><br><span class="line">        <span class="number">0</span> -&gt; &#123;</span><br><span class="line">            println(<span class="string">&quot;\nmyCoroutine(), label: <span class="subst">$&#123;cont.label&#125;</span>&quot;</span>)</span><br><span class="line">            cont.label = <span class="number">1</span></span><br><span class="line">            fetchUserData(cont)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">1</span> -&gt; &#123;</span><br><span class="line">            println(<span class="string">&quot;\nmyCoroutine(), label: <span class="subst">$&#123;cont.label&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> userData = cont.result</span><br><span class="line">            cont.label = <span class="number">2</span></span><br><span class="line">            cacheUserData(userData, cont)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">2</span> -&gt; &#123;</span><br><span class="line">            println(<span class="string">&quot;\nmyCoroutine(), label: <span class="subst">$&#123;cont.label&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> userCache = cont.result</span><br><span class="line">            updateTextView(userCache)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fetchUserData</span><span class="params">(cont: <span class="type">MyContinuation</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;fetchUserData(), called&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> result = <span class="string">&quot;[서버에서 받은 사용자 정보]&quot;</span></span><br><span class="line">    println(<span class="string">&quot;fetchUserData(), 작업완료: <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">    cont.resumeWith(Result.success(result))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">cacheUserData</span><span class="params">(user: <span class="type">String</span>, cont: <span class="type">MyContinuation</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;cacheUserData(), called&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> result = <span class="string">&quot;[캐쉬함 <span class="variable">$user</span>]&quot;</span></span><br><span class="line">    println(<span class="string">&quot;cacheUserData(), 작업완료: <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">    cont.resumeWith(Result.success(result))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">updateTextView</span><span class="params">(user: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;updateTextView(), called&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;updateTextView(), 작업완료: [텍스트 뷰에 출력 <span class="variable">$user</span>]&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyContinuation</span></span>(<span class="keyword">override</span> <span class="keyword">val</span> context: CoroutineContext = EmptyCoroutineContext)</span><br><span class="line">    : Continuation&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> label = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result.getOrThrow()</span><br><span class="line">        println(<span class="string">&quot;Continuation.resumeWith()&quot;</span>)</span><br><span class="line">        myCoroutine(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[in] main</span><br><span class="line"></span><br><span class="line">myCoroutine(), label: 0</span><br><span class="line">fetchUserData(), called</span><br><span class="line">fetchUserData(), 작업완료: [서버에서 받은 사용자 정보]</span><br><span class="line">Continuation.resumeWith()</span><br><span class="line"></span><br><span class="line">myCoroutine(), label: 1</span><br><span class="line">cacheUserData(), called</span><br><span class="line">cacheUserData(), 작업완료: [캐쉬함 [서버에서 받은 사용자 정보]]</span><br><span class="line">Continuation.resumeWith()</span><br><span class="line"></span><br><span class="line">myCoroutine(), label: 2</span><br><span class="line">updateTextView(), called</span><br><span class="line">updateTextView(), 작업완료: [텍스트 뷰에 출력 [캐쉬함 [서버에서 받은 사용자 정보]]]</span><br><span class="line"></span><br><span class="line">[out] main</span><br></pre></td></tr></table></figure><h2 id="정리"><a class="markdownIt-Anchor" href="#정리"></a> 정리</h2><ul><li>There is no magic<ul><li>CPS<small>Continuation Passing Style</small> == Callbacks</li><li>CPS Transformation</li></ul></li><li>Decompile<ul><li>Labels</li><li>Callback</li></ul></li><li>CPS simulation<ul><li>debugging</li></ul></li></ul><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><ul><li><a href="https://youtu.be/DOXyH1RtMC0">새차원, 코틀틴 코루틴</a></li><li><a href="https://www.youtube.com/watch?v=YrrUCSi72E8&amp;t=110s">KotlinConf 2017 - Deep Dive into Coroutines on JVM by Roman Elizarov</a></li></ul>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/categories/Kotlin/Coroutine/">Coroutine</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Coroutine/">Coroutine</category>
      
      
      <comments>http://june0122.github.io/2021/06/09/coroutines-under-the-hood/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] CustomView &amp; Touch Event</title>
      <link>http://june0122.github.io/2021/06/07/android-bnr-30/</link>
      <guid>http://june0122.github.io/2021/06/07/android-bnr-30/</guid>
      <pubDate>Sun, 06 Jun 2021 17:09:18 GMT</pubDate>
      
      <description>안드로이드는 뛰어난 기능의 표준 뷰와 위젯을 많이 제공한다. 그러나 때로는 앱 특유의 비주얼을 보여주는 &lt;b&gt;커스텀&lt;small&gt;(custom)&lt;/small&gt; 뷰&lt;/b&gt;가 필요하다. 커스텀 뷰를 생성하려면 다음의 세 단계를 거친다.&lt;br&gt;&amp;emsp;➀ 슈퍼 클래스를 선택한다. 단순 커스텀 뷰에선 &lt;b&gt;View&lt;/b&gt;, 복합 커스텀 뷰에선 &lt;b&gt;FrameLayout&lt;/b&gt;과 같이 적합한 레이아웃 클래스를 선택한다.&lt;br&gt;&amp;emsp;➁ 1번에서 선택한 슈퍼 클래스의 서브 클래스를 만들고, 해당 슈퍼 클래스의 생성자를 오버라이드한다.&lt;br&gt;&amp;emsp;➂ 슈퍼 클래스의 주요 함수들을 오버라이드해 커스터마이징한다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="커스텀-뷰-생성하기"><a class="markdownIt-Anchor" href="#커스텀-뷰-생성하기"></a> 커스텀 뷰 생성하기</h2><p>안드로이드는 뛰어난 기능의 표준 뷰와 위젯을 많이 제공한다. 그러나 때로는 앱 특유의 비주얼을 보여주는 커스텀<small>(custom)</small> 뷰가 필요하다.</p><p>커스텀 뷰에는 여러 종류가 있지만 크게 두 가지 유형으로 분류할 수 있다.</p><ul><li><b>단순<small>(simple)</small></b> : 단순 뷰는 내부적으로 복잡할 수 있지만, 자식 뷰가 없어서 구조가 간단하다. 대부분 커스텀 렌더링을 수행한다.</li><li><b>복합<small>(composite)</small></b> : 복합 뷰는 서로 다른 뷰 객체들로 구성된다. 일반적으로 복합 뷰는 자식 뷰들을 관리하지만, 자신은 커스텀 렌더링을 하지 않는다. 대신에 렌더링은 각 자식 뷰에게 위임한다.</li></ul><p>커스텀 뷰를 생성하려면 다음의 세 단계를 거친다.</p><ol><li>슈퍼 클래스를 선택한다. 단순 커스텀 뷰에서 View는 비어 있는 캔버스와 같아서 가장 많이 사용된다. 복합 커스텀 뷰에서는 FrameLayout과 같이 적합한 레이아웃 클래스를 선택한다.</li><li>1번에서 선택한 슈퍼 클래스의 서브 클래스를 만들고, 해당 슈퍼 클래스의 생성자를 오버라이드한다.</li><li>슈퍼 클래스의 주요 함수들을 오버라이드해 커스터마이징한다.</li></ol><h3 id="boxdrawingview-생성하기"><a class="markdownIt-Anchor" href="#boxdrawingview-생성하기"></a> BoxDrawingView 생성하기</h3><p><strong>BoxDrawingView</strong>는 단순 뷰이면서 <b>View</b>의 직계 서브 클래스가 된다.</p><p>BoxDrawingView라는 이름의 새로운 클래스를 생성하고 <strong>View</strong>를 슈퍼 클래스로 지정한다. 그리고 BoxDrawingView.kt에서 아래 코드와 같이 생성사를 추가한다. 이 생성자는 Context 객체 및 null이 가능하면서 기본값이 null인 <strong>AttributeSet</strong> 객체를 인자로 받는다.</p><blockquote><p>BoxDrawingView의 초기 구현 (BoxDrawingView.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxDrawingView</span></span>(context: Context, attrs: AttributeSet? = <span class="literal">null</span>) : View(context, attrs) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이처럼 <strong>AttributeSet</strong>에 기본값을 지정하면, 실제로는 <strong>두 개의 생성자가 제공</strong>된다. 우리 뷰의 인스턴스가 <em>➀ 코드</em> 또는 <em>➁ 레이아웃 XML 파일</em>로부터 생성될 수 있어야 하기 때문이다. 레이아웃 파일로부터 인스턴스가 생성되어 초기화되는 뷰는 XML에 지정된 속성들을 포함하는 <strong>AttributeSet</strong>의 인스턴스를 인자로 받는다.</p><p>그다음으로 BoxDrawingView를 사용하도록 <em>res/layout/activity_drag_and_drawing.xml</em> 레이아웃 파일을 변경한다.</p><blockquote><p>BoxDrawingView를 레이아웃에 추가하기 (res/layout/activity_drag_and_drawing.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.june0122.draganddraw.BoxDrawingView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>여기서는 레이아웃 인플레이터가 찾을 수 있게 BoxDrawingView 클래스가 속한 패키지의 전체 경로를 지정해야 한다. 인플레이터는 View 인스턴스를 생성하는 데 필요한 레이아웃 파일을 찾는다. 이때 요소로 지정된 클래스 이름에 전체 패키지 경로가 지정되지 않으면 인플레이터가 android.view와 android.widget 패키지에서 해당 이름의 클래스를 찾는다. 따라서 해당 클래스가 다른 곳에 있다면 레이아웃 인플레이터는 그것을 찾지 못하고 앱은 실행이 중단된다. 그러므로 <strong>android.view와 android.widget 패키지 외부에 있는 커스텀 클래스나 이외의 다른 클래스들에서는 반드시 전체 패키지 경로가 포함된 클래스 이름을 지정해야 한다.</strong></p><h2 id="터치-이벤트-처리하기"><a class="markdownIt-Anchor" href="#터치-이벤트-처리하기"></a> 터치 이벤트 처리하기</h2><p>터치 이벤트를 리스닝할 때는 다음의 <strong>View</strong> 함수를 사용해서 터치 이벤트 리스너를 설정한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setOnTouchListener</span><span class="params">(l: <span class="type">View</span>.<span class="type">OnTouchListener</span>)</span></span></span><br></pre></td></tr></table></figure><p>이 함수는 <code>setOnClickListener(View.OnClickListener)</code>와 같은 방법으로 작동한다. 즉, 함수의 인자로 <code>View.OnClickListener</code>를 구현한 리스너 객체<small>(여기서는 View의 서브 클래스인 BoxDrawingView 인스턴스)</small>를 전달하면 터치 이벤트가 발생할 때마다 이 객체에 구현된 <code>onTouchEvent(…)</code> 함수가 호출된다.</p><p>따라서 BoxDrawingView에서는 다음 View 함수를 오버라이드하면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(evenet: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span></span><br></pre></td></tr></table></figure><p>이 함수는 <strong>MotionEvent</strong> 인스턴스를 인자로 받는다. <strong>MotionEvent</strong>는 터치 이벤트를 나타내는 클래스이며, 화면을 터치한 위치와 <b>액션<small>(action)</small></b>을 포함한다. 액션은 다음과 같이 이벤트 발생 단계를 나타낸다.</p><table><thead><tr><th style="text-align:center">액션 상수</th><th style="text-align:center">의미</th></tr></thead><tbody><tr><td style="text-align:center">ACTION_DOWN</td><td style="text-align:center">사용자가 화면을 손가락으로 터치함</td></tr><tr><td style="text-align:center">ACTION_MOVE</td><td style="text-align:center">사용자가 화면 위에서 손가락을 움직임</td></tr><tr><td style="text-align:center">ACTION_UP</td><td style="text-align:center">사용자가 화면에서 손가락을 뗌</td></tr><tr><td style="text-align:center">ACTION_CANCEL</td><td style="text-align:center">부모 뷰가 터치 이벤트를 가로챔</td></tr></tbody></table><p><code>onTouchEvent(MotionEvent)</code>의 구현 코드에서는 <strong>MotionEvent</strong> 객체의 다음 함수를 호출해 액션의 값을 확인할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAction</span><span class="params">()</span></span>: <span class="built_in">Int</span></span><br></pre></td></tr></table></figure><p>BoxDrawingView.kt에 아래 코드를 추가하자. 여기서는 이벤트가 제대로 처리되는지 로그캣에서 확인하기 위해 로그 태그 상수와 네 개의 각 액션에 대해 로그 메시지를 출력하는 <code>onTouchEvent(MotionEvent)</code>의 구현 코드도 추가한다.</p><blockquote><p>BoxDrawingView 구현하기 (BoxDrawingView.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">&quot;BoxDrawingView&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxDrawingView</span></span>(context: Context, attrs: AttributeSet? = <span class="literal">null</span>) : View(context, attrs) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> current = PointF(event.x, event.y)</span><br><span class="line">        <span class="keyword">var</span> action = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">when</span> (event.action) &#123;</span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class="line">                action = <span class="string">&quot;ACTION_DOWN&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            MotionEvent.ACTION_MOVE -&gt; &#123;</span><br><span class="line">                action = <span class="string">&quot;ACTION_MOVE&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            MotionEvent.ACTION_UP -&gt; &#123;</span><br><span class="line">                action = <span class="string">&quot;ACTION_UP&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            MotionEvent.ACTION_CANCEL -&gt; &#123;</span><br><span class="line">                action = <span class="string">&quot;ACTION_CANCEL&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;<span class="variable">$action</span> at x=<span class="subst">$&#123;current.x&#125;</span>, y=<span class="subst">$&#123;current.y&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 터치된 위치를 나타내는 X와 Y 좌표를 <strong>PointF</strong> 객체에 넣는다. 이 장의 나머지 코드에서 두 값을 같이 사용해야 하기 때문이다. <strong>PointF</strong>는 이런 역할을 하는 <strong>안드로이드의 컨테이너 클래스</strong>다.</p><p><em>Logcat</em> 창의 검색 상자에 <strong>I/BoxDrawingView</strong>를 입력하고 앱을 실행하여 화면을 터치하고 끌어보는 등 상호 작용을 하면 BoxDrawingView가 받는 모든 터치 액션의 X, Y 좌표가 로그에 실시간으로 출력된다.</p><blockquote><p>앱 화면과 상호 작용을 했을 때 로그에 나타나는 X, Y 좌표값들</p></blockquote><p align = 'center'><img width = '800' src = 'https://user-images.githubusercontent.com/39554623/120932086-619cfa00-c72f-11eb-812b-f8d462797b5e.png'></p><h3 id="모션-이벤트-추적하기"><a class="markdownIt-Anchor" href="#모션-이벤트-추적하기"></a> 모션 이벤트 추적하기</h3><p>BoxDrawingView에서는 좌표만 로깅하는 게 아니라 화면에 박스들도 그릴 것이다. 이렇게 하려면 몇 가지 해결할 것이 있다.</p><p>우선 박스를 정의하기 위해 시작 지점<small>(손가락이 처음 놓인 곳)</small>과 현재 지점<small>(손가락이 현재 있는 곳)</small>이 반드시 필요하다.</p><p>그다음에 박스를 정의하려면 하나 이상의 MotionEvent로부터 발생하는 데이터를 추적해야하며, 이 데이터를 Box 객체에 저장해야 한다.</p><p>하나의 박스를 정의하는 데이터를 나타내는 <strong>Box</strong> 클래스를 생성해 아래의 코드를 추가한다.</p><blockquote><p>Box 클래스 추가하기 (Box.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span>(<span class="keyword">val</span> start: PointF) &#123;</span><br><span class="line">    <span class="keyword">var</span> end: PointF = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> left: <span class="built_in">Float</span></span><br><span class="line">        <span class="keyword">get</span>() = min(start.x, end.x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> right: <span class="built_in">Float</span></span><br><span class="line">        <span class="keyword">get</span>() = max(start.x, end.x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> top: <span class="built_in">Float</span></span><br><span class="line">        <span class="keyword">get</span>() = min(start.y, end.y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> bottom: <span class="built_in">Float</span></span><br><span class="line">        <span class="keyword">get</span>() = max(start.y, end.y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용자가 BoxDrawingView를 터치하면 새로운 Box 객체가 생성되어 기존 박스 List에 추가되도록 하자.</p><p>사용자가 그리는 상태 정보를 추적하기 위해 BoxDrawingView 클래스에 새로운 Box 객체를 사용하는 코드를 추가한다.</p><blockquote><p>Box 객체를 사용하는 코드 추가하기 (BoxDrawingView.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxDrawingView</span></span>(context: Context, attrs: AttributeSet? = <span class="literal">null</span>) : View(context, attrs) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> currentBox: Box? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> boxen = mutableListOf&lt;Box&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> current = PointF(event.x, event.y)</span><br><span class="line">        <span class="keyword">var</span> action = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">when</span> (event.action) &#123;</span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; &#123;</span><br><span class="line">                action = <span class="string">&quot;ACTION_DOWN&quot;</span></span><br><span class="line">                <span class="comment">// 그리기 상태를 재설정한다</span></span><br><span class="line">                currentBox = Box(current).also &#123; boxen.add(it) &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            MotionEvent.ACTION_MOVE -&gt; &#123;</span><br><span class="line">                action = <span class="string">&quot;ACTION_MOVE&quot;</span></span><br><span class="line">                updateCurrentBox(current)</span><br><span class="line">            &#125;</span><br><span class="line">            MotionEvent.ACTION_UP -&gt; &#123;</span><br><span class="line">                action = <span class="string">&quot;ACTION_UP&quot;</span></span><br><span class="line">                updateCurrentBox(current)</span><br><span class="line">                currentBox = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">            MotionEvent.ACTION_CANCEL -&gt; &#123;</span><br><span class="line">                action = <span class="string">&quot;ACTION_CANCEL&quot;</span></span><br><span class="line">                currentBox = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;<span class="variable">$action</span> at x=<span class="subst">$&#123;current.x&#125;</span>, y=<span class="subst">$&#123;current.y&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateCurrentBox</span><span class="params">(current: <span class="type">PointF</span>)</span></span> &#123;</span><br><span class="line">        currentBox?.let &#123;</span><br><span class="line">            it.end = current</span><br><span class="line">            invalidate()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 <em>ACTION_DOWN</em> 모션 이벤트를 받을 때마다 <em>currentBox</em> 속성을 새로운 Box 객체로 설정한다. 이 객체는 이벤트가 발생한 위치를 시작 지점으로 가지며 박스 List에 저장된다<small>(본문의 뒤에서 그리기를 구현할 때 BoxDrawingView에서 이 박스 List에 저장된 모든 Box를 화면에 그린다)</small>.</p><p>사용자의 손가락이 화면을 이동하거나 화면에서 떨어지면 <em>currentBox.end</em>를 변경한다. 그리고 터치가 취소되거나 사용자의 손가락이 화면에서 떨어지면 그리기를 끝내기 위해 <em>currentBox</em>를 null로 변경한다. 즉, Box 객체는 List에 안전하게 저장되지만, 모션 이벤트에 관해서는 더 이상 변경이 생기지 않는다.</p><p><code>updateCurrentBox()</code> 함수에서 <code>invalidate()</code>를 호출한다. <code>invalidate()</code> 함수를 호출하면 뷰가 <b>무효<small>(invalid)</small></b>라는 것을 안드로이드에게 알려주므로 안드로이드 시스템이 해당 뷰의 변경 사항을 반영해서 다시 그려준다. 여기서는 사용자가 손가락을 움직여서 새로운 박스를 생성하거나 박스 크기를 조정할 때마다 <code>invalidate()</code> 함수를 호출해 BoxDrawingView를 다시 그리게 한다. 이렇게 하면 사용자가 손가락을 끌어서 박스를 생성하는 동안 어떤 모습인지 볼 수 있다.</p><p>참고로 앱이 시작되면 앱의 모든 뷰가 <strong>무효</strong> 상태가 되어 뷰들이 화면에 어떤 것도 그릴 수 없게 된다. 이런 상황을 해결하기 위해 안드로이드는 최상위 수준 <strong>View</strong>의 <code>draw()</code> 함수를 호출함으로써 부모 뷰가 자신을 그리게 되고, 이것의 자식 뷰들 또한 자신들을 그리게 된다. 뷰 계층을 따라 내려가면서 자식 뷰들의 또 다른 자식 뷰들도 자신들을 그리게 되는 식이다. 결국 뷰 계층의 모든 뷰가 자신을 그리게 되면 최상위 수준 <strong>View</strong>는 더 이상 무효 상태가 되지 않는다.</p><p>다음으로 박스를 화면에 그려보자.</p><h2 id="ondrawcanvas-내부에서-렌더링하기"><a class="markdownIt-Anchor" href="#ondrawcanvas-내부에서-렌더링하기"></a> <code>onDraw(Canvas)</code> 내부에서 렌더링하기</h2><p>뷰가 화면에 그려지게 하려면 다음 View 함수를 오버라이드해야 한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span></span><br></pre></td></tr></table></figure><p><code>onTouchEvent(MotionEvent)</code>의 <em>ACTION_MOVE</em>에 대한 응답에서 호출한 <code>invalidate()</code> 함수는 BoxDrawingView를 다시 무효 상태로 만든다. 그럼으로써 BoxDrawingView는 자신을 다시 그리게 되고 이때 <code>onDraw(Canvas)</code>가 다시 호출된다.</p><p>이제는 <strong>Canvas</strong> 매개변수에 대해 알아보자. <strong>Canvas</strong>와 <strong>Paint</strong> 모두 안드로이드의 주요 그리기 클래스다.</p><ul><li><strong>Canvas</strong> 클래스는 모든 그리기 함수를 갖고 있다. 우리가 호출하는 Canvas의 함수들은 그리는 위치와 선, 원, 단어, 사각형 등의 형태를 결정한다.</li><li><strong>Paint</strong> 클래스는 이런 함수들이 어떻게 수행되는지를 결정한다. 즉, 우리가 호출하는 Paint의 함수들은 도형이 채워져야 하는지, 어떤 폰트의 텍스트를 그리는지, 어떤 색의 선인지와 같은 특성을 지정한다.</li></ul><p>BoxDrawingView 인스턴스가 초기화될 때 두 개의 Paint 객체를 생성하도록 BoxDrawingView.kt를 변경한다.</p><blockquote><p>Paint 객체 생성하기 (BoxDrawingView.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxDrawingView</span></span>(context: Context, attrs: AttributeSet? = <span class="literal">null</span>) : View(context, attrs) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> currentBox: Box? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> boxen = mutableListOf&lt;Box&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> boxPaint = Paint().apply &#123;</span><br><span class="line">        color = <span class="number">0x22ff0000</span>.toInt()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> backgroundPaint = Paint().apply &#123;</span><br><span class="line">        color = <span class="number">0xfff8efe0</span>.toInt()</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제는 화면에 박스를 그릴 수 있다.</p><blockquote><p><code>onDraw(Canvas)</code> 오버라이드 하기 (BoxDrawingView.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoxDrawingView</span></span>(context: Context, attrs: AttributeSet? = <span class="literal">null</span>) : View(context, attrs) &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 배경을 채운다</span></span><br><span class="line">        canvas.drawPaint(backgroundPaint)</span><br><span class="line">        </span><br><span class="line">        boxen.forEach &#123; box -&gt; </span><br><span class="line">            canvas.drawRect(box.left, box.top, box.right, box.bottom, boxPaint)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>황백색 배경의 Paint를 사용해서 박스의 배경인 캔버스를 채운다. 그다음에 박스 List에 저장된 각 Box 객체에 대해 박스의 두 점을 조사해 직사각형의 왼쪽, 오른쪽, 위, 아래의 꼭지점 위치를 결정한다. 왼쪽과 위의 값은 X와 Y의 최솟값이, 아래쪽과 오른쪽은 최댓값이 된다.</p><p>이 값들을 산출한 후 <code>Canvas.drawRect(…)</code>를 호출해 화면에 빨간색의 사각형을 그린다.</p><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120933267-48e31300-c734-11eb-909a-f00498e631cc.gif'></p><h2 id="궁금증-해소-️-gesturedetector"><a class="markdownIt-Anchor" href="#궁금증-해소-️-gesturedetector"></a> 궁금증 해소 💁🏻‍♂️ : GestureDetector</h2><p>터치 이벤트를 처리하는 또 다른 방법으로 <strong>GestureDetector</strong> 객체가 있다. GestureDetector는 특정 이벤트가 발생하면 알려주는 리스너를 갖고 있다. 예를 들어, <code>GestureDetector.OnGestureListener</code>는 화면을 길게 누르거나 밀거나 스크롤하는 등의 이벤트를 리스닝하는 함수들을 갖고 있다. 그리고 두 번 두드림 이벤트를 리스닝하는 <code>GestureDetector.OnDoubleTapListener</code>도 있다. 대부분은 View의 <code>onTouch(…)</code>나 <code>onTouchEvent(…)</code> 함수를 오버라이드해서 사용하는 다양한 이벤트 처리가 필요하지 않다. 따라서 이러한 함수 대신 GestureDetector를 사용하는 것도 아주 좋은 방법이다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Android/">Android</category>
      
      <category domain="http://june0122.github.io/categories/Android/Guide/">Guide</category>
      
      
      <category domain="http://june0122.github.io/tags/Android/">Android</category>
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/CustomView/">CustomView</category>
      
      <category domain="http://june0122.github.io/tags/TouchEvent/">TouchEvent</category>
      
      
      <comments>http://june0122.github.io/2021/06/07/android-bnr-30/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 단위 테스트와 오디오 재생</title>
      <link>http://june0122.github.io/2021/06/06/android-bnr-20/</link>
      <guid>http://june0122.github.io/2021/06/06/android-bnr-20/</guid>
      <pubDate>Sun, 06 Jun 2021 05:28:37 GMT</pubDate>
      
      <description>&lt;b&gt;단위 테스트&lt;small&gt;(unit testing)&lt;/small&gt;&lt;/b&gt;는 하나의 컴포넌트&lt;small&gt;(주로 클래스)&lt;/small&gt; 자체를 테스트하는 것이므로 작성할 수 있는 가장 작은 종류의 테스트다. 그리고 테스트를 실행하고자 전체 앱이나 장치를 사용할 필요가 없으며, 테스트를 여러 번 실행해도 충분할 만큼 빠르게 실행된다. 따라서 하나의 컴포넌트르 테스트할 때 장치 테스트로 실행하는 경우는 거의 없다. 단위 테스트는 안드로이드 런타임이 아닌 &lt;b&gt;로컬 컴퓨터의 JVM&lt;small&gt;(Java Virtual Machine)&lt;/small&gt;에서 실행되므로 빠르게 이루어진다.&lt;/b&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>MVVM 아키텍처가 매력적인 이유 중 하나는 <b>단위 테스트<small>(unit testing)</small></b>가 쉽기 때문이다. 단위 테스트는 앱의 각 단위가 제대로 작동하는지 검사하는 작은 프로그램들을 작성하는 것이다.</p><p>본문에서는 단위 테스트 및 안드로이드 오디오 API를 쉽게 사용하도록 해주는 도구인 <strong>SoundPool</strong> 클래스를 사용한다. <strong>SoundPool</strong> 클래스는 많은 음원 파일을 메모리로 로드할 수 있으며, 재생하려는 음원의 최대 개수를 언제든 제어할 수 있다. 따라서 사용자가 앱의 모든 버튼을 동시에 마구잡이로 누르더라도 앱의 실행이나 장치에는 영향을 주지 않는다.</p><h2 id="soundpool-생성하기"><a class="markdownIt-Anchor" href="#soundpool-생성하기"></a> SoundPool 생성하기</h2><p>먼저 BeatBox 클래스 내부에 음원 재생 기능을 추가한다. 우선 SoundPool 객체를 생성하는 코드를 작성하자.</p><blockquote><p>SoundPool 생성하기 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">&quot;BeatBox&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> SOUNDS_FOLDER = <span class="string">&quot;sample_sounds&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MAX_SOUNDS = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> assets: AssetManager) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sounds: List&lt;Sound&gt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> soundPool = SoundPool.Builder()</span><br><span class="line">        .setMaxStreams(MAX_SOUNDS)</span><br><span class="line">        .build()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        sounds = loadSounds()</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SoundPool 인스턴스를 생성할 때는 SoundPool.Builder 클래스의 <code>build()</code> 함수를 사용한다. 따라서 여기서는 <strong>SoundPool.Builder</strong> 인스턴스를 생성한 후 <code>build()</code>를 호출한다.</p><p><code>setMaxStreams(Int)</code> 함수에서는 현재 시점에 재생할 음원의 최대 개수를 인자로 전달하여 지정할 수 있다. 코드에서는 5를 전달하는데, 따라서 다섯 개의 음원이 재생 중일 때 여섯 번째 음원을 재생하려고 하면 SoundPool이 가장 오래된 음원의 재생을 중단한다.</p><p>또한, <code>setAudioAttributes(AudioAttributes)</code>를 사용하면 오디오 스티름의 다른 속성들을 지정할 수 있다. 자세한 내용은 <a href="https://developer.android.com/reference/android/media/AudioAttributes">안드로이드 문서</a>에서!</p><h2 id="에셋-사용하기"><a class="markdownIt-Anchor" href="#에셋-사용하기"></a> 에셋 사용하기</h2><p>현재 음원 파일들은 앱의 애셋으로 저장되어 잇는데, 이 파일들을 사용해서 오디오를 재생하기에 앞서 애셋의 작동 원리를 알아보자.</p><p>Sound 객체는 애셋 파일 경로를 갖고 있다. 그런데 애셋 파일 경로의 파일을 열 때는 File 클래스를 사용할 수 없고 반드시 <strong>AssetManager</strong>를 사용해야 한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> assetPath = sound.assetPath</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> assetManager = context.assets</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> soundData = assetManager.<span class="keyword">open</span>(assetPath)</span><br></pre></td></tr></table></figure><p>이렇게 하면 코틀린의 다른 <strong>InputStream</strong>을 사용할 때처럼 표준 <strong>InputStream</strong>이 반환된다.</p><p>경우에 따라서는 <strong>InputStream</strong> 대신 <strong>FileDescriptor</strong>가 필요할 수 있다. <strong>SoundPool</strong>을 사용할 때가 그렇다. 이때는 <code>AssetManager.openFd(String)</code>을 호출하면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> assetPath = sound.assetPath</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> assetManager = context.assets</span><br><span class="line"></span><br><span class="line"><span class="comment">// AssetFileDescriptor는 FileDescriptor와 다르다</span></span><br><span class="line"><span class="keyword">val</span> assetFileDescriptor = assetManager.openFd(assetPath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// … 그러나 필요하다면 다음과 같이 쉽게 보통의 FileDescriptor를 얻을 수 있다</span></span><br><span class="line"><span class="keyword">val</span> fileDescriptor = assetFileDescriptor.fileDescriptor</span><br></pre></td></tr></table></figure><h2 id="음원-로드하기"><a class="markdownIt-Anchor" href="#음원-로드하기"></a> 음원 로드하기</h2><p>SoundPool에 음원을 로드하는 것이 다음으로 할 일이다. 오디오를 재생하는 다른 방법과 달리 SoundPool을 사용하면 응답이 빠르다. 따라서 음원 재생을 요청하면 즉시 재생이 시작된다.</p><p>단, 재생에 앞서 SoundPool로 음원을 로드해야 한다. 이때 로드할 각 음원은 자신의 정수 ID를 갖는다. 이 ID를 유지하기 위한 <em>soundId</em> 속성을 Sound 클래스에 추가한다.</p><blockquote><p><em>soundId</em> 속성 추가하기 (Sound.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sound</span></span>(<span class="keyword">val</span> assetPath: String, <span class="keyword">var</span> soundId: <span class="built_in">Int</span>? = <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> name = assetPath.split(<span class="string">&quot;/&quot;</span>).last().removeSuffix(WAV)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 <em>soundId</em> 속성을 null이 가능한 Int? 타입으로 지정하였다. <em>soundId</em>에 null 값을 지정하여 Sound의 ID 값이 없음을 알려줄 수 있기 때문이다.</p><p>다음으로는 음원을 로드한다. SoundPool에 Sound 인스턴스를 로드하기 위해 BeatBox 클래스에 <code>load(Sound)</code> 함수를 추가한다.</p><blockquote><p>SoundPool에 음원 로드하기 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> assets: AssetManager) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadSounds</span><span class="params">()</span></span>: List&lt;Sound&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">load</span><span class="params">(sound: <span class="type">Sound</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> afd: AssetFileDescriptor = assets.openFd(sound.assetPath)</span><br><span class="line">        <span class="keyword">val</span> soundId = soundPool.load(afd, <span class="number">1</span>)</span><br><span class="line">        sound.soundId = soundId</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 <code>soundPool.load(AssetFileDescriptor, Int)</code> 함수를 호출해 나중에 재생할 음원 파일을 SoundPool에 로드한다. 이 함수에서는 정수 ID를 반환하는데, 음원을 유지하고 다시 재생<small>(또는 언로드)</small>하기 위해서다. 그리고 이 값을 앞에서 정의했던 <em>soundId</em> 속성에 저장한다.</p><p><code>openFd(String)</code>에서는 IOException을 발생시킬 수 있으므로 <code>load(Sound)</code>도 IOException을 발생시킬 수 있다. 따라서 <code>load(Sound)</code>가 호출될 때는 항상 IOException을 처리해야 한다.</p><p>다음으로 <code>load(Sound)</code>를 호출해 모든 음원을 로드하는 코드를 <code>BeatBox.loadSounds()</code> 함수 내부에 추가한다.</p><blockquote><p>모든 음원을 로드하기 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadSounds</span><span class="params">()</span></span>: List&lt;Sound&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">val</span> sounds = mutableListOf&lt;Sound&gt;()</span><br><span class="line">    soundNames.forEach &#123; fileName -&gt;</span><br><span class="line">        <span class="keyword">val</span> assetPath = <span class="string">&quot;<span class="variable">$SOUNDS_FOLDER</span>/<span class="variable">$fileName</span>&quot;</span></span><br><span class="line">        <span class="keyword">val</span> sound = Sound(assetPath)</span><br><span class="line">        <span class="comment">//  sounds.add(sound)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            load(sound)</span><br><span class="line">            sounds.add(sound)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ioe: IOException) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Could not load sound <span class="variable">$fileName</span>&quot;</span>, ioe)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sounds</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeatBox 앱을 실행해 에러 없이 모든 음원이 로드되는지 확인해본다. 만일 정상적으로 로드되지 않으면 로그캣 창에 붉은색의 예외 메시지가 나타난다<small>(아직 음원은 재생되지 않으며 화면에도 아무 변화가 없다)</small>.</p><h2 id="음원-재생하기"><a class="markdownIt-Anchor" href="#음원-재생하기"></a> 음원 재생하기</h2><p>BeatBox 앱에서 음원 재생이 되어야 하니 음원을 재생하는 <code>play(Sound)</code> 함수를 BeatBox 클래스에 추가한다.</p><blockquote><p>음원 재생하기 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> assets: AssetManager) &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        sounds = loadSounds()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">play</span><span class="params">(sound: <span class="type">Sound</span>)</span></span> &#123;</span><br><span class="line">        sound.soundId?.let &#123; </span><br><span class="line">            soundPool.play(it, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1.0f</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>play(Sound)</code> 함수는 음원을 재생하기 전에 해당 음원의 <em>soundId</em>가 null이 아닌지 확인한다. 만일 음원 로드에 실패하면 null이 될 수 있다.</p><p>일단 null 값이 아니라고 확인되면 <code>SoundPool.play(Int, Float, Float, Int, Int, Float)</code>를 호출해 음원을 재생한다. 매개 변수들의 내역은 다음과 같다. 음원 ID, 왼쪽 볼륨<small>(0.0 ~ 1.0)</small>, 오른쪽 볼륨, 스트림 우선순위<small>(0이면 최저 우선순위)</small>, 반복 재생 여부<small>(0이면 반복 안함, -1이면 무한 반복, 그 외의 숫자는 반복 횟수)</small>, 재생률<small>(1이면 녹음된 속도 그대로, 2는 두 배 빠르게 재생, 0.5는 절반 느리게 재생)</small>이다.</p><p>이제는 음원 재생을 <strong>SoundViewModel</strong>에 통합할 준비가 되었다. 그 전에 테스트에 실패하도록 단위 테스트를 작성한 후 문제점을 해결하자!</p><h2 id="테스트-라이브러리-의존성-추가하기"><a class="markdownIt-Anchor" href="#테스트-라이브러리-의존성-추가하기"></a> 테스트 라이브러리 의존성 추가하기</h2><p>테스트 코드를 작성하기 전에 테스팅 도구인 <strong>Mockito</strong>와 <strong>Hamcrest</strong>를 추가한다.</p><p><strong>Mockito</strong>는 간단한 <b>모의 객체<small>(mock object)</small></b>를 쉽게 생성해주는 프레임워크다. 모의 객체는 테스트를 독립적으로 할 수 있게 도와주므로, 잘못해서 동시에 다른 객체를 테스트하지 않게 해준다.</p><p><strong>Hamcrest</strong>는 <strong>matcher</strong> 라이브러리다. Matcher는 코드에 ‘일치(match)’ 조건을 쉽게 만들어주고, 만일 코드가 우리 바람과 일치하지 않으면 실패로 처리하는 도구다.</p><p><strong>Hamcrest는 JUnit 라이브러리에 자동으로 포함</strong>되며, JUnit은 새로운 안드로이드 스튜디오 프로젝트를 생성할 때 의존성에 자동으로 포함된다. 따라서 테스트 빌드에 Mockito 의존성만 추가하면 된다.</p><blockquote><p>Mockito 의존성 추가하기 (app/build.gradle)</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.13.2&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.mockito:mockito-core:3.3.3&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.mockito:mockito-inline:3.3.3&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>testImplementation</em>은 이 라이브러리 의존성이 이 앱의 테스트 빌드에만 포함됨을 의미한다. 따라서 디버그나 릴리즈 빌드로 생성된 APK에는 포함되지 않는다.</p><p>mockito-core는 모의 객체를 생성하고 구성하는 데 사용하는 모든 함수를 포함한다. mockito-inlin은 Mockito를 코틀린에서 쉽게 사용하도록 해주는 의존성이다.</p><p>기본적으로 모든 코틀린 클래스는 <strong>final</strong>이다. 즉, 클래스에 open 키워드를 지정하지 않으면 상속받는 서브 클래스를 만들 수 없으며, 함수에 open 키워드를 지정하지 않으면 서브 클래스에서 오버라이드할 수 없다. 그런데 Mockito에서 모의 객체의 클래스를 생성할 때는 클래스 상속을 해야 한다. 이때 mockito-inline 의존성을 지정하면 Mockito가 <strong>final</strong> 클래스와 함수들의 모의 객체를 생성한다. 따라서 <strong>코틀린 클래스 소스 코드를 변경하지 않고 모의 객체를 생성할 수 있다.</strong></p><h2 id="테스트-클래스-생성하기"><a class="markdownIt-Anchor" href="#테스트-클래스-생성하기"></a> 테스트 클래스 생성하기</h2><p>단위 테스트를 작성하는 가장 편리한 방법은 <b>테스트 프레임워크<small>(testing framwork)</small></b>를 사용하는 것이다. 테스트 프레임워크를 사용하면 안드로이드 스튜디오에서 테스트 코드를 더 쉽게 작성하고 실행할 수 있으며 결과 출력도 볼 수 있다.</p><p>안드로이드의 테스트 프레임워크로는 JUnit이 사용되며, 안드로이드 스튜디오와 잘 통합되어 있다. 가장 먼저 할 일은 JUnit 테스트 클래스를 생성하는 것이다.</p><p>SoundViewModel.kt를 열어 SoundViewModel 클래스를 클릭한 후 안드로이드 스튜디오 메인 메뉴의 <code>Navigate -&gt; Test</code>를 선택한다. 그러면 안드로이드 스튜디오가 SoundViewModel 클래스와 관련된 테스트 클래스로 이동시켜준다. 그러나 여기처럼 테스트 클래스가 없으면 아래와 같이 팝업으로 새로운 테스트 클래스 생성 옵션을 제공한다.</p><blockquote><p>테스트 클래스 생성 팝업</p></blockquote><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/120896740-c38d2f00-c65d-11eb-931a-5023aa8f56b9.png'></p><p>'Create New Test…'를 선택하면 대화상자<small>(좌)</small>가 나타난다. 아래와 같이 테스트 라이브러리를 JUnit4로 선택하고 SetUp/@Before를 체크한 후 다른 필드는 그대로 두고 OK 버튼을 누른다.</p><p>그러면 생성하는 테스트 클래스의 종류를 선택하는 대화상자<small>(우)</small> 나타난다.</p><blockquote><p>새로운 테스트 클래스 생성하기<small>(좌)</small>, 테스트 클래스의 종류 선택하기<small>(우)</small></p></blockquote><p align = 'center'><img width = '800' src = 'https://user-images.githubusercontent.com/39554623/120896968-e66c1300-c65e-11eb-81a5-f1f28ce87cea.png'></p><h4 id="장치-테스트smallinstrumentation-testsmall"><a class="markdownIt-Anchor" href="#장치-테스트smallinstrumentation-testsmall"></a> 장치 테스트<small>(instrumentation test)</small></h4><p>androidTest 폴더에 있는 테스트를 <b>장치 테스트<small>(instrumentation test)</small></b>라고 한다. 장치 테스트는 안드로이드 장치나 에뮬레이터에서 실행된다. 앱이 배포된 후 APK가 실행될 시스템 프레임워크와 API를 대상으로 앱 전체를 테스트할 수 있다는 것이 장치 테스트의 장점이다. 그러나 장치 테스트는 <strong>해당 안드로이드 운영체제에서 실행되어서 설정과 실행에 시간이 더 걸린다는 단점</strong>이 있다.</p><h4 id="단위-테스트smallunit-testsmall"><a class="markdownIt-Anchor" href="#단위-테스트smallunit-testsmall"></a> 단위 테스트<small>(unit test)</small></h4><p>이와는 달리 test 폴더에 있는 테스트는 <b>단위 테스트<small>(unit test)</small></b>라고 한다. 단위 테스트는 안드로이드 런타임이 아닌 <strong>로컬 컴퓨터의 JVM<small>(Java Virtual Machine)</small>에서 실행되므로 빠르게 이루어진다.</strong></p><p>안드로이드에서는 '단위 테스트’라는 용어가 폭넓게 사용된다. 즉, 하나의 클래스나 단위 기능을 별개로 검사함을 의미하며, 로컬 컴퓨터에서 실행되는 단위 테스트들은 test 폴더에 포함된다. 또한, 앱의 여러 클래스나 기능이 함께 작동하는 것을 테스트하는 <b>통합 테스트<small>(integreation test)</small></b>를 의미하기도 한다. 통합 테스트는 <a id = "a1"><a href="#f1">궁금증 해소: 통합 테스트</a></a>에서 자세히 알아보자.</p><p>본문의 나머지 부분에서는 test 폴더에 있으면서 JVM에서 실행되는 각 타입의 테스트를 <strong>JVM 테스트</strong>라 하고, 하나의 클래스나 단위 기능을 검사하는 테스트만 <strong>단위 테스트</strong>라고 칭한다.</p><p>단위 테스트는 하나의 컴포넌트<small>(주로 클래스)</small> 자체를 테스트하는 것이므로 작성할 수 있는 가장 작은 종류의 테스트다. 그리고 테스트를 실행하고자 전체 앱이나 장치를 사용할 필요가 없으며, 테스트를 여러 번 실행해도 충분할 만큼 빠르게 실행된다. 따라서 하나의 컴포넌트르 테스트할 때 장치 테스트로 실행하는 경우는 거의 없다. 이 점을 염두에 두고 위의 이미지의 우측 대화상자와 같이 androidTest 폴더가 아닌 test 폴더를 선택하고 OK 버튼을 누른다. 그러면 안드로이드 스튜디오가 SoundViewModelTest.kt를 생성하고 편집기 창에 열어준다.</p><blockquote><p>Project 뷰로 보면 app/src 패키지 밑에 test와 androidTest 패키지가 생성되어 있다</p></blockquote><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120897965-c8ed7800-c663-11eb-9970-a02fd282a3aa.png'></p><h2 id="테스트-설정하기"><a class="markdownIt-Anchor" href="#테스트-설정하기"></a> 테스트 설정하기</h2><p>자동 생성된 SoundViewModelTest 클래스는 <code>setUp()</code> 함수만 갖고 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModelTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 클래스에서 특정 클래스를 테스트하는 데 필요한 작업은 대부분 같다. 즉, 테스트할 클래스의 인스턴스와 이 인스턴스가 필요로 하는 다른 객체들도 생성한다. 이에 따라 JUnit에서는 <code>@Before</code>라는 애노테이션을 제공한다. <code>@Before</code>가 지정된 함수 내부의 코드는 각 테스트가 실행되기 전에 한번만 실행되며, JUnit 테스트 클래스는 <code>@Before</code>가 지정된 <code>setUp()</code>이라는 이름의 함수를 갖는다.</p><h3 id="테스트-대상-설정하기"><a class="markdownIt-Anchor" href="#테스트-대상-설정하기"></a> 테스트 대상 설정하기</h3><p><code>setUp()</code> 함수 내부에서는 테스트할 SoundViewModel의 인스턴스와 Sound의 인스턴스를 생성해야 한다. SoundViewModel이 음원 제목을 보여주는 방법을 알려면 Sound 인스턴스를 필요로 하기 때문이다.</p><p>SoundViewModel과 Sound의 인스턴스를 생성하자.</p><blockquote><p>테스트 대상인 SoundViewModel 인스턴스 생성하기 (SSoundViewModelTest.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModelTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> sound: Sound</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> subject: SoundViewModel</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sound = Sound(<span class="string">&quot;assetPath&quot;</span>)</span><br><span class="line">        subject = SoundViewModel()</span><br><span class="line">        subject.sound = sound</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>지금까지는 <strong>SoundViewModel</strong> 인스턴스를 참조하는 속성 이름을 <em>soundViewModel</em>로 사용했는데, 여기서는 <em>subject</em>라고 했다. 테스트의 대상이 되는 객체이므로 <em><strong>subject</strong></em> 라고 하는 것이 오히려 알기 쉽고, 테스트 함수를 다른 클래스로 옮기더라도 속성 이름을 변경할 필요가 없기 때문이다.</p><h2 id="테스트-작성하기"><a class="markdownIt-Anchor" href="#테스트-작성하기"></a> 테스트 작성하기</h2><p><code>setUp()</code> 함수가 작성되었으니 이제는 테스트를 작성해본다. <code>@Test</code> 애노테이션이 지정된 테스트 클래스의 함수를 테스트라고 한다.</p><p>우선 SoundViewModel의 <em>title</em> 속성값이 Sound의 <em>name</em> 속성값과 일치하는지 검사하는 테스트 함수를 작성하자.</p><blockquote><p><em>title</em> 속성 테스트하기 (SoundViewModelTest.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert.*</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.core.Is.`<span class="keyword">is</span>`</span><br><span class="line"><span class="keyword">import</span> org.hamcrest.MatcherAssert</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModelTest</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">exposesSoundNameAsTitle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        MatcherAssert.assertThat(subject.title, `<span class="keyword">is</span>`(sound.name))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small>(<code>assertThat(…)</code> 함수와 <code>is(…)</code> 함수는 위의 코드 대로 import해야 한다.)</small></p><p>이 테스트에서는 <code>assertThat(…)</code> 함수와 <code>is(…)</code> 함수를 같이 사용하며, '테스트 대상의 <em>title</em> 속성값이 Sound의 <em>name</em> 속성값과 같아야 함’을 나타낸다. 따라서 두 속성값이 다르면 테스트는 실패한다.</p><p>프로젝트 도구 창의 <strong>‘app/java/com.june0122.beatbox <small>(test)</small>’</strong> 밑에 있는 <strong>SoundViewModelTest</strong>에서 오른쪽 마우스 버튼을 클릭한 후 Run 'SoundViewModelTest’를 선택하면 단위 테스트가 실행되고 안드로이드 스튜디오에서 아래와 같은 실행 결과를 보여준다.</p><blockquote><p>테스트과 통과됨</p></blockquote><p align = 'center'><img width = '800' src = 'https://user-images.githubusercontent.com/39554623/120898950-36030c80-c668-11eb-84e4-df1d2bedaad5.png'></p><p>여기서는 한 개의 테스트가 실행되어 통과되었음을 보여준다<small>(Tests passed: 1)</small>. 만일 테스트가 실패하면 이에 관한 자세한 내용도 보여준다.</p><h3 id="객체의-상호작용-테스트하기"><a class="markdownIt-Anchor" href="#객체의-상호작용-테스트하기"></a> 객체의 상호작용 테스트하기</h3><p>다음으로 SoundViewModel과 <code>BeatBox.play(Sound)</code> 함수가 잘 연동되는지 검사하는 테스트를 생성한다.</p><p>이때는 주로 연동을 테스트하는 함수를 테스트 클래스에 작성한다. 우선 <code>onButtonClicked()</code>를 호출하는 테스트 함수를 작성한다<small>(<code>onButtonClicked()</code> 함수는 잠시 후에 SoundViewModel에 추가한다)</small>.</p><blockquote><p><code>onButtonClicked()</code>를 호출하는 테스트 함수 작성하기 (SoundViewModelTest.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModelTest</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">exposesSoundNameAsTitle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        MatcherAssert.assertThat(subject.title, `<span class="keyword">is</span>`(sound.name))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">callsBeatBoxPlayOnButtonClicked</span><span class="params">()</span></span> &#123;</span><br><span class="line">        subject.onButtonClicked()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 <code>onButtonClicked()</code> 함수는 아직 작성되지 않았기에 붉은색의 에러로 표시된다. 이 함수를 클릭한 후 <code>Alt+Enter [Option+Return]</code> 키를 누르고 Create member function 'SoundViewModel.onButtonClicked’를 선택하면 이 함수가 SoundViewModel.kt에 자동 생성된다. 반드시 TODO를 주석으로 처리해주자!</p><blockquote><p>자동 생성된 <code>onButtonClicked()</code> (SoundViewModel.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModel</span> : <span class="type">BaseObservable</span></span>() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onButtonClicked</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// TODO(&quot;Not yet implemented&quot;)</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>지금은 <code>onButtonClicked()</code> 함수를 비어 있는 상태로 두고 SoundViewModelTest 클래스를 다시 본다.</p><p>테스트 함수인 <code>callsBeatBoxPlayOnButtonClicked()</code>에서는 SoundViewModel의 <code>onButtonClicked()</code> 함수를 호출한다. 그러나 이 함수에서 <code>BeatBox.play(Sound)</code>를 호출하는 것을 검사해야 한다. 이것을 구현하기 위해 맨 먼저 할 일은 SoundViewModel에 BeatBox 객체를 제공하는 것이다.</p><p>이때 테스트 함수에서 BeatBox 인스턴스를 생성하고 SoundViewModel 생성자에 전달할 수 있다. 그러나 단위 테스트에서 이렇게하면 문제가 생긴다. 만일 BeatBox에서 문제가 생기면 이것을 사용하는 SoundViewModel도 덩달아 문제가 생겨서 SoundViewModel의 단위 테스트가 실패할 수 있기 때문이다. 이것은 우리가 원하는 바가 아니다. <strong>SoundViewModel의 단위 테스트는 SoundViewModel에 국한된 문제가 있을 때만 실패해야 한다.</strong></p><p>다시 말해서 SoundViewModel 자체의 작동과 다른 클래스와의 상호 작용은 별개로 테스트해야 한다. 이것이 단위 테스트에서 중요한 사항이다.</p><p>이런 문제를 해결하고자 BeatBox에 모의 객체<small>(mock object)</small>를 사용한다. 이때 모의 객체는 BeatBox의 서브 클래스가 되며, BeatBox와 같은 함수들을 갖는다. 단, 모든 함수가 아무 일도 하지 않으므로 BeatBox에서는 문제가 생기지 않는다. 따라서 SoundViewModel의 테스트에서는 BeatBox의 작동과는 무관하게 SoundViewModel이 BeatBox를 사용하는 것이 맞는지 검사할 수 있다.</p><p>Mockito를 사용해서 모의 객체를 생성할 때는 <strong>static</strong> 함수인 <code>mock(Class)</code>를 호출하며, 이때 모의 객체를 사용할 클래스를 인자로 전달한다. BeatBox의 모의 객체를 생성하고 이 객체의 참조를 갖는 속성을 SoundViewModelTest에 추가한다.</p><blockquote><p>BeatBox의 모의 객체 생성하기 (SoundViewModelTest.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mockito.Mockito.mock</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModelTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> beatBox: BeatBox</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> sound: Sound</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> subject: SoundViewModel</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        beatBox = mock(BeatBox::<span class="keyword">class</span>.java)</span><br><span class="line">        sound = Sound(<span class="string">&quot;assetPath&quot;</span>)</span><br><span class="line">        subject = SoundViewModel()</span><br><span class="line">        subject.sound = sound</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mock(Class)</code> 함수는 클래스 참조처럼 import되며, BeatBox의 모의 객체를 자동으로 생성한다.</p><p>BeatBox의 모의 객체가 준비되었으니 이제는 <code>play(Sound)</code> 함수가 호출되는지 검사하는 테스트 작성을 마무리한다. 모든 Mockito 모의 객체는 자신의 함수들이 호출된 기록은 물론이고, 각 호출에 전달된 매개변수 내역을 유지한다. 그리고 Mockito의 <code>verify(Object)</code> 함수를 사용하면 기대한 대로 모의 객체 함수들이 호출되었는지 확인할 수 있다.</p><p>SoundViewModel에 연결된 Sound 객체를 사용해서 <code>onButtonClicked()</code>가 <code>BeatBox.play(Sound)</code>를 호출하는지 확인하기 위해 <code>verify(Object)</code>를 호출한다<small>(Sound는 문제가 될 함수가 없는 데이터 객체이므로 모의 객체를 생성할 필요가 없다)</small>.</p><blockquote><p><code>BeatBox.play(Sound)</code>가 호출되는지 검사하기 (SoundViewModelTest.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModelTest</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">callsBeatBoxPlayOnButtonClicked</span><span class="params">()</span></span> &#123;</span><br><span class="line">        subject.onButtonClicked()</span><br><span class="line">        </span><br><span class="line">        verify(beatBox).play(sound) <span class="comment">// verify(Object) 호출</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 <b>플루언트 인터페이스<small>(fluent interface)</small></b>를 사용한다<small>(플루언트 인터페이슨느 코드를 알기 쉽게 해주며, 일반적으로 함수의 연쇄 호출 형태로 구현된다)</small>. 즉, <code>verify(beatBox)</code>에서 BeatBox 객체를 반환하므로 연속해서 이 객체의 <code>play(sound)</code> 함수를 호출할 수 있다. <code>verify(beatBox).play(sound)</code>는 다음과 같다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">verify(beatBox)</span><br><span class="line">beatBox.play(sound)</span><br></pre></td></tr></table></figure><p>여기서 <code>verify(beatBox)</code>는 'beatBox의 함수가 호출되었는지 검사하려고 함’이라는 의미이며, 그다음 함수 호출인 <code>play(sound)</code>는 ’<code>play(sound)</code> 함수가 이처럼 호출되었는지 검사하라’는 의미로 생각할 수 있다. 결국 <code>verify(beatBox).play(sound)</code>는 sound를 인자로 받는 beatBox의 <code>play(sound)</code> 함수가 호출되었는지 확인하라는 의미다.</p><p>물론, 지금은 이런 일이 생기지 않는다. <code>SoundViewModel.onButtonClicked()</code> 함수의 실행 코드가 아직 없어서 <code>beatBox.play(sound)</code>가 호출되지 않았기 때문이다. 또한, SoundViewModel은 beatBox 참조를 갖고 있지 않아서 beatBox의 어떤 함수도 호출할 수 없다. 따라서 테스트는 실패한다. 현재는 테스트를 먼저 작성했으니 이렇게 되는 것이 정상이다. 처음부터 테스트가 실패하지 않는다면 어떤 것도 테스트할 필요가 없다.</p><p>테스트를 실행해 아래와 같이 테스트가 실패하는 것을 확인해보자.</p><blockquote><p>테스트 실패 내역 출력</p></blockquote><p align = 'center'><img width = '800' src = 'https://user-images.githubusercontent.com/39554623/120899745-2d143a00-c66c-11eb-8646-3dd24a79692c.png'></p><p>출력 메시지는 다음과 같다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Wanted but not invoked:</span><br><span class="line">beatBox.play(</span><br><span class="line">    com.june0122.beatbox.Sound@1af146</span><br><span class="line">);</span><br><span class="line">-&gt; at com.june0122.beatbox.BeatBox.play(BeatBox.kt:26)</span><br><span class="line">Actually, there were zero interactions with this mock.</span><br></pre></td></tr></table></figure><p><code>beatBox.play(sound)</code>의 호출을 기대했지만 호출되지 않았다.</p><p><code>assertThat(…)</code>과 마찬가지로 <code>verify(Object)</code>은 내부적으로 어서션<small>(<a href="https://ko.wikipedia.org/wiki/%ED%91%9C%EB%AA%85">assertion</a>)</small>을 생성한다. 그리고 어서션에 어긋나면 테스트를 실패로 처리하고, 로그에 그 이유를 설명하는 출력을 남긴다. 그리고 어서션에 어긋나면 테스트를 실패로 처리하고, 로그에 그 이유를 설명하는 출력을 남긴다.</p><p>이제는 테스트의 결함을 수정할 때가 되었다. 우선 SoundViewModel의 생성자에서 BeatBox 인스턴스를 받도록 속성을 추가한다<small>(여기서 기본 생성자에 선언된 beatBox는 매개변수이면서 속성으로도 생성된다)</small>.</p><blockquote><p>BeatBox를 SoundViewModel에 제공하기 (SoundViewModel.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> beatBox: BeatBox) : BaseObservable() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 변경하면 SoundHolder 클래스와 SoundViewModelTest 클래스에서 에러가 발생한다.</p><ul><li>SoundHolder에서 SoundViewModel 인스턴스를 생성할 때 <em>beatBox</em> 객체를 생성자에 전달하도록 변경</li><li>BeatBox의 모의 객체를 SoundViewModel 생성자에 전달</li></ul><blockquote><p>SoundHolder의 에러 수정 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundHolder</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> binding: ListItemSoundBinding) : RecyclerView.ViewHolder(binding.root) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        binding.viewModel = SoundViewModel(beatBox)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(sound: <span class="type">Sound</span>)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>테스트에 BeatBox 모의 객체 제공 (SoundViewModelTest.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModelTest</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        beatBox = mock(BeatBox::<span class="keyword">class</span>.java)</span><br><span class="line">        sound = Sound(<span class="string">&quot;assetPath&quot;</span>)</span><br><span class="line">        subject = SoundViewModel(beatBox)</span><br><span class="line">        subject.sound = sound</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음으로 테스트에서 기대하는 것을 수행하도록 <code>onButtonClicked()</code>를 구현한다.</p><blockquote><p><code>onButtonClicked()</code> 구현하기 (SoundViewModel.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> beatBox: BeatBox) : BaseObservable() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onButtonClicked</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sound?.let &#123; </span><br><span class="line">            beatBox.play(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>테스트를 다시 실행하면 이번에는 테스트과 통과되었음을 Run 도구 창에서 확인할 수 있다.</p><p align = 'center'><img width = '800' src = 'https://user-images.githubusercontent.com/39554623/120900145-32728400-c66e-11eb-8b37-dc3dde85c26e.png'></p><h2 id="데이터-바인딩-콜백"><a class="markdownIt-Anchor" href="#데이터-바인딩-콜백"></a> 데이터 바인딩 콜백</h2><p>이제는 버튼들이 제대로 작동하는지 테스트하는 것만 남았다. 따라서 <code>onButtonClicked()</code>를 버튼과 연결해야 한다.</p><p>사용자 인터페이스인 레이아웃에 데이터를 넣을 때 데이터 바인딩을 사용할 수 있듯이, 클릭 리스너를 연결할 때도 람다식으로 데이터 바인딩을 할 수 있다.</p><p>버튼 클릭을 <code>SoundViewModel.onButtonClicked()</code>에 연결하기 위해 데이터 바인딩으로 호출되는 콜백 표현식을 추가한다.</p><blockquote><p>버튼을 코드와 연결하기 (list_item_sound.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;() -&gt; viewModel.onButtonClicked()&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@&#123;viewModel.title&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">&quot;Sound name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>이제는 BeatBox 앱을 실행하고 음원 제목을 보여주는 버튼을 누르면 음원이 재생되어야 한다. 테스트를 실행한 뒤에는 <b>실행 구성<small>(run configuration)</small></b>이 변경되므로 실행 구성 드롭다운을 클릭해 <strong>app</strong>으로 변경한다.</p><blockquote><p>실행 구성을 변경하기</p></blockquote><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120900296-115e6300-c66f-11eb-8ba7-b0301e31984f.png'></p><h2 id="음원-내리기"><a class="markdownIt-Anchor" href="#음원-내리기"></a> 음원 내리기</h2><p>음원 재생이 잘 작동하지만 아직 마무리해야 할 것이 있다. 음원 재생이 끝나면 <code>SoundPool.release()</code>를 호출해 SoundPool을 클린업<small>(리소스 해제)</small>해야 한다. 이 일을 하는 <code>BeatBox.release()</code> 함수를 추가한다.</p><blockquote><p>SoundPool 클린업하기 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> assets: AssetManager) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">play</span><span class="params">(sound: <span class="type">Sound</span>)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">release</span><span class="params">()</span></span> &#123;</span><br><span class="line">        soundPool.release()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadSounds</span><span class="params">()</span></span>: List&lt;Sound&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그다음에 <code>BeatBox.release()</code> 함수를 호출하는 <code>onDestroy()</code> 함수를 MainActivity에 추가한다. 액티비티가 소멸하면 SoundPool도 클린업해야 하기 때문이다.</p><blockquote><p><code>onDestroy()</code> 함수 추가하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> beatBox: BeatBox</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        beatBox.release()</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeatBox 앱을 다시 실행해 <code>release()</code> 함수가 제대로 작동하는지 확인해보자. 대부분 짧은 소리만 나지만, 조금 긴 소리의 음원이 재생되는 동안에 장치를 회전하거나 백 버튼을 누르면 재생이 중단된다.</p><h2 id="b-id-f1궁금증-해소-️-통합-테스트b"><a class="markdownIt-Anchor" href="#b-id-f1궁금증-해소-️-통합-테스트b"></a> <b id = "f1">궁금증 해소 💁🏻‍♂️ : 통합 테스트</b>  <a href="#a1"> ↩</a></h2><p>앞의 <strong>SoundViewModelTest</strong>는 단위 테스트였지만, <b>통합 테스트<small>(integration test)</small></b>를 생성할 수도 있다. 통합 테스트가 무엇일까?</p><p>단위 테스트에서는 테스트 항목이 개별 클래스이지만, 통합 테스트는 여러 클래스나 컴포넌트가 함께 작동하는 앱의 일부가 테스트 대상이다. 단위 테스트와 통합 테스트 모두 중요하지만, 서로 다른 목적을 갖는다.</p><ul><li>단위 테스트에서는 각 단위 클래스가 올바르게 작동하는지, 기대한 대로 다른 단위와 제대로 상호 작용하는지 확인한다.</li><li>반면에 통합 테스트에서는 개별적으로 테스트된 단위들과 기능이 올바르게 통합되어 작동하는지 검사한다.</li></ul><p>통합 테스트는 데이터베이스 사용과 같은 UI가 아닌 부분을 검사하기 위해 작성한다. 그런데 안드로이드에서는 UI와 상호 작용하면서 기대한 대로 잘 되는지 검사하기 때문에 UI 수준에서 앱을 테스트하고자 이러한 테스트를 작성하는 경우가 많다. 따라서 대개는 화면별로 통합 테스트를 작성한다. 예를 들어, MainActivity 화면이 나타날 때 첫 번째 버튼의 제목이 <em>sample_sounds</em>의 첫 번째 파일 이름<small>(예를 들어, MainActivity)</small> 화면이 나타날 때 첫 번째 버튼의 제목이 <em>sample_sounds</em>의 첫 번째 파일 이름<small>(예를 들어, 65_cjipie)</small>을 보여주는지 테스트할 수 있다.</p><p>UI 수준의 통합 테스트는 액티비티나 프래그먼트와 같은 프레임워크 클래스가 필요하며, JVM 단위 테스트에서 사용할 수 없는 시스템 서비스, 파일 시스템 등도 필요할 수 있다. 이런 이유로 안드로이드에서는 통합 테스트는 주로 장치 테스트로 구현된다.</p><p>통합 테스트는 기대한 대로 앱이 <strong>작동</strong>하면 통과된다. <strong>구현</strong>될 때 통과되는 것이 아니다. 버튼 ID의 이름을 변경해도 앱의 작동에는 영향을 주지 않는다. 그런데 <code>findViewById(R.id.button)</code>을 호출해 해당 버튼이 올바른 텍스트를 보여주는지 확인하는 것은 통합 테스트로 작성할 수 있다. 이때 안드로이드에서는 <code>findViewById(R.id.button)</code> 대신 UI 테스트 프레임워크를 사용해서 통합 테스트를 작성한다. 이렇게 하면 기대하는 텍스트를 갖는 버튼이 화면에 있는지 쉽게 확인할 수 있다.</p><p><strong>Espresso는 안드로이드 앱을 테스트하는 구글의 UI 테스트 프레임워크</strong>다. 안드로이드 스튜디오의 프로젝트 도구 창에서 Gradle Scripts 밑의 build.gradle (Module: BeatBox.app) 파일을 보면 다음과 같이 기본적으로 라이브러리 의존성에 추가되어 있다<small>(맨 끝의 버전 번호는 변경될 수 있다)</small>.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">androidTestImplementation <span class="string">&#x27;androidx.test.espresso:espresso-core:3.3.0&#x27;</span></span><br></pre></td></tr></table></figure><p>이처럼 Espresso가 의존성에 포함되면 통합 테스트를 하기 위해 시작될 액티비티에 관한 어서션을 만들 수 있다. 여기서는 첫 번째 <em>sample_sounds</em> 테스트 파일 이름을 사용하는 뷰<small>(버튼)</small>가 화면에 있어야 한다는 어서션을 만드는 방법을 보여준다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(AnbdroidJUnit4::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@get:Rule</span></span><br><span class="line">    <span class="keyword">val</span> activityRule = ActivityTestRule(MainActivity::<span class="keyword">class</span>.java)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showsFirstFileName</span><span class="params">()</span></span> &#123;</span><br><span class="line">        onView(withText(<span class="string">&quot;65_cjipie&quot;</span>))</span><br><span class="line">                .check(matches(isDisplayed()))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 두 개의 애노테이션이 코드를 실행한다. <code>@RunWith(AnbdroidJUnit4::class)</code>는 MainActivityTest가 안드로이드 장치 테스트이며, 액티비티 및 다른 안드로이드 런타임 도구와 함께 작동함을 나타낸다. 그다음에 있는 activityRule의 <code>@get:Rule</code>은 각 테스트를 실행하기 전에 MainActivity의 인스턴스를 시작시켜야 함을 JUnit에게 알린다.</p><p>테스트가 설정되었으니 이제는 테스트할 MainActivity에 관한 어서션을 만들 수 있다. <code>showsFirstFileName()</code>의 <code>onView(withText(&quot;65_cjipie&quot;))</code>에서는 테스트를 수행하기 위해 *“65_cjipie”*라는 텍스트를 갖는 뷰<small>(버튼)</small>을 찾는다. 그다음에 <code>check(matches(isDisplayed()))</code>를 호출해 해당 뷰가 화면에 보이는지 확인한다. 만일 그런 텍스트를 갖는 뷰가 없다면 <code>check(…)</code>는 실패한다. <code>check(…)</code> 함수는 뷰에 관한 <code>assertThat(…)</code> 형태의 어서션을 만드는 Espresso의 방법이다.</p><p>버튼처럼 뷰를 클릭해야 할 때는 클릭한 결과를 검사하는 어서션을 만들면 된다. 이때도 다음과 같이 Espresso를 사용할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onView(withText(<span class="string">&quot;65_cjipie&quot;</span>))</span><br><span class="line">        .perform(click())</span><br></pre></td></tr></table></figure><p>이처럼 뷰와 상호 작용할 때는 Espresso가 테스트를 멈추고 기다리며, UI의 변경이 끝났을 때를 감지한다. 그런데 Espresso를 더 오래 기다리게 할 때는 <strong>IdlingResource</strong>의 서브 클래스를 사용해 Espresso에게 앱의 작업이 아직 끝나지 않았음을 알린다.</p><p>Espresso로 UI를 테스트하는 방법에 관한 자세한 정보는 <a href="https://developer.android.com/training/testing/espresso?hl=ko">Espresso 문서</a>를 참고하자.</p><p>다시 말하지만 <strong>통합 테스트와 단위 테스트는 그 목적이 다르다.</strong> 대부분의 사람은 단위 테스트를 먼저 시작한다. 앱의 개별적인 부분들의 작동을 정의하고 검사하는데 도움이 되기 때문이다. 통합 테스트는 그런 개별적인 부분들에 의존해 여러 부분이 하나로 함께 잘 작동하는지 검사한다. 두 테스트는 각각 앱의 건강에 관한 서로 다른 중요한 관점을 제공하므로 테스트를 같이 하는 것이 가장 좋다.</p><h2 id="궁금증-해소-️-모의-객체와-테스트"><a class="markdownIt-Anchor" href="#궁금증-해소-️-모의-객체와-테스트"></a> 궁금증 해소 💁🏻‍♂️ : 모의 객체와 테스트</h2><p>통합 테스트에서는 모의 객체가 단위 테스트 때와는 다른 역할을 담당한다. 모의 객체는 다른 컴포넌트를 테스트와 관계없는 것처럼 만들어서 테스트할 컴포넌트를 격리하기 위해 존재한다. 단위 테스트는 클래스 단위로 테스트한다. 그런데 각 클래스는 다른 클래스들에 대해 의존성을 가질 수 있으므로 테스트 클래스들은 서로 다른 모의 객체들을 가지며, 모의 객체가 어떻게 작동하는가는 중요하지 않다. 따라서 간단한 모의 객체를 쉽게 생성해주는 모의 프레임워크<small>(예를 들어, Mockito)</small>가 단위 테스트에는 안성맞춤이다.</p><p>이와는 달리 통합 테스트는 앱 전체를 한 덩어리로 테스트한다. 따라서 앱의 각 부분을 격리하는 대신에 앱이 상호 작용하는 외부의 것과 격리하기 위한 모의 객체를 사용한다. 예를 들어, 모의 데이터와 응답을 반호나하는 웹 서비스를 제공하는 경우다. BeatBox 앱에서는 특정 음원 파일이 재생되었음을 알려주는 모의 SoundPool을 제공할 수 있을 것이다. 모의 객체는 점점 더 많아지고 여러 테스트에서 공유되며 모의 행동을 구현하므로, 통합 테스트에서는 자동화된 모의 프레임워크를 사용하지 말고 모의 객체를 직접 작성하는 것이 좋다.</p><p>어떤 경우든 다음 규칙이 적용된다. 즉, 테스트 중인 컴포넌트의 경계에 있는 개체들을 모의 객체로 만든다. 이렇게 하면 테스트하려는 범위에만 집중할 수 있다. 또한, 테스트 컴포넌트 외의 다른 컴포넌트와는 무관하게 테스트 컴포넌트에 문제가 있을 때만 테스트가 실패하므로 정확하게 테스트할 수 있다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Android/">Android</category>
      
      <category domain="http://june0122.github.io/categories/Android/Guide/">Guide</category>
      
      
      <category domain="http://june0122.github.io/tags/Android/">Android</category>
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/MVVM/">MVVM</category>
      
      <category domain="http://june0122.github.io/tags/Unit-Test/">Unit Test</category>
      
      <category domain="http://june0122.github.io/tags/Mockito/">Mockito</category>
      
      <category domain="http://june0122.github.io/tags/Espresso/">Espresso</category>
      
      <category domain="http://june0122.github.io/tags/SoundPool/">SoundPool</category>
      
      
      <comments>http://june0122.github.io/2021/06/06/android-bnr-20/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Kotlin] Coroutine - Cancellation and Timeouts</title>
      <link>http://june0122.github.io/2021/06/03/coroutines-cancellation-timeouts/</link>
      <guid>http://june0122.github.io/2021/06/03/coroutines-cancellation-timeouts/</guid>
      <pubDate>Thu, 03 Jun 2021 09:15:50 GMT</pubDate>
      
      <description>코루틴이 취소되기 위해서 협조적인 방식을 취하는데 크게 2가지 방법이 있다. 첫 번째, &lt;b&gt;주기적으로 suspend function을 호출하기&lt;/b&gt; &lt;small&gt;(suspend 되었다가 다시 재개될 때 cancel 되었는지를 확인해서 Exception을 던져주는 방식)&lt;/small&gt;. 두 번째, &lt;b&gt;명시적으로 취소 상태를 확인하기&lt;/b&gt; &lt;small&gt;(isActive 상태를 확인하여 false일 때 해당 코루틴을 종료시키는 방식)&lt;/small&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><h3 id="1-b-id-f1cancelling-coroutine-executionb"><a class="markdownIt-Anchor" href="#1-b-id-f1cancelling-coroutine-executionb"></a> ① <b id = "f1">Cancelling coroutine execution</b>  <a href="#a1"> ↩</a></h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> job = launch &#123;</span><br><span class="line">        repeat(<span class="number">1000</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;job: I&#x27;m sleeping <span class="variable">$i</span> ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>) <span class="comment">// delay a bit</span></span><br><span class="line">    println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancel() <span class="comment">// cancels the job </span></span><br><span class="line">    job.join() <span class="comment">// waits for job&#x27;s completion</span></span><br><span class="line">    println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">job: I&#x27;m sleeping 0 ... [main]</span><br><span class="line">job: I&#x27;m sleeping 1 ... [main]</span><br><span class="line">job: I&#x27;m sleeping 2 ... [main]</span><br><span class="line">main: I&#x27;m tired of waiting! [main]</span><br><span class="line">main: Now I can quit. [main]</span><br></pre></td></tr></table></figure><p>코루틴을 실행할 떄 launch를 해서 반환된 Job 객체에서 <code>cancel()</code>을 호출할 수 있고, 이를 통해 코루틴 실행을 취소시킬 수 있다.</p><blockquote><h3 id="2-cancellation-is-cooperative"><a class="markdownIt-Anchor" href="#2-cancellation-is-cooperative"></a> ② Cancellation is cooperative</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123; <span class="comment">// computation loop, just wastes CPU</span></span><br><span class="line">            <span class="comment">// print a message twice a second</span></span><br><span class="line">            <span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">                println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">                nextPrintTime += <span class="number">500L</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>) <span class="comment">// delay a bit</span></span><br><span class="line">    println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin() <span class="comment">// cancels the job and waits for its completion</span></span><br><span class="line">    println(<span class="string">&quot;main: Now I can quit.&quot;</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">job: I&#x27;m sleeping 0 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 1 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 2 ... [DefaultDispatcher-worker-1]</span><br><span class="line">main: I&#x27;m tired of waiting! [main]</span><br><span class="line">job: I&#x27;m sleeping 3 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 4 ... [DefaultDispatcher-worker-1]</span><br><span class="line">main: Now I can quit. [main]</span><br></pre></td></tr></table></figure><p>코드의 의도는 코루틴이 3번정도 실행되고 취소되는 것을 기대했을 것이다. 하지만 <code>main: I'm tired of waiting!</code>이 호출된 뒤 코루틴의 실행은 취소되지 않고 5번의 횟수를 채운 뒤 종료된다.</p><p>왜 이런 것일까? 이는 코루틴 자체가 취소되는데 협조적 <sup>cooperative</sup>이지 않았기 때문이다. 코루틴 내부에 suspend function이 존재하지 않는 것과 달리, <a id = "a1"><a href="#f1">첫 번째 예제</a></a>에서는 코루틴 내부에 <code>delay()</code>라는 suspend function이 존재하므로 취소가 가능했다.</p><p>다시 말해, 첫 번째 예제에서는 suspend function이 있었는데 두 번째 예제에서는 단순 연산만 있고 suspend function의 호출이 코루틴 내부에 없기 때문에 취소가 불가능하다는 것이다. 그럼 첫 번째 예제와 같이 두 번째 예제에도 suspend function을 호출하여 취소에 협조적인 코루틴을 만들어보자. 과연 원하는 실행 결과가 나올까?</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">                delay(<span class="number">1L</span>) <span class="comment">// suspend function을 추가</span></span><br><span class="line">                println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">                nextPrintTime += <span class="number">500L</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>)</span><br><span class="line">    println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin()</span><br><span class="line">    println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">job: I&#x27;m sleeping 0 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 1 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 2 ... [DefaultDispatcher-worker-1]</span><br><span class="line">main: I&#x27;m tired of waiting! [main]</span><br><span class="line">main: Now I can quit. [main]</span><br></pre></td></tr></table></figure><p>실행을 해보면 의도했던대로 0, 1, 2 까지만 출력이되고 종료가 된 것을 확인할 수 있다.</p><p>suspend function으로써 이런 상황에 <code>delay()</code>가 아닌 더 적합한 함수가 있다. 바로 <code>yield()</code> 이다. <code>yield()</code>를 이용하면 <code>delay(1L)</code>을 이용하지 않고도 취소를 확인할 수 있다. 결과는 위와 동일하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">                yield() <span class="comment">// delay 대신 yield 사용</span></span><br><span class="line">                println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">                nextPrintTime += <span class="number">500L</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>)</span><br><span class="line">    println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin()</span><br><span class="line">    println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어떻게 해서 cancel이 일어나게 되었을까?</p><p>코루틴 가이드에 따르면 <code>Job.cancel</code>을 하게 되면 코루틴 내부에서 suspend가 되었다가 다시 재개<small>(resume)</small>되는 시점에 suspend function<small>(여기서는 <code>yield()</code>)</small>이 CancellationException을 던진다고 설명되어 있다. Exception을 체크하기 위해 코루틴 내부에서 <code>try-catch</code> 문을 사용해보자.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123; <span class="comment">// computation loop, just wastes CPU</span></span><br><span class="line">                <span class="comment">// print a message twice a second</span></span><br><span class="line">                <span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">                    yield()</span><br><span class="line">                    kotlin.io.println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">                    nextPrintTime += <span class="number">500L</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            kotlin.io.println(<span class="string">&quot;Exception [<span class="variable">$e</span>]&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>) <span class="comment">// delay a bit</span></span><br><span class="line">    kotlin.io.println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin() <span class="comment">// cancels the job and waits for its completion</span></span><br><span class="line">    kotlin.io.println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">job: I&#x27;m sleeping 0 ...</span><br><span class="line">job: I&#x27;m sleeping 1 ...</span><br><span class="line">job: I&#x27;m sleeping 2 ...</span><br><span class="line">main: I&#x27;m tired of waiting!</span><br><span class="line">Exception [kotlinx.coroutines.JobCancellationException: StandaloneCoroutine was cancelled; job=StandaloneCoroutine&#123;Cancelling&#125;@54c334f5]</span><br><span class="line">main: Now I can quit.</span><br></pre></td></tr></table></figure><p>결과를 확인해보면 3번 출력한 뒤 Exception이 출력되었고 그 내용이 <em>kotlinx.coroutines.JobCancellationException</em>이라는 것을 확인할 수 있다. 즉 <code>Job.cancel</code>이 동작하는 방법은 코루틴 내부에서 강제로 Exception을 발생시켜 코루틴이 종료되게 하는 것이다.</p><p><strong>Coroutine cancellation is cooperative. A coroutine code has to cooperate to be cancellable.</strong> 코루틴 문서의 협조적이어야 한다는 말은 코루틴 스스로가 cancel을 체크<small>(CancellationException을 체크)</small>해야한다는 뜻이며 suspend function을 하나라도 실행하지 않으면 코루틴은 종료되지 않는다는 것이다<small>(자신의 로직이 완료되어 리턴이 되지 않는 한에서)</small>.</p><blockquote><h3 id="3-making-computation-code-cancellable"><a class="markdownIt-Anchor" href="#3-making-computation-code-cancellable"></a> ③ Making computation code cancellable</h3></blockquote><p>코루틴이 취소되기 위해서 협조적인 방식을 취하는데 크게 2가지 방법이 있다.</p><ol><li><strong>주기적으로 suspend function을 호출하기</strong> <small>(suspend 되었다가 다시 재개될 때 cancel 되었는지를 확인해서 Exception을 던져주는 방식)</small></li><li><strong>명시적으로 취소 상태를 확인하기</strong> <small>(<code>isActive</code>라는 상태를 확인하여 false일 때 해당 코루틴을 종료시키는 방식)</small></li></ol><p>2번 예제에서 첫 번째 방법을 알아보았고, 이번 3번 예제에서 두 번째 방법을 알아본다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (isActive) &#123; <span class="comment">// cancellable computation loop</span></span><br><span class="line">            <span class="comment">// print a message twice a second</span></span><br><span class="line">            <span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">                println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">                nextPrintTime += <span class="number">500L</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>) <span class="comment">// delay a bit</span></span><br><span class="line">    println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin() <span class="comment">// cancels the job and waits for its completion</span></span><br><span class="line">    println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">job: I&#x27;m sleeping 0 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 1 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 2 ... [DefaultDispatcher-worker-1]</span><br><span class="line">main: I&#x27;m tired of waiting! [main]</span><br><span class="line">main: Now I can quit. [main]</span><br></pre></td></tr></table></figure><p>while문을 통해 isActive의 상태를 확인하는 것으로 코루틴이 취소된 것을 확인할 수 있다. <code>isActive</code>가 실제로 잘 동작하였는지 로그를 통해 확인해보자.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        kotlin.io.println(<span class="string">&quot;isActive <span class="variable">$isActive</span> ...&quot;</span>) <span class="comment">// while문에 들어가기 전의 isActive 확인</span></span><br><span class="line">        <span class="keyword">while</span> (isActive) &#123;</span><br><span class="line">            <span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">                println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">                nextPrintTime += <span class="number">500L</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        kotlin.io.println(<span class="string">&quot;isActive <span class="variable">$isActive</span> ...&quot;</span>) <span class="comment">// while문에서 나온 뒤의 isActive 확인</span></span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>)</span><br><span class="line">    println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin()</span><br><span class="line">    println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isActive true ...</span><br><span class="line">job: I&#x27;m sleeping 0 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 1 ... [DefaultDispatcher-worker-1]</span><br><span class="line">job: I&#x27;m sleeping 2 ... [DefaultDispatcher-worker-1]</span><br><span class="line">main: I&#x27;m tired of waiting! [main]</span><br><span class="line">isActive false ...</span><br><span class="line">main: Now I can quit. [main]</span><br></pre></td></tr></table></figure><p>출력 결과에서 while문에 들어가기 전과 후에 <code>isActive</code>의 상태값이 변경되는 것을 확인할 수 있다. 이러한 상태값을 통해 코루틴 스스로가 종료할 수 있다.</p><p>상태값을 통해 코루틴을 종료시키는 방식은 Exception이 발생하지 않으므로 코루틴 내부를 2번 예제와 같이 코루틴 내부를 <code>try-catch</code>문으로 감싸 예외를 확인해보면 Exception이 발생하지 않는 것을 확인할 수 있다.</p><p><code>isActive</code>는 <strong>확장 프로퍼티</strong>로 내부 구현은 코루틴의 Job이 실제로 종료되었는지를 체크하는 것이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="meta-string">&quot;EXTENSION_SHADOWED_BY_MEMBER&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">val</span> CoroutineScope.isActive: <span class="built_in">Boolean</span></span><br><span class="line">    <span class="keyword">get</span>() = coroutineContext[Job]?.isActive ?: <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="4-closing-resources-with-finally-small코루틴을-종료할-때-리소스를-해제하는-방법small"><a class="markdownIt-Anchor" href="#4-closing-resources-with-finally-small코루틴을-종료할-때-리소스를-해제하는-방법small"></a> ④ Closing resources with finally <small>(코루틴을 종료할 때 리소스를 해제하는 방법)</small></h3></blockquote><p>코루틴에서 네트워크나 DB 등을 사용하다가 갑자기 코루틴이 cancel 되었을 때 코드 상에서 리소스를 해제해줘야 하는 위치를 알아보자.</p><p>아래의 코루틴은 <code>delay()</code>를 포함하여 취소하기에 협조적인 형태로 구현되어 있기에 <code>job.cancel</code>을 하면 취소가 될 것이다. 일시 중단이 되었다가 재개되면서 Exception을 던지면 <code>finally</code> 블록에서 리소스를 해제하면 된다.</p><p><strong>즉, suspend function으로 취소를 체크할 때 리소스 해제 지역은 <code>finally</code> 블록이다.</strong></p><p><code>try &#123;...&#125; finally &#123;...&#125;</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> job = launch &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            repeat(<span class="number">1000</span>) &#123; i -&gt;</span><br><span class="line">                println(<span class="string">&quot;job: I&#x27;m sleeping <span class="variable">$i</span> ...&quot;</span>)</span><br><span class="line">                delay(<span class="number">500L</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 리소스 해제 위치</span></span><br><span class="line">            println(<span class="string">&quot;job: I&#x27;m running finally&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>) <span class="comment">// delay a bit</span></span><br><span class="line">    println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin() <span class="comment">// cancels the job and waits for its completion</span></span><br><span class="line">    println(<span class="string">&quot;main: Now I can quit.&quot;</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">job: I&#x27;m sleeping 0 ... [main]</span><br><span class="line">job: I&#x27;m sleeping 1 ... [main]</span><br><span class="line">job: I&#x27;m sleeping 2 ... [main]</span><br><span class="line">main: I&#x27;m tired of waiting! [main]</span><br><span class="line">job: I&#x27;m running finally [main]</span><br><span class="line">main: Now I can quit. [main]</span><br></pre></td></tr></table></figure><blockquote><h3 id="5-run-non-cancellable-block"><a class="markdownIt-Anchor" href="#5-run-non-cancellable-block"></a> ⑤ Run non-cancellable block</h3></blockquote><p>5번 예제는 <strong>rare한 케이스</strong>이다.</p><p>이미 cancel된 코루틴 내부에서 suspend function을 호출해야하는 경우, 즉 <code>finally</code> 블록 안에서 다시 코루틴을 실행하려면 어떻게 해야할까?</p><p>이런 경우에는 <code>withContext</code> 함수에 <code>NonCancellable</code>이라는 CoroutineContext를 넘겨서 <code>withContext(NonCancellable) &#123; ... &#125;</code>에서 해당 코드를 래핑할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> job = launch &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            repeat(<span class="number">1000</span>) &#123; i -&gt;</span><br><span class="line">                println(<span class="string">&quot;job: I&#x27;m sleeping <span class="variable">$i</span> ...&quot;</span>)</span><br><span class="line">                delay(<span class="number">500L</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            withContext(NonCancellable) &#123;</span><br><span class="line">                println(<span class="string">&quot;job: I&#x27;m running finally&quot;</span>)</span><br><span class="line">                delay(<span class="number">1000L</span>)</span><br><span class="line">                println(<span class="string">&quot;job: And I&#x27;ve just delayed for 1 sec because I&#x27;m non-cancellable&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">1300L</span>) <span class="comment">// delay a bit</span></span><br><span class="line">    println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">    job.cancelAndJoin() <span class="comment">// cancels the job and waits for its completion</span></span><br><span class="line">    println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">job: I&#x27;m sleeping 0 ... [main]</span><br><span class="line">job: I&#x27;m sleeping 1 ... [main]</span><br><span class="line">job: I&#x27;m sleeping 2 ... [main]</span><br><span class="line">main: I&#x27;m tired of waiting! [main]</span><br><span class="line">job: I&#x27;m running finally [main]</span><br><span class="line">job: And I&#x27;ve just delayed for 1 sec because I&#x27;m non-cancellable [main]</span><br><span class="line">main: Now I can quit. [main]</span><br></pre></td></tr></table></figure><blockquote><h3 id="6-timeout"><a class="markdownIt-Anchor" href="#6-timeout"></a> ⑥ Timeout</h3></blockquote><p>이전 예제들에서는 코루틴 스스로가 내부에서 cancel을 체크하는 2가지 방법을 알아보았다. 그런데 그외에도 다른 방법이 있는데 바로 <strong>Timeout</strong>이다.</p><p><strong>Timeout</strong>은 launch된 코루틴의 Job을 가지고 cancel하는 것이 아니라, 코루틴을 실행할 때 일정 시간이 지나면 취소되도록 미리 Timeout을 지정하는 방식이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    withTimeout(<span class="number">1300L</span>) &#123;</span><br><span class="line">        repeat(<span class="number">1000</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;I&#x27;m sleeping <span class="variable">$i</span> ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m sleeping 0 ... [main]</span><br><span class="line">I&#x27;m sleeping 1 ... [main]</span><br><span class="line">I&#x27;m sleeping 2 ... [main]</span><br><span class="line">Exception in thread &quot;main&quot; kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms</span><br><span class="line">at kotlinx.coroutines.TimeoutKt.TimeoutCancellationException(Timeout.kt:186)</span><br><span class="line">at kotlinx.coroutines.TimeoutCoroutine.run(Timeout.kt:156)</span><br><span class="line">at kotlinx.coroutines.EventLoopImplBase$DelayedRunnableTask.run(EventLoop.common.kt:497)</span><br><span class="line">at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)</span><br><span class="line">at kotlinx.coroutines.DefaultExecutor.run(DefaultExecutor.kt:69)</span><br><span class="line">at java.base/java.lang.Thread.run(Thread.java:834)</span><br></pre></td></tr></table></figure><p>lauch를 통해 실행시킨 것이 아닌, runBlocking 내부 main에서 실행했기 때문에 CancellationException 발생하여 종료되는 것이다. 이런 경우를 해결하기 위해 <code>withTimeoutOrNull(Long)</code>을 사용한다.</p><p><code>withTimeout(Long)</code>이 아닌 <code>withTimeoutOrNull(Long)</code>을 사용하면 Exception이 발생했을 때 결과값이 <code>null</code>이 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> result = withTimeoutOrNull(<span class="number">1300L</span>) &#123;</span><br><span class="line">        repeat(<span class="number">1000</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;I&#x27;m sleeping <span class="variable">$i</span> ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;Done&quot;</span> <span class="comment">// will get cancelled before it produces this result</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Result is <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m sleeping 0 ... [main]</span><br><span class="line">I&#x27;m sleeping 1 ... [main]</span><br><span class="line">I&#x27;m sleeping 2 ... [main]</span><br><span class="line">Result is null [main]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/categories/Kotlin/Coroutine/">Coroutine</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Coroutine/">Coroutine</category>
      
      
      <comments>http://june0122.github.io/2021/06/03/coroutines-cancellation-timeouts/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Kotlin] Coroutine - Basics</title>
      <link>http://june0122.github.io/2021/06/03/coroutines-basics/</link>
      <guid>http://june0122.github.io/2021/06/03/coroutines-basics/</guid>
      <pubDate>Thu, 03 Jun 2021 09:15:50 GMT</pubDate>
      
      <description>코루틴 &lt;sup&gt;Coroutine&lt;/sup&gt;은 비동기 콜백 처리를 순차적인 코드로 작성할 수 있게 해주는 코틀린 기능이자, &lt;b&gt;비동기적으로 실행되는 코드를 간소화하기 위해&lt;/b&gt; Android에서 사용할 수 있는 동시 실행 설계 패턴&lt;small&gt;(concurrency design pattern)&lt;/small&gt;이다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="코루틴-개요"><a class="markdownIt-Anchor" href="#코루틴-개요"></a> 코루틴 개요</h2><ul><li>코루틴은 <strong>루틴</strong>의 일종</li><li>협동 루틴이라 할 수 있으며, Coroutine의 <code>Co</code>는 <em>with</em> 또는 <em>together</em>를 뜻한다.</li></ul><blockquote><p>루틴과 코루틴의 차이</p></blockquote><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/120277451-08783500-c2ef-11eb-96e7-403bf6e5d5bd.png'></p><p>코루틴은 이전에 자신의 실행이 마지막으로 <strong>중단</strong>되었던 지점 다음의 장소에서 실행을 <strong>재개</strong>한다. <small>(함수의 진입점과 출구점이 여러 개 존재한다)</small></p><h3 id="코루틴의-역사"><a class="markdownIt-Anchor" href="#코루틴의-역사"></a> 코루틴의 역사</h3><p>코루틴은 멜빈 콘웨이에 의해 1958년 처음 만들어진 용어이며, 이를 어셈블리 프로그램에 적용했다. 코루틴은 협력 작업 <sup>cooperative tasks</sup>, 예외 <sup>exceptions</sup>, 이벤트 루프 <sup>event loops</sup>, 반복자 <sup> iterators</sup>, 무한 리스트 <sup>infinite lists</sup> 및 파이프 <sup>pipes</sup>와 같은 친숙한 프로그램 구성 요소를 구현하는 데 적합하다고 소개되어있는데 <sup id = "a1"><a href="#f1">1</a></sup> 구글 문서에서는 코루틴의 사용 범위를 좀 더 명확하게 제시하고 있다.</p><h3 id="android-developers-코틀린-가이드에서의-코루틴-정의-sup-id-a12sup"><a class="markdownIt-Anchor" href="#android-developers-코틀린-가이드에서의-코루틴-정의-sup-id-a12sup"></a> Android Developers 코틀린 가이드에서의 코루틴 정의 <sup id = "a1"><a href="#f1">2</a></sup></h3><ul><li>코루틴은 <strong>비동기적으로 실행되는 코드를 간소화하기 위해</strong> Android에서 사용할 수 있는 동시 실행 설계 <strong>패턴</strong><small>(concurrency design pattern)</small>이다.<ul><li>비동기 처리는 callback, cancel, 리소스 관리 등을 해줘야하므로 어려움이 있는데 코루틴을 이용하면 쉽게 처리할 수 있다.</li></ul></li><li>Android에서 코루틴은 <strong>메인 스레드를 blocking하여 앱이 응답하지 않게 만들 수도 있는 장기 실행 작업을 관리하는 데 도움</strong>이 됩니다.</li></ul><h3 id="google-codelabs의-코루틴-정의-sup-id-a13sup"><a class="markdownIt-Anchor" href="#google-codelabs의-코루틴-정의-sup-id-a13sup"></a> Google Codelabs의 코루틴 정의 <sup id = "a1"><a href="#f1">3</a></sup></h3><ul><li>코루틴은 비동기 콜백 처리를 순차적인 코드로 작성할 수 있게 해주는 코틀린 기능이다. <small>(<strong>Coroutines</strong> are a Kotlin feature that <strong>converts async callbacks for long-running tasks</strong>, such as database or network access, into <strong>sequential code</strong>.)</small></li><li><code>suspend</code> 함수를 사용하여 비동기 코드를 순차적으로 만들어준다. <small>(Use suspend functions to <strong>make async code sequential</strong>)</small></li></ul><h2 id="코루틴-기초"><a class="markdownIt-Anchor" href="#코루틴-기초"></a> 코루틴 기초</h2><p>먼저 코루틴을 사용하기 위해 <code>kotlinx.coroutines.*</code>를 import해야하므로 <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/README.md#using-in-your-projects">공식 프로젝트 README</a>를 참고하여 최신 버전을 의존성에 추가한다.</p><blockquote><h3 id="1-thread"><a class="markdownIt-Anchor" href="#1-thread"></a> ① Thread</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    thread &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">    Thread.sleep(<span class="number">2000L</span>) <span class="comment">// // block main thread for 2 seconds to keep JVM alive</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main()</code>이 <code>println(&quot;World!&quot;)</code>가 실행되기도 전에 종료되는 것을 막기 위해 맨 밑줄에 <code>Thread.sleep(2000L)</code>이 추가되어 있다.</p><blockquote><h3 id="2-your-first-coroutine"><a class="markdownIt-Anchor" href="#2-your-first-coroutine"></a> ② Your first Coroutine</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    GlobalScope.launch &#123; <span class="comment">// launch a new coroutine in background and continue</span></span><br><span class="line">        delay(<span class="number">1000L</span>) <span class="comment">// non-blocking delay for 1 second</span></span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>) <span class="comment">// print after delay</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    println(<span class="string">&quot;Hello, &quot;</span>) <span class="comment">// main thread continues while coroutine is delayed</span></span><br><span class="line">    Thread.sleep(<span class="number">2000L</span>) <span class="comment">// block main thread for 2 seconds to keep JVM alive</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>launch</strong>는 독립적으로 실행이 불가능하며 <strong>CoroutineScope</strong> 내에서만 선언된다.</p><blockquote><h3 id="3-bridging-blocking-and-non-blocking-worlds"><a class="markdownIt-Anchor" href="#3-bridging-blocking-and-non-blocking-worlds"></a> ③ Bridging blocking and non-blocking worlds</h3></blockquote><p><code>Thread.sleep()</code>과 <code>delay()</code>가 혼용되는 것을 막기 위해 <code>delay()</code>로 통일해보자. 하지만 CoroutineScope 외부에 <code>delay()</code>를 추가하려는데 에러가 발생한다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/120302445-decc0780-c308-11eb-97ae-ede496319166.png'></p><p><code>Thread.sleep(2000L)</code>은 메인 스레드를 blocking하는 형태였으므로, <code>delay()</code>로 변경하기 위해서는 명시적으로 Blocking하는 코루틴을 만들어줘야 한다. 그 역할을 하는 코루틴 빌더가 <strong>runBlocking</strong>이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    GlobalScope.launch &#123; <span class="comment">// launch a new coroutine in background and continue</span></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Hello, &quot;</span>) <span class="comment">// main thread continues here immediately</span></span><br><span class="line">    runBlocking &#123; <span class="comment">// but this expression blocks the main thread</span></span><br><span class="line">        delay(<span class="number">2000L</span>) <span class="comment">// ... while we delay for 2 seconds to keep JVM alive</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>lauch</strong>는 자신을 호출하는 스레드를 <strong>Blocking 하지 않는다.</strong></p><p><strong>runBlocking</strong>은 자신을 호출하는 스레드를 <strong>Blocking 한다.</strong></p><blockquote><h3 id="4-rewritten-in-a-more-idiomatic-waysmall관용적인-형태로-만들기small"><a class="markdownIt-Anchor" href="#4-rewritten-in-a-more-idiomatic-waysmall관용적인-형태로-만들기small"></a> ④ rewritten in a more idiomatic way<small>(관용적인 형태로 만들기)</small></h3></blockquote><p>이때까지 작성한 코드들은 main 함수 안의 내용이 완료되기 전까지는 return되지 않기를 원하는 것이기 때문에 <strong>runBlocking</strong>을 마지막에만 사용하는 것이 아니라 코드 전체를 <strong>runBlocking</strong>으로 감싸는 형태로 작성한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        GlobalScope.launch &#123;</span><br><span class="line">            delay(<span class="number">1000L</span>)</span><br><span class="line">            println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        println(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">        delay(<span class="number">2000L</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>메인 함수를 <strong>runBlocking</strong>으로 감쌌기 때문에 전체 코드가 실행되기 전까지는 메인 스레드가 <strong>runBlocking</strong> 때문에 return이 되지 않는다. 그리고 위의 코드는 아래와 같이 한 번 더 변경될 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123; <span class="comment">// // start main coroutine</span></span><br><span class="line">    GlobalScope.launch &#123; <span class="comment">// launch a new coroutine in background and continue</span></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Hello, &quot;</span>) <span class="comment">// main coroutine continues here immediately</span></span><br><span class="line">    delay(<span class="number">2000L</span>) <span class="comment">// delaying for 2 seconds to keep JVM alive</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="5-waiting-for-a-job"><a class="markdownIt-Anchor" href="#5-waiting-for-a-job"></a> ⑤ Waiting for a job</h3></blockquote><p>프로그램이 종료되는 것을 막기 위해 delay를 사용하는 것은 좋은 접근법이 아니다. 명시적으로 <code>job</code>을 생성하여 기다리게 해보자.</p><p>lauch를 하게 되면 Job이 반환되는데, Job 객체에다가 <code>join()</code>을 하게 되면 해당 Job이 완료될 때까지 기다리게 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> job = GlobalScope.launch &#123;</span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">    job.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="6-structured-concurrency"><a class="markdownIt-Anchor" href="#6-structured-concurrency"></a> ⑥ Structured concurrency</h3></blockquote><p>이전 예제들에선 코루틴이 완료되는 것을 기다리기 위해 2초동안 <code>sleep()</code>을 실행하거나 Job 객체를 만들어서 <code>join()</code>을 사용하였다. 하지만 앞으로 여러 개의 코루틴을 실행하게 될텐데 이런 형태라면 아래와 같이 Job을 따로 관리해주는 등, 유지 보수하기 어려운 코드가 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> job1 = GlobalScope.launch &#123;</span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> job2 = GlobalScope.launch &#123;</span><br><span class="line">        delay(<span class="number">2000L</span>)</span><br><span class="line">        println(<span class="string">&quot;Let&#x27;s Go!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">    </span><br><span class="line">    job1.join()</span><br><span class="line">    job2.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코틀린에서는 이를 방지하기 위해서 <strong>Structured concurrency</strong>를 사용하라고 권장한다. runBlocking과 launch에서 실행된 코루틴이 구조적인 관계를 만든다면 서로 기다려주는 일을 할 수 있기 때문이다.</p><p><code>GlobalScope.launch</code>를 사용하게 되면, <strong>top-level 코루틴을 생성</strong>하게 된다. 이렇게 되면 <strong>많은 메모리를 소모</strong>하게 된다. 그러므로 GlobalScope에서 launch를 하는 것이 아닌 runBlocking을 통해 들어온 CoroutineScope에서 lauch를 한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123; <span class="comment">// this: CoroutineScope</span></span><br><span class="line">    launch &#123; <span class="comment">// // launch a new coroutine in the scope of runBlocking (this. 생략 가능)</span></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello, &quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉, <strong>Structured concurrency</strong>는 top-level 코루틴을 만들지 말고 <code>runBlocking</code>의 자식으로 코루틴을 만들면 부모 코루틴이 자식 코루틴이 완료되는 것까지 다 기다려주기 때문에 구조적인 형태를 이용해서 코루틴을 관리하라는 개념이다.</p><p>참고로 GlobalScope는 잘못 사용하기 쉬운 advanced API이므로 <a href="https://blog.jetbrains.com/kotlin/2021/05/kotlin-coroutines-1-5-0-released/#globalscope">Kotlin Coroutines 1.5.0</a>부터 <strong>delicate API</strong>로 표시되어 컴파일러가 경고를 보낸다.</p><blockquote><h3 id="7-extract-function-refactoring"><a class="markdownIt-Anchor" href="#7-extract-function-refactoring"></a> ⑦ Extract function refactoring</h3></blockquote><p>lauch 내부의 코드를 하나의 함수로 추출해보자. 그러면 아래와 같은 오류가 발생한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    launch &#123; </span><br><span class="line">        doWorld() </span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    delay(<span class="number">1000L</span>)</span><br><span class="line">    println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align = 'center'><img width = '700' src = 'https://user-images.githubusercontent.com/39554623/120296667-5139e900-c303-11eb-8cac-7727a7e86643.png'></p><p><em>Suspend function ‘delay’ should be called only from a coroutine or another suspend function</em>. 즉, 일시 중단되는 함수인 <code>delay()</code>는 오직 코루틴이나 다른 suspend function으로부터만 호출될 수 있다는 뜻이다.</p><p>이를 해결하기 위해선 <code>suspend</code> 키워드를 함수 앞에 붙여주면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    launch &#123; </span><br><span class="line">        doWorld()</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    delay(<span class="number">1000L</span>)</span><br><span class="line">    println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="8-coroutines-are-light-weight"><a class="markdownIt-Anchor" href="#8-coroutines-are-light-weight"></a> ⑧ Coroutines ARE light-weight</h3></blockquote><p>10만 개의 코루틴을 한 번에 생성하여 1초 뒤에 한 번의 점을 찍게 하는 코드를 실행해본다. 직접 실행해보면 아무런 오류나 성능적 이슈없이 점들이 출력된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    repeat(<span class="number">100_000</span>) &#123; <span class="comment">// launch a lot of coroutines</span></span><br><span class="line">        launch &#123;</span><br><span class="line">            delay(<span class="number">5000L</span>)</span><br><span class="line">            print(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align = 'center'><img width = '800' src = 'https://user-images.githubusercontent.com/39554623/120319461-ffea2380-c31b-11eb-9d19-0c86475f0b5b.png'></p><p>그렇다면 이번에 코루틴이 아닌 스레드로 바꿔서 똑같은 작업을 해보자. OutOfMemoryError가 발생하는 것을 확인할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    repeat(<span class="number">100_000</span>) &#123; <span class="comment">// launch a lot of coroutines</span></span><br><span class="line">        thread &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000L</span>)</span><br><span class="line">            print(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align = 'center'><img width = '800' src = 'https://user-images.githubusercontent.com/39554623/120319256-c9140d80-c31b-11eb-9f38-b9e891fd4dcf.png'></p><p>이 두 코드를 통해 <strong>코루틴이 스레드보다 구조적으로 상당히 가볍다</strong>는 것을 확인할 수 있다. 많은 스레드를 만들면 부하가 일어날 수 있지만, 코루틴은 많은 양을 생성하여도 크게 부하가 가지 않는 것이다.</p><blockquote><h3 id="9-global-coroutines-are-like-daemon-threads"><a class="markdownIt-Anchor" href="#9-global-coroutines-are-like-daemon-threads"></a> ⑨ Global coroutines are like daemon threads</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    GlobalScope.launch &#123;</span><br><span class="line">        repeat(<span class="number">1000</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;I&#x27;m sleeping <span class="variable">$i</span> ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    delay(<span class="number">1300L</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m sleeping 0 ...</span><br><span class="line">I&#x27;m sleeping 1 ...</span><br><span class="line">I&#x27;m sleeping 2 ...</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p><strong>코루틴이 계속 실행되고 있다고해서 프로세스가 유지되지는 않는다</strong>라는 것을 보여주는 코드이다. 코루틴은 <strong>데몬 스레드처럼</strong> 프로세스가 살아있을 동안에만 동작할 수 있다라는 것이다.</p><p>즉, <strong>프로세스가 종료되면 코루틴도 끝난다</strong>라는 것이다.</p><blockquote><h3 id="10-suspend-resume"><a class="markdownIt-Anchor" href="#10-suspend-resume"></a> ⑩ suspend &lt;-&gt; resume</h3></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        repeat(<span class="number">5</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;Coroutine A, <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    launch &#123;</span><br><span class="line">        repeat(<span class="number">5</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;Coroutine B, <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Coroutine Outer&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Coroutine Outer</span><br><span class="line">Coroutine A, 0</span><br><span class="line">Coroutine A, 1</span><br><span class="line">Coroutine A, 2</span><br><span class="line">Coroutine A, 3</span><br><span class="line">Coroutine A, 4</span><br><span class="line">Coroutine B, 0</span><br><span class="line">Coroutine B, 1</span><br><span class="line">Coroutine B, 2</span><br><span class="line">Coroutine B, 3</span><br><span class="line">Coroutine B, 4</span><br></pre></td></tr></table></figure><p>println을 override 하여 어떤 스레드에서 실행되었는지 확인한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">println</span><span class="params">(msg: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">    kotlin.io.println(<span class="string">&quot;<span class="variable">$msg</span> [<span class="subst">$&#123;Thread.currentThread().name&#125;</span>]&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Coroutine Outer [main]</span><br><span class="line">Coroutine A, 0 [main]</span><br><span class="line">Coroutine A, 1 [main]</span><br><span class="line">Coroutine A, 2 [main]</span><br><span class="line">Coroutine A, 3 [main]</span><br><span class="line">Coroutine A, 4 [main]</span><br><span class="line">Coroutine B, 0 [main]</span><br><span class="line">Coroutine B, 1 [main]</span><br><span class="line">Coroutine B, 2 [main]</span><br><span class="line">Coroutine B, 3 [main]</span><br><span class="line">Coroutine B, 4 [main]</span><br></pre></td></tr></table></figure><p><code>Help - Edit Custom VM Options...</code>에서 <strong>-Dkotlinx.coroutines.debug</strong>를 복사한 뒤, 실행 버튼 왼쪽의 탭을 클릭하여 <code>Edit Configurations...</code> 옵션에 들어가 VM options 칸에 복사한 <strong>-Dkotlinx.coroutines.debug</strong>를 붙여 넣어주면 어느 코루틴에서 실행되었는지까지 확인할 수 있다.</p><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120322472-6886cf80-c31f-11eb-861b-dab8a29df423.png'></p><p align = 'center'><img width = '800' src = 'https://user-images.githubusercontent.com/39554623/120322546-7b010900-c31f-11eb-92e6-54504ccd150f.png'></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Coroutine Outer [main @coroutine#1]</span><br><span class="line">Coroutine A, 0 [main @coroutine#2]</span><br><span class="line">Coroutine A, 1 [main @coroutine#2]</span><br><span class="line">Coroutine A, 2 [main @coroutine#2]</span><br><span class="line">Coroutine A, 3 [main @coroutine#2]</span><br><span class="line">Coroutine A, 4 [main @coroutine#2]</span><br><span class="line">Coroutine B, 0 [main @coroutine#3]</span><br><span class="line">Coroutine B, 1 [main @coroutine#3]</span><br><span class="line">Coroutine B, 2 [main @coroutine#3]</span><br><span class="line">Coroutine B, 3 [main @coroutine#3]</span><br><span class="line">Coroutine B, 4 [main @coroutine#3]</span><br></pre></td></tr></table></figure><p>첫 번째 코루틴<small>(coroutine#1)</small>은 runBlocking에 의해서 만들어졌고, 나머지 두 번째와 세 번째 코루틴은 launch에 의해 순서대로 만들어졌다.</p><p>이제 Coroutine A에 10ms의 delay를 줘보자.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        repeat(<span class="number">5</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;Coroutine A, <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">            delay(<span class="number">10L</span>) <span class="comment">// 10ms의 delay</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    launch &#123;</span><br><span class="line">        repeat(<span class="number">5</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;Coroutine B, <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Coroutine Outer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Coroutine Outer [main @coroutine#1]</span><br><span class="line">Coroutine A, 0 [main @coroutine#2]</span><br><span class="line">Coroutine B, 0 [main @coroutine#3]</span><br><span class="line">Coroutine B, 1 [main @coroutine#3]</span><br><span class="line">Coroutine B, 2 [main @coroutine#3]</span><br><span class="line">Coroutine B, 3 [main @coroutine#3]</span><br><span class="line">Coroutine B, 4 [main @coroutine#3]</span><br><span class="line">Coroutine A, 1 [main @coroutine#2]</span><br><span class="line">Coroutine A, 2 [main @coroutine#2]</span><br><span class="line">Coroutine A, 3 [main @coroutine#2]</span><br><span class="line">Coroutine A, 4 [main @coroutine#2]</span><br></pre></td></tr></table></figure><p>A가 모두 출력되고 B가 출력되었던 이전의 코드와 달리 A가 한 번만 출력되고 B가 모두 출력된 다음에야 나머지 A가 출력된다. A가 한 번 출력되고 <code>delay()</code>가 실행되었을 때, A는 중단되고 B로 실행이 넘어간 것이다. B 내부에는 중단점이 없기 때문에 모두 다 호출이 되고나서야 A가 다시 실행된다.</p><p>그렇다면 A와 B가 사이좋게 오고가며 실행될 수 있도록 하려면 어떻게 해야할까? B에도 중단점을 추가, 즉 delay를 추가해주면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        repeat(<span class="number">5</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;Coroutine A, <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">            delay(<span class="number">10L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    launch &#123;</span><br><span class="line">        repeat(<span class="number">5</span>) &#123; i -&gt;</span><br><span class="line">            println(<span class="string">&quot;Coroutine B, <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">            delay(<span class="number">10L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Coroutine Outer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Coroutine Outer [main @coroutine#1]</span><br><span class="line">Coroutine A, 0 [main @coroutine#2]</span><br><span class="line">Coroutine B, 0 [main @coroutine#3]</span><br><span class="line">Coroutine B, 1 [main @coroutine#3]</span><br><span class="line">Coroutine B, 2 [main @coroutine#3]</span><br><span class="line">Coroutine B, 3 [main @coroutine#3]</span><br><span class="line">Coroutine B, 4 [main @coroutine#3]</span><br><span class="line">Coroutine A, 1 [main @coroutine#2]</span><br><span class="line">Coroutine A, 2 [main @coroutine#2]</span><br><span class="line">Coroutine A, 3 [main @coroutine#2]</span><br><span class="line">Coroutine A, 4 [main @coroutine#2]</span><br></pre></td></tr></table></figure><p><em>Coroutine A</em>가 먼저 출력될 것 같은데 <em>Coroutine Outer</em>가 먼저 출력되는 것을 통해 <code>launch &#123; &#125;</code>가 코루틴이 실행되기 위한 스케줄링을 해놓는다는 것을 추측할 수 있다.</p><h2 id="정리"><a class="markdownIt-Anchor" href="#정리"></a> 정리</h2><p>코루틴은 <strong>일시 중단이 가능한 계산의 인스턴스</strong>다<small>(an instance of suspendable computation)</small>. 다른 코드와 동시에 작동하는 코드 블록을 실행해야 한다는 점에서 스레드와 개념적으로 유사하다. 하지만 코루틴은 특정 스레드에 바인딩되지 않는다. 한 스레드에서 실행을 일시 중지하고 다른 스레드에서 다시 시작할 수 있다.</p><p>코루틴은 경량 스레드라고 생각되어질 수 있지만, 실제 사용하는데 있어 스레드와 매우 다르게 만드는 몇 가지 중요한 차이점이 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123; <span class="comment">// this: CoroutineScope</span></span><br><span class="line">    launch &#123; <span class="comment">// launch a new coroutine and continue</span></span><br><span class="line">        delay(<span class="number">1000L</span>) <span class="comment">// non-blocking delay for 1 second (default time unit is ms)</span></span><br><span class="line">        println(<span class="string">&quot;World!&quot;</span>) <span class="comment">// print after delay</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>) <span class="comment">// main coroutine continues while a previous one is delayed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World!</span><br></pre></td></tr></table></figure><h4 id="launch-main-thread-를-unblocking-한-채-구문-내-작업을-수행"><a class="markdownIt-Anchor" href="#launch-main-thread-를-unblocking-한-채-구문-내-작업을-수행"></a> <code>launch &#123;&#125;</code> : Main Thread 를 Unblocking 한 채 <code>&#123;&#125;</code> 구문 내 작업을 수행</h4><p><strong>launch</strong>는 <strong>코루틴 빌더 <sup>coroutine builder</sup></strong> 이다. 코루틴 빌더는 새로운 코루틴을 독립적으로 작동하는 나머지 코드들과 <strong>동시에</strong> 실행시킨다. 이것이 <em>Hello</em>가 가장 먼저 출력되는 이유이다.</p><h4 id="delay"><a class="markdownIt-Anchor" href="#delay"></a> <code>delay()</code></h4><p><strong>delay</strong>는 특별한 suspending function으로, 코루틴을 특정 시간동안 일시 중단시킨다. 코루틴을 일시 중단시켜도 메인 스레드가 Blocking 되지는 않지만, 다른 코루틴이 코드에 메인 스레드를 실행하고 사용할 수 있습니다.</p><h4 id="runblocking-main-thread-를-blocking-한-채-구문-내-작업을-새-thread-에-할당하여-수행"><a class="markdownIt-Anchor" href="#runblocking-main-thread-를-blocking-한-채-구문-내-작업을-새-thread-에-할당하여-수행"></a> <code>runBlocking &#123;&#125;</code> : Main Thread 를 Blocking 한 채 <code>&#123;&#125;</code> 구문 내 작업을 새 Thread 에 할당하여 수행</h4><p><strong>runBlocking</strong> 또한 <strong>코루틴 빌더</strong>로써, 코루틴이 아닌 일반적인 <code>fun main()</code> 영역과 <code>runBlocking &#123;&#125;</code> 괄호 안의 코루틴이 있는 코드들을 연결한다.</p><p><strong>launch</strong>는 독립적으로 실행이 불가능하며 <strong>CoroutineScope</strong> 내에서만 선언되기 때문에, 만약 코드에서 <strong>runBlocking</strong>을 제거하거나 잊어버린다면 <strong>launch</strong>를 호출할 때 에러가 발생한다.</p><p><strong>runBlocking</strong>의 이름은 <code>runBlocking &#123;&#125;</code> 내부의 모든 코루틴이 실행을 완료할 때까지 이를 실행하는 스레드<small>(여기선 메인 스레드)</small>가 호출되는 동안 Blocking 된다는 것을 의미한다. 스레드는 값 비싼 리소스이고 스레드를 Blocking하는 것은 비효율적이면서 프로그래머가 종종 원하지 않기 때문에 애플리케이션의 최상위 수준에서 실제 코드 내에서는 거의 사용되지 않는 <strong>runBlocking</strong>을 자주 볼 수 있을 것이다.</p><blockquote><p>구조화된 동시성 <sup>Structured concurrency﻿</sup></p></blockquote><p>코루틴은 구조화된 동시성의 원칙을 따른다. 즉 새로운 코루틴은 코루틴의 수명을 제한하는 특정 CoroutineScope에서만 실행될 수 있다. 위의 예제 코드는 runBlocking이 해당 범위를 설정하며 이것이 *World!*가 1초 지연된 다음 출력되고 종료되는 이유이다.</p><p>실제 어플리케이션에서는 많은 코루틴을 실행하게 될 것이다. 구조화된 동시성은 손실이나 누수가 없는 것을 보장한다. 외부 범위는 모든 하위 코루틴이 완료될 때까지는 완료할 수 없다. 구조화된 동시성은 또한 코드 내부의 오류가 제대로 보고되고 손실되지 않는 것을 보장해준다.</p><h3 id="함수를-추출하여-리팩토링하기"><a class="markdownIt-Anchor" href="#함수를-추출하여-리팩토링하기"></a> 함수를 추출하여 리팩토링하기</h3><p><code>launch &#123;...&#125;</code> 내부의 코드 블록을 별도의 함수로 추출해보자. 이 코드에 IDE의 <em>Extract Function</em> 기능을 수행하면 아래와 같이 <code>suspend</code> 변경자 <sup>modifier</sup>가 있는 새 함수가 생성이 된다. 일시 중단 함수 <sup>suspending function</sup>는 일반 함수와 마찬가지로 코루틴 내부에서 사용할 수 있지만 추가 기능은 다른 일시 중단 함수<small>(<code>delay()</code>와 같은)</small>를 사용하여 코루틴의 실행을 중단시킬 수 있다는 것이다.</p><p align = 'center'><img width = '400' src = 'https://user-images.githubusercontent.com/39554623/120298097-ba6e2c00-c304-11eb-9271-b3e1f9efe246.png'></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123; <span class="comment">// this: CoroutineScope</span></span><br><span class="line">    launch &#123; doWorld() &#125;</span><br><span class="line">    println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is your first suspending function</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    delay(<span class="number">1000L</span>)</span><br><span class="line">    println(<span class="string">&quot;World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>추출한 함수의 <code>suspend</code> 변경자를 제거하면?</p></blockquote><p align = 'center'><img width = '700' src = 'https://user-images.githubusercontent.com/39554623/120296667-5139e900-c303-11eb-8cac-7727a7e86643.png'></p><p>추출한 함수의 <code>suspend</code> 변경자를 제거하면 <em>Suspend function ‘delay’ should be called only from a coroutine or another suspend function</em>라는 경고문이 뜬다. 즉, 일시 중단되는 함수인 <code>delay()</code>는 오직 코루틴이나 다른 일시 중단 함수로부터만 호출될 수 있다는 뜻이다.</p><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><ul><li>Kotlin Docs, Coroutines basics : <a href="https://kotlinlang.org/docs/coroutines-basics.html">https://kotlinlang.org/docs/coroutines-basics.html</a></li><li>새차원, 코틀린 코루틴 : <a href="https://youtu.be/14AGUuh8Bp8">https://youtu.be/14AGUuh8Bp8</a></li></ul><hr /><p><b id = "f1"><sup> 1 </sup></b> <a href="https://en.wikipedia.org/wiki/Coroutine">https://en.wikipedia.org/wiki/Coroutine</a> <a href="#a1"> ↩</a></p><p><b id = "f1"><sup> 2 </sup></b> <a href="https://developer.android.com/kotlin/coroutines?hl=ko">https://developer.android.com/kotlin/coroutines?hl=ko</a> <a href="#a1"> ↩</a></p><p><b id = "f1"><sup> 3 </sup></b> <a href="https://developer.android.com/codelabs/kotlin-coroutines#0">https://developer.android.com/codelabs/kotlin-coroutines#0</a> <a href="#a1"> ↩</a></p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/categories/Kotlin/Coroutine/">Coroutine</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Coroutine/">Coroutine</category>
      
      
      <comments>http://june0122.github.io/2021/06/03/coroutines-basics/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 데이터 바인딩과 MVVM</title>
      <link>http://june0122.github.io/2021/06/01/android-bnr-19/</link>
      <guid>http://june0122.github.io/2021/06/01/android-bnr-19/</guid>
      <pubDate>Mon, 31 May 2021 16:18:15 GMT</pubDate>
      
      <description>안드로이드의 &lt;b&gt;데이터 바인딩 &lt;sup&gt;data binding&lt;/sup&gt;&lt;/b&gt; 은 Android Jetpack 라이브러리 중 하나로 &lt;b&gt;UI 구성요소와 데이터를&lt;/b&gt; 프로그램적 방식으로 연결하지 않고, &lt;b&gt;선언적 형식으로 결합&lt;/b&gt;할 수 있게 해주는 지원 라이브러리를 말한다. 간단하게 말하면 XML파일에 data를 연결 &lt;sup&gt;binding&lt;/sup&gt;해서 사용하는 것을 의미한다.</description>
      
      
      
      <content:encoded><![CDATA[<p>앱에 포함된 여러 음원을 사용자가 조회하고 들을 수 있는 BeatBox라는 새로운 프로젝트를 통해 <a href="https://developer.android.com/topic/libraries/data-binding?hl=ko"><strong>데이터 바인딩 <sup>data binding</sup></strong></a> 이라는 Jetpack 아키텍처 컴포넌트 라이브러리를 사용하는 방법을 배운다. 그리고 데이터 바인딩을 사용해서 <strong>MVVM<small>(Model-View-View Model)</small></strong> 아키텍처를 구현하고 애셋 <sup>asset</sup> 시스템을 사용해서 음원 파일을 저장하는 방법도 알아본다.</p><h2 id="다른-아키텍처가-왜-필요할까"><a class="markdownIt-Anchor" href="#다른-아키텍처가-왜-필요할까"></a> 다른 아키텍처가 왜 필요할까?</h2><p>지금까지 작성했던 모든 앱은 간단한 형태의 MVC 아키텍쳐를 사용해 잘 작동하였다. 그런데 무슨 문제가 있길래 아키텍처를 변경해야 할까?</p><h4 id="장점"><a class="markdownIt-Anchor" href="#장점"></a> 장점</h4><p>MVC 아키텍처는 규모가 작고 간단한 앱에는 좋다. 새로운 기능을 추가하기 쉽고 앱의 동적인 부분을 쉽게 알 수 있을 뿐만 아니라 프로젝트의 초기 단계에 확고한 개발 기간을 만들어줘서 앱을 빨리 개발할 수 있다.</p><h4 id="단점"><a class="markdownIt-Anchor" href="#단점"></a> 단점</h4><p>그런데 프로젝트가 커지면 문제가 발생한다. MVC의 컨트롤러 역할인 액티비티나 프래그먼트의 규모가 커지면서 작성과 이해가 어려워져서 새로운 기능을 추가하거나 결함을 해결하는 데 시간이 오래 걸린다. 따라서 언젠가는 그런 컨트롤러들을 더 작은 부분으로 분할해야 한다.</p><h4 id="해결책"><a class="markdownIt-Anchor" href="#해결책"></a> 해결책</h4><p>그렇다면 어떻게 해야 할까? 점점 비대해지는 컨트롤러 클래스들이 하는 작업을 파악하여 하나의 거대한 클래스 대신 여러 클래스가 작업을 분담해 협업하게 하면 된다.</p><p>그런데 서로 다른 작업을 어떻게 분할해야 할까? 이에 대한 답은 MVVM과 같은 아키텍처를 사용하는 것이다. 단, 작업을 분할하는 것은 전적으로 프로그래머의 일이다.</p><p>MVVM에서는 뷰와 밀접한 콘트롤러 코드를 레이아웃 파일로 옮길 수 있다. 게다가 동적인<small>(변하는 데이터를 처리하는)</small> 컨트롤러 코드의 일부를 <strong>뷰 모델 클래스</strong>에 넣어서 앱의 테스트와 검증도 쉽게 할 수 있다. 단, 뷰모델 클래스를 어떤 규모로 할 것인지는 각자의 판단에 달렸다. 뷰모델 클래스가 커지면 작게 분할하면 된다.</p><h2 id="mvvm-뷰모델-vs-jetpack-viewmodel"><a class="markdownIt-Anchor" href="#mvvm-뷰모델-vs-jetpack-viewmodel"></a> MVVM 뷰모델 vs Jetpack ViewModel</h2><p>MVVM의 일부인 뷰모델은 <a href="https://june0122.github.io/2021/05/13/android-bnr-04/">여기</a>에서 다뤘던 <strong>Jetpack ViewModel<small>(AAC ViewModel)</small></strong> 클래스와 같은 것이 아니다. 따라서 혼동되지 않도록 Jetpack 클래스의 이름을 항상 <strong>ViewModel</strong>로 나타내고 MVVM 개념 관련해서는 '뷰모델’이라고 한다.</p><p>다시 정리하자면, Jetpack ViewModel은 액티비티나 프래그먼트의 생명주기에 걸쳐 데이터를 유지하고 관리하는 클래스다. 반면에 MVVM의 뷰모델은 개념적인 아키텍처의 일부분을 말한다. 뷰모델은 Jetpack ViewModel 클래스를 사용해서 구현할 수 있다. 그런데 곧 본문의 내용을 통해 알 수 있지만, ViewModel 클래스를 사용하지 않고도 구현할 수 있다.</p><h2 id="beatbox-프로젝트-준비-작업"><a class="markdownIt-Anchor" href="#beatbox-프로젝트-준비-작업"></a> BeatBox 프로젝트 준비 작업</h2><p>BeatBox 앱의 액티비티에서는 RecyclerView에 격자 <sup>grid</sup> 형태의 버튼을 보여줄 것이다. RecyclerView의 의존성을 build.gradle 파일에 추가하고 res/layout/activity_main.xml의 모든 XML을 삭제하고 아래와 같이 RecyclerView로 교체한다.</p><blockquote><p>MainActivity의 레이아웃 파일 변경하기 (res/layout/activity_main.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>이 상태에서 앱을 실행하면 빈화면만 나오는데, 이제부터 데이터 바인딩<small>(data binding)</small>을 구현해보자.</p><h2 id="단순-데이터-바인딩-구현하기"><a class="markdownIt-Anchor" href="#단순-데이터-바인딩-구현하기"></a> 단순 데이터 바인딩 구현하기</h2><p>RecyclerView를 코드와 연결해야 한다. 일반적으로 많이 하는 작업이지만, 이번에는 데이터 바인딩을 사용한다.</p><p>데이터 바인딩은 레이아웃을 사용할 때 몇 가지 장점을 제공한다. 곧 보겠지만 간단한 예로, <code>findViewById(...)</code> 를 호출하지 않고 뷰를 사용할 수 있게 해준다<small>(자동으로 뷰에 데이터를 넘겨줌)</small>. 진보된 데이터 바인딩의 사용법은 추후에 알아본다.</p><p>우선 데이터 바인딩을 활성화 하고 kotlin-kapt 플러그인을 적용하도록 build.gradle 파일에 추가한다.</p><blockquote><p>데이터 바인딩 활성화하기 (build.gradle)</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;kotlin-kapt&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin-kapt 플러그인을 적용하면 데이터 바인딩에서 코틀린의 애노테이션을 처리할 수 있다. 이것이 중요한 이유는 본문의 뒷부분에서 알 수 있다.</p><p>레이아웃 파일에서 데이터 바인딩을 사용하려면 &lt;layout&gt; 태그로 레이아웃 XML 전체를 둘러싸서 데이터 바인딩용 레이아웃 파일로 변경하면 된다. <em>activity_main.xml</em>의 파일 이름을 <em>main_activity.xml</em>로 변경하고 코드를 아래와 같이 수정한다<small>(자동으로 생성되는 바인딩 클래스의 이름의 가독성을 올리기 위해 이름 변경)</small>.</p><blockquote><p>데이터 바인딩용 레이아웃 파일로 변경하기 (res/layout/main_activity.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;layout&gt; 태그는 이 레이아웃에 데이터 바인딩을 한다는 것을 나타낸다. 레이아웃에 이 태그가 있으면 데이터 바인딩 라이브러리가 <strong>바인딩 클래스<small>(binding class)</small></strong> 를 자동으로 생성한다. 기본적으로 이 클래스 이름은 레이아웃 파일 이름 끝에 <strong>Binding</strong>이 붙은 채로 지정된다<small>(복합 단어이면 각 단어의 첫 자를 대문자로 사용하는 카멜 명명법이 사용됨)</small>.</p><p>따라서 여기서는 <strong>MainActivityBinding</strong>이라는 <em>main_activity.xml</em>의 바인딩 클래스가 자동으로 생성된다. 그리고 이 클래스가 데이터 바인딩에 사용되므로 <code>setContentView(Int)</code>를 사용해서 뷰를 인플레이트하는 대신에 <strong>MainActivityBinding</strong>의 인스턴스를 인플레이트한다.</p><p><strong>MainActivityBinding</strong>은 root 속성에 뷰 계층<small>(레이아웃 전체)</small>의 참조뿐 아니라 레이아웃 파일에 android:id가 지정된 각 자식 뷰의 참조도 갖는다. 따라서 여기서는 <strong>MainActivityBinding</strong> 클래스가 두 개의 참조,  ① 레이아웃 전체의 참조와 ② RecyclerView를 참조하는 recyclerView<small>(자동 생성됨)</small>을 가진다.</p><blockquote><p>바인딩 클래스</p></blockquote><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/120102817-cd0f2680-c187-11eb-89f3-bcda5c8fabef.jpeg'></p><p>그런데 이 레이아웃은 하나의 뷰만 갖고 있어서 두 개의 참조 모두 RecyclerView를 가리킨다.</p><p>이제는 바인딩 클래스를 사용할 수 있다. 우선 DataBindingUtil을 사용해서 MainActivityBinding 인스턴스를 인플레이트하도록 MainActivity의 <code>onCreate(...)</code>을 변경한다. 이때 다른 클래스처럼 MainActivityBinding도 import해야 한다.</p><blockquote><p>바인딩 클래스 인플레이트하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"><span class="comment">//        setContentView(R.layout.activity_main)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 바인딩 클래스 인플레이트</span></span><br><span class="line">        <span class="keyword">val</span> binding: MainActivityBinding =</span><br><span class="line">            DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.main_activity)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>바인딩 클래스가 생성되었다. 이제 RecyclerView를 구성한다.</p><blockquote><p>RecyclerView 구성하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> binding: MainActivityBinding =</span><br><span class="line">            DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.main_activity)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// RecyclerView 구성</span></span><br><span class="line">        binding.recyclerView.apply &#123;</span><br><span class="line">            layoutManager = GridLayoutManager(context, <span class="number">3</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RecyclerView</strong>가 한 행에 세 개의 격자를 가지며, 각 격자에는 아래의 버튼 레이아웃이 포함된다.</p><blockquote><p>음원 버튼 레이아웃 생성하기 (res/layout/list_item_sound.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;5dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:text</span>=<span class="string">&quot;Sound name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이렇게 하면 <strong>ListItemSoundBinding</strong> 클래스가 자동 생성된다. 그다음으로 이 클래스 인스턴스를 통해서 list_item_sound.xml과 연결되는 <strong>SoundHolder</strong>를 생성한다.</p><blockquote><p>SoundHolder 생성하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundHolder</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> binding: ListItemSoundBinding) : RecyclerView.ViewHolder(binding.root) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 <strong>SoundHolder</strong>에서는 자동 생성된 바인딩 클래스인 ListItemSoundBinding을 사용한다. 그다음으로 이 <strong>SoundHolder</strong>와 연결되는 어댑터를 생성한다.</p><blockquote><p>SoundAdapter 생성하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundHolder</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> binding: ListItemSoundBinding) : RecyclerView.ViewHolder(binding.root) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundAdapter</span></span>() : RecyclerView.Adapter&lt;SoundHolder&gt;() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: SoundHolder &#123;</span><br><span class="line">            <span class="keyword">val</span> binding = DataBindingUtil.inflate&lt;ListItemSoundBinding&gt;(</span><br><span class="line">                layoutInflater,</span><br><span class="line">                R.layout.list_item_sound,</span><br><span class="line">                parent,</span><br><span class="line">                <span class="literal">false</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> SoundHolder(binding) </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">SoundHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제는 <code>onCreate(...)</code>에서 <strong>SoundAdapter</strong>르 연결하면 된다.</p><blockquote><p>SoundAdapter 연결하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    <span class="keyword">val</span> binding: MainActivityBinding =</span><br><span class="line">        DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.main_activity)</span><br><span class="line">    binding.recyclerView.apply &#123;</span><br><span class="line">        layoutManager = GridLayoutManager(context, <span class="number">3</span>)</span><br><span class="line">        adapter = SoundAdapter() <span class="comment">// SoundAdapter 연결하기</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>드디어 데이터 바인딩을 사용해서 RecyclerView를 설정하였다. 아직은 앱을 실행해도 화면에 아무것도 나오지 않는다.</p><h2 id="에셋-가져오기"><a class="markdownIt-Anchor" href="#에셋-가져오기"></a> 에셋 가져오기</h2><p>다음으로 음원 파일들을 프로젝트에 추가해 런타임 시에 사용할 수 있게 한다. 이 작업은 리소스 시스템을 사용하는 대신 <strong>애셋 <sup>asset</sup></strong> 을 사용하는데, 애셋은 리소스 자체라고 생각하면 된다. 즉, 리소스처럼 APK에 포함되지만 시스템에서 특별한 구성<small>(디렉터리 구조화와 참조 생성 등)</small>을 하지 않은 리소스다.</p><p>애셋은 구성하는 시스템이 없으므로 원하는 대로 애셋의 이름을 지정하거나 폴더 구조로 구성할 수 있다. 그러나 단점도 있다. 참조를 하기 위한 구성이나 관리하는 시스템이 없으므로 장치의 화면 해상도, 언어, 방향 등이 달라지면 자동으로 대응할 수 없으며, 레이아웃 파일이나 다른 리소스에서 자동으로 사용할 수도 없다.</p><p>일반적으로는 리소스를 사용하는 것이 좋다. 그러나 본문의 BeatBox 앱처럼 코드에서 음원 파일들만 사용할 때는 애셋이 유리하다. 대부분의 게임 앱에서는 그래픽과 음원을 애셋으로 사용한다.</p><p>음원 애셋을 추가하기 위해 프로젝트에 아래 이미지와 같이 프로젝트 도구 창의 <strong>app</strong>에서 오른쪽 마우스 버튼을 클릭한 후 <code>New -&gt; Folder -&gt; Assets Folder</code>를 선택한다. 그리고 대화상자에서 'Change Folder Location’을 체크되지 않은 상태로 두고 'Target Source Set’을 <strong>main</strong>으로 선택한다.</p><p align = 'center'><img width = '700' src = 'https://user-images.githubusercontent.com/39554623/120105687-fedaba00-c194-11eb-8580-0aadf366d4de.png'></p><p><strong>Finish</strong> 버튼을 클릭하면 <strong>app</strong> 아래에 <strong>assets</strong> 폴더가 생성된다.</p><p>그다음에 app/assets 폴더에 서브 디렉터리로 'sample_sounds’를 생성한다. 이렇게 하면 <strong>assets</strong> 폴더에 있는 모든 파일이 이 앱과 함께 배포된다. 여기서는 편리하게 사용하려고 서브 폴더를 생성했지만, 리소스와는 달리 서브 폴더가 없어도 된다.</p><p>에셋 폴더의 음원 파일들은 <a href="https://github.com/Jpub/AndroidBNR4/tree/main/Ch19/BeatBox/app/src/main/assets/sample_sounds">이곳</a>에서 다운로드한다.</p><h2 id="에셋-사용하기"><a class="markdownIt-Anchor" href="#에셋-사용하기"></a> 에셋 사용하기</h2><p>BeatBox에서는 애셋 관리와 연관된 많은 일을 하게 된다. 즉, 애셋을 찾아 유지하고 관리하며 음원으로 재생하는 일이다. 이런 일을 하는 새로운 클래스인 <strong>BeatBox</strong>를 생성하고, 두 개의 상수와 로그 메시지에 사용할 태그 값과 애셋이 저장된 폴더 이름을 추가한다.</p><blockquote><p>새로운 BeatBox 클래스 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">&quot;BeatBox&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> SOUNDS_FOLDER = <span class="string">&quot;sample_sounds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>애셋은 <strong>AssetManager</strong> 클래스로 사용하며, <strong>AssetManager</strong> 인스턴스는 어떤 <strong>Context</strong>에서도 생성할 수 있다. BeatBox 생성자는 <strong>AssetManager</strong> 인스턴스 참조를 인자로 받는다.</p><blockquote><p>AssetManager 인스턴스 참조 받기 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">&quot;BeatBox&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> SOUNDS_FOLDER = <span class="string">&quot;sample_sounds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> assets: AssetManager) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>애셋을 사용할 때 어떤 <strong>Context</strong>를 사용할 것인지 고민할 필요는 없다. 어떤 상황이든 모든 Context의 AssetManager가 에셋과 연결될 수 있기 때문이다.</p><p>에셋에 있는 파일들의 내역을 얻을 때는 <code>list(String)</code> 함수를 사용한다. 그리고 이 함수를 사용해서 에셋의 파일 내역을 찾는 <code>loadSounds()</code> 함수를 추가한다.</p><blockquote><p>에셋 찾기 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> assets: AssetManager) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadSounds</span><span class="params">()</span></span> : List&lt;String&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> soundNames = assets.list(SOUNDS_FOLDER)!!</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Found <span class="subst">$&#123;soundNames.size&#125;</span> sounds&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> soundNames.asList()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Could not list assets&quot;</span>, e)</span><br><span class="line">            <span class="keyword">return</span> emptyList()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AssetManager.list(String)</code>에서는 인자로 전달된 폴더 경로에 포함된 파일들의 이름을 반환한다. 따라서 여기서는 sample_sounds 폴더 이름을 전달해 이 폴더에 넣었던 모든 .wav 파일의 이름을 알 수 있다.</p><p>지금까지 추가한 코드가 잘 작동하는지 BeatBox의 인스턴스를 생성하고 <code>loadSounds()</code> 함수를 호출하는 코드를 MainActivity에 추가해 확인한다.</p><blockquote><p>BeatBox 인스턴스 생성하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> beatBox: BeatBox</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        beatBox = BeatBox(assets)</span><br><span class="line">        beatBox.loadSounds()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">val</span> binding: MainActivityBinding =</span><br><span class="line">            DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.main_activity)</span><br><span class="line"></span><br><span class="line">        binding.recyclerView.apply &#123;</span><br><span class="line">            layoutManager = GridLayoutManager(context, <span class="number">3</span>)</span><br><span class="line">            adapter = SoundAdapter()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeatBox 앱을 실행하고 LogCat을 확인해보면, 현재 애셋 폴더에 22개의 .wav 파일이 있으므로 아래와 같은 메시지가 보인다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-05-31 01:29:02.299 26730-26730/com.june0122.beatbox D/BeatBox: Found 22 sounds</span><br></pre></td></tr></table></figure><h2 id="애셋-사용-코드-추가하기"><a class="markdownIt-Anchor" href="#애셋-사용-코드-추가하기"></a> 애셋 사용 코드 추가하기</h2><p>애셋 파일들의 이름을 갖게 되었으니, 이 이름들을 각 버튼에 설정해 사용자에게 보여줄 수 있다. 궁극적으로는 음원 파일을 재생하므로, 파일 이름과 사용자가 볼 수 있는 이름 및 해당 음원 관련 정보를 유지하고 관리하는 객체가 필요하다.</p><p>이 모든 것을 갖는 <strong>Sound</strong> 클래스를 아래와 같이 생성한다.</p><blockquote><p>Sound 클래스 생성하기 (Sound.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> WAV = <span class="string">&quot;.wav&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sound</span></span>(<span class="keyword">val</span> assetPath: String) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = assetPath.split(<span class="string">&quot;/&quot;</span>).last().removeSuffix(WAV)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sound 클래스의 생성자에서는 화면에 보여줄 음원 파일의 이름을 만드는 일을 한다. 즉, <code>String.split(String).last()</code>를 사용해서 경로 문자열 맨 끝에 있는 파일 이름을 얻고, <code>String.removeSuffix(String)</code>을 사용해서 확장자인 .wav를 제거한다.</p><p>그다음으로 <code>BeatBox.loadSounds()</code> 함수에서 Sound 인스턴스들의 List를 생성한다.</p><blockquote><p>Sound 객체를 저장하는 List 생성하기 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> assets: AssetManager) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sounds: List&lt;Sound&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        sounds = loadSounds()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  fun loadSounds() : List&lt;String&gt; &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadSounds</span><span class="params">()</span></span>: List&lt;Sound&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> soundNames: Array&lt;String&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            soundNames = assets.list(SOUNDS_FOLDER)!!</span><br><span class="line"><span class="comment">//            val soundNames = assets.list(SOUNDS_FOLDER)!!</span></span><br><span class="line"><span class="comment">//            Log.d(TAG, &quot;Found $&#123;soundNames.size&#125; sounds&quot;)</span></span><br><span class="line"><span class="comment">//            return soundNames.asList()</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Could not list assets&quot;</span>, e)</span><br><span class="line">            <span class="keyword">return</span> emptyList()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> sounds = mutableListOf&lt;Sound&gt;()</span><br><span class="line">        soundNames.forEach &#123; fileName -&gt;</span><br><span class="line">            <span class="keyword">val</span> assetPath = <span class="string">&quot;<span class="variable">$SOUNDS_FOLDER</span>/<span class="variable">$fileName</span>&quot;</span></span><br><span class="line">            <span class="keyword">val</span> sound = Sound(assetPath)</span><br><span class="line">            sounds.add(sound)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sounds</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음으로 SoundAdapter를 Sound 인스턴스가 저장된 List에 연결한다. 우선 <code>getItemCount()</code> 함수에서 sounds.size를 반환하게 변경한다<small>(sounds.size는 sounds List에 저장된 음원 파일의 개수를 나타냄)</small>.</p><blockquote><p>음원 파일의 개수 알아내기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundAdapter</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> sounds: List&lt;Sound&gt;) : RecyclerView.Adapter&lt;SoundHolder&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: SoundHolder &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">SoundHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> = sounds.size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그다음에 <code>onCreate(...)</code>에서 BeatBox의 Sound 인스턴스 List를 어댑터 인자로 전달한다.</p><blockquote><p>Sound 인스턴스를 저장한 List를 어댑터에 전달하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    binding.recyclerView.apply &#123;</span><br><span class="line">        layoutManager = GridLayoutManager(context, <span class="number">3</span>)</span><br><span class="line">        adapter = SoundAdapter(beatBox.sounds)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마지막으로 <code>onCreate(...)</code>에서 <code>loadSounds()</code> 함수 호출 코드를 삭제한다.</p><blockquote><p><code>loadSounds()</code> 함수 호출 코드 삭제하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    beatBox = BeatBox(assets)</span><br><span class="line"><span class="comment">//  beatBox.loadSounds()</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제는 BeatBox의 init 블록 외부에서 <code>BeatBox.loadSounds()</code> 함수가 더 이상 호출되지 않는다. 따라서 이 함수의 가시성 <sup>visibility</sup>을 public으로 지정할 필요가 없으므로 private로 변경한다.</p><blockquote><p><code>BeatBox.loadSounds()</code>의 가시성을 private로 변경 (BeatBox.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeatBox</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> assets: AssetManager) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadSounds</span><span class="params">()</span></span>: List&lt;Sound&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앱을 실행해보면 격자 형태로 나타난 버튼들을 볼 수 있다.</p><blockquote><p>비어 있는 버튼들</p></blockquote><p align = 'center'><img width = '200' src = 'https://user-images.githubusercontent.com/39554623/120112870-b8945380-c1b2-11eb-989d-21247299a776.png'></p><p>이제 각 버튼에 음원 이름을 보여주기 위해 데이터 바인딩을 사용해보자.</p><h2 id="데이터-바인딩하기"><a class="markdownIt-Anchor" href="#데이터-바인딩하기"></a> 데이터 바인딩하기</h2><p>데이터 바인딩을 사용할 때는 레이아웃 파일에 데이터를 가진 객체를 선언할 수 있다. 앞의 <a href="https://github.com/june0122/criminal-intent-android/blob/master/app/src/main/java/com/june0122/criminalintent/Crime.kt">다른 프로젝트</a>에서 알아보았던 범죄 객체 <sup>Crime</sup>를 예로 들면 다음과 같다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;crime&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.june0122.criminalintent.Crime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이렇게 하면 다음과 같이 레이아웃 파일에서 해당 데이터 객체의 값을 <strong>바인딩 연산자 <sup>binding mustache</sup></strong> 인 <code>@&#123;&#125;</code>를 사용해서 바로 참조할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_item_crime_solved_check_box&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_alignParentRight</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:checked</span>=<span class="string">&quot;@&#123;crime.isSolved()&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;4dp&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>데이터 바인딩을 객체 다이어그램으로 나타내면 다음과 같다.</p><blockquote><p>레이아웃과 코틀린 객체 간의 데이터 바인딩</p></blockquote><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120102816-cd0f2680-c187-11eb-8972-05d2bc44b5a4.jpeg'></p><p>여기서는 음원 이름을 각 버튼에 넣는다. 이때 데이터 바인딩을 사용해서 list_item_sound.xml 레이아웃 파일에 <strong>Sound</strong> 객체를 직접 바인딩한다.</p><blockquote><p>list_item_sound.xml 레이아웃과 Sound 객체의 바인딩</p></blockquote><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120102815-cc769000-c187-11eb-92d7-f95c06a2a3a1.jpeg'></p><p>그런데 이렇게 하면 아키텍처 관점에서 문제가 생긴다. 아래의 MVC 모델을 보자.</p><blockquote><p>문제가 있는 MVC 아키텍처</p></blockquote><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120102813-cb456300-c187-11eb-9202-5ffebb94e732.jpeg'></p><p>대부분의 아키텍처에서 하나의 클래스는 <strong>한 가지 책임 <sup>SRP, single responsibility principle</sup></strong> 만을 가지게 하는 것이 기본 원리다. MVC도 그렇다. 즉, 모델은 앱이 작동하는 방법을 나타내며, 컨트롤러는 모델과 뷰를 중재하면서 앱의 데이터를 보여주는 방법을 결정하고, 뷰는 화면에 데이터를 보여준다.</p><p>위와 같이 데이터 바인딩을 사용하면 각 아키턱처 요소의 역할 분담이 분명하게 이루어지지 않는다. 보여줄 뷰의 데이터를 준비하는 코드를 <strong>Sound</strong> 모델 객체가 갖게 되어 컨트롤러 역할을 하기 때문이다. 따라서 Sound.kt에는 앱이 작동하는 방법을 나타내는 코드와 보여줄 뷰의 데이터를 준비하는 코드가 뒤섞이게 된다.</p><p>그러므로 데이터 바인딩을 제대로 사용하려면 뷰모델이라는 새로운 객체가 필요하다. 그리고 이 객체는 보여줄 뷰의 데이터를 준비하는 방법을 결정하는 책임을 갖는다.</p><blockquote><p>모델-뷰-뷰모델</p></blockquote><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/120102810-c97b9f80-c187-11eb-82dd-896e37523c78.jpeg'></p><p>이런 아키텍처를 <strong>MVVM</strong>이라고 하며, 보여줄 데이터를 형식화하기 위해 MVC의 컨트롤러 클래스가 런타임 시에 했던 대부분의 일을 뷰모델이 담당한다. 즉, 레이아웃에서 위젯들을 데이터와 바인딩하던 일을 뷰모델이 하게 된다. 그리고 컨트롤러<small>(액티비티나 프래그먼트)</small>는 데이터 바인딩과 뷰모델을 초기화하고 연결하는 일을 맞게 된다.</p><h3 id="뷰모델-생성하기"><a class="markdownIt-Anchor" href="#뷰모델-생성하기"></a> 뷰모델 생성하기</h3><p>뷰모델인 <strong>SoundViewModel</strong> 클래스를 생성하고, 사용할 Sound 객체 참조를 갖는 sound 속성을 추가한다.</p><blockquote><p>SoundViewModel 생성하기 (SoundViewModel.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModel</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sound: Sound? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">set</span>(sound) &#123;</span><br><span class="line">            field = sound</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그리고 각 버튼에 보여줄 제목을 갖는 title 속성도 추가한다.</p><blockquote><p>버튼 제목을 갖는 속성 추가하기 (SoundViewModel.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sound: Sound? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">set</span>(sound) &#123;</span><br><span class="line">            field = sound</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> title: String?</span><br><span class="line">        <span class="keyword">get</span>() = sound?.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="뷰모델에-바인딩하기"><a class="markdownIt-Anchor" href="#뷰모델에-바인딩하기"></a> 뷰모델에 바인딩하기</h3><p>다음으로 뷰모델을 레이아웃 파일과 연결한다. 우선 레이아웃 파일에 속성을 선언한다.</p><blockquote><p>뷰모델을 바인딩하는 속성 선언하기 (res/layout/list_item_sound.xml)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;layout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">data</span>&gt;</span><br><span class="line">        &lt;variable</span><br><span class="line">            name=<span class="string">&quot;viewModel&quot;</span></span><br><span class="line">            type=<span class="string">&quot;com.june0122.beatbox.SoundViewModel&quot;</span> /&gt;</span><br><span class="line">    &lt;/<span class="keyword">data</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;120dp&quot;</span></span><br><span class="line">        android:layout_marginStart=<span class="string">&quot;5dp&quot;</span></span><br><span class="line">        android:layout_marginEnd=<span class="string">&quot;5dp&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;@&#123;viewModel.title&#125;&quot;</span></span><br><span class="line">        tools:text=<span class="string">&quot;Sound name&quot;</span> /&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure><p>바인딩 연산자인 <code>@&#123;&#125;</code> 내부에서는 간단한 코틀린 표현식을 사용할 수 있다. 예를 들어, 함수 연쇄 호출이나 수식 등이다.</p><p>RecyclerView의 각 항목<small>(여기서는 버튼)</small> 데이터를 갖는 SoundHolder에 다음 코드를 추가한다. 우선 SoundViewModel 인스턴스를 생성하고 이것의 참조를 바인딩 클래스인 ListItemSoundBinding의 viewModel 속성에 설정한다. 그리고 바인딩 함수인 <code>bind(...)</code>를 추가한다.</p><blockquote><p>뷰모델과 바인딩하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundHolder</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> binding: ListItemSoundBinding) : RecyclerView.ViewHolder(binding.root) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        binding.viewModel = SoundViewModel()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(sound: <span class="type">Sound</span>)</span></span> &#123;</span><br><span class="line">        binding.apply &#123; </span><br><span class="line">            viewModel?.sound = sound</span><br><span class="line">            executePendingBindings()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 init 초기화 블록에서 뷰모델 인스턴스를 생성하고 바인딩 클래스의 ViewModel 속성을 초기화한다. 그리고 바인딩 함수인 <code>bind(Sound)</code>에서는 viewModel 속성을 변경한다.</p><p>보통은 <code>executePendingBindings()</code>를 호출할 필요 없다. 그러나 이 앱에서는 RecyclerView에 포함된 바인딩 데이터를 변경해야 하며, RecyclerView는 빠른 속도로 뷰를 변경해야 한다. 따라서 RecyclerView에 포함된 레이아웃을 즉각 변경하도록 <code>executePendingBindings()</code>를 호출한 것이다. 이렇게 함으로써 RecyclerView와 RecyclerView.Adapter가 즉시 동기화되어 화면에서 RecyclerView를 스크롤할 때 훨씬 매끄럽게 보인다.</p><p>마지막으로 <code>onBindViewHolder(...)</code>에서 <code>bind(Sound)</code> 함수를 호출하여 뷰모델의 각 Sound 인스턴스를 SoundHolder 인스턴스와 연결한다.</p><blockquote><p><code>bind(Sound)</code> 함수 호출하기 (MainActivity.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundAdapter</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> sounds: List&lt;Sound&gt;) : RecyclerView.Adapter&lt;SoundHolder&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: SoundHolder &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">SoundHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> sound = sounds[position]</span><br><span class="line">        holder.bind(sound)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> = sounds.size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앱을 다시 실행하면 이제는 모든 버튼의 제목이 나타난다.</p><blockquote><p>제목이 있는 버튼들</p></blockquote><p align = 'center'><img width = '200' src = 'https://user-images.githubusercontent.com/39554623/120133878-e3f55d80-c207-11eb-9b69-9984ee03110e.png'></p><h3 id="관찰-가능한-데이터"><a class="markdownIt-Anchor" href="#관찰-가능한-데이터"></a> 관찰 가능한 데이터</h3><p>이제는 모든 게 잘되는 것처럼 보인다. 그러나 이 코드에는 문제가 있다. 앱을 실행하여 가로 방향으로 회전해서 스크롤해보자.</p><blockquote><p>이전에 본 데이터가 또다시 나타난다</p></blockquote><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/120134432-09369b80-c209-11eb-8d8d-0f440061238e.gif'></p><p>위에서 '65_CJIPIE’가 보였었는데 아래로 스크롤하니 또다시 '65_CJIPIE’가 보인다. 위아래로 스크롤을 해보면 계속해서 다른 음원 파일의 제목이 보일 것이다.</p><p>왜 이런 것일까? 이는 레이아웃이 <code>SoundHolder.bind(sound)</code> 함수 내부에서 SoundViewModel의 Sound 객체를 변경했음을 알 수 있는 방법이 없기 때문이다. MVVM 아키텍처에서는 바로 이 방법을 찾는 것이 중요하다.</p><p>따라서 바인딩 데이터가 변경되면 뷰모델이 레이아웃 파일과 소통하게 만드는 것이 다음으로 할 일이다. 이렇게 하려면 뷰모델에서 데이터 바인딩의 <strong>Observable</strong> 인터페이스를 구현해야 한다. 이 인터페이스를 사용하면 바인딩 클래스가 뷰모델에 리스너를 설정할 수 있다. 따라서 바인딩 데이터가 변경되면 자동으로 콜백 호출을 받을 수 있다.</p><p>그런데 <strong>Observable</strong> 인터페이스의 모든 함수를 구현할 필요는 없으므로 여기서는 데이터 바인딩의 <strong>BaseObservable</strong> 클래스를 사용하여 다음과 같이 구현한다<small>(이 클래스는 기본적으로 Observable 클래스를 구현하고 있다.)</small>.</p><ol><li>뷰모델인 <strong>SoundViewModel</strong>을 <strong>BaseObservable</strong>의 서브 클래스로 선언한다.</li><li><strong>SoundViewModel</strong>의 바인딩되는 속성에 <code>@Bindable</code> 애노테이션을 지정한다.</li><li>바인딩되는 속성의 값이 변경될 때마다 <code>notifyChange()</code> 또는 <code>notifyPropertyChanged(Int)</code>를 호출한다.</li></ol><p>여기서는 SoundViewModel에 약간의 코드만 추가하면 된다. SoundViewModel이 관찰 가능하게<small>(observable)</small> 변경한다.</p><blockquote><p>뷰모델이 관찰 가능하게 만들기 (SoundViewModel.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.databinding.BaseObservable</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.Bindable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModel</span> : <span class="type">BaseObservable</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sound: Sound? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">set</span>(sound) &#123;</span><br><span class="line">            field = sound</span><br><span class="line">            notifyChange()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@get:Bindable</span></span><br><span class="line">    <span class="keyword">val</span> title: String?</span><br><span class="line">        <span class="keyword">get</span>() = sound?.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>notifyChange()</code>를 호출하면 데이터 객체<small>(여기서는 Sound)</small>의 모든 바인딩 속성값이 변경되었음을 바인딩 클래스<small>(여기서는 ListItemSoundBinding)</small>에 알린다. 따라서 sound 속성의 값<small>(Sound 인스턴스 참조)</small>이 설정되면 list_item_sound.xml의 바인딩 클래스인 ListItemSoundBinding이 알림을 받게 되어 list_item_sound.xml의 버튼 제목이 변경된다<small>(<code>Button.setText(String)</code>이 호출됨)</small>.</p><p>앞에서 얘기했던 또 다른 함수인 <code>notifyPropertyChanged(Int)</code>도 <code>notifyChange()</code>와 같은 기능을 수행한다. 그러나 모든 바인딩 속성이 아닌 특정 바인딩 속성의 값이 변경되었음을 알려준다는 점이 다르다. 예를 들어, <code>notifyPropertyChanged(BR.title)</code>의 경우는 <code>title 속성값만 변경되었음</code>을 나타낸다.</p><p>여기서 <strong>BR.title</strong>은 데이터 바인딩 라이브러리가 생성한 상수다. 클래스 이름인 <strong>BR</strong>은 'binding resource’의 단축어다. <strong>BR</strong> 상수는 <code>@Bindable</code> 애노테이션이 지정된 각 속성에 대해 해당 속성과 같은 이름으로 생성된다.</p><blockquote><p>BR 상수 예시</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@get:Bindable</span> <span class="keyword">val</span> title: String    <span class="comment">// BR.title 상수가 생성됨</span></span><br><span class="line"><span class="meta">@get:Bindable</span> <span class="keyword">val</span> volumn: <span class="built_in">Int</span>      <span class="comment">// BR.volumn 상수가 생성됨</span></span><br><span class="line"><span class="meta">@get:Bindable</span> <span class="keyword">val</span> etcetera: String <span class="comment">// BR.etcetera 상수가 생성됨</span></span><br></pre></td></tr></table></figure><p><strong>Observable</strong> 인터페이스를 사용하는 것이 <a href="https://june0122.github.io/2021/05/24/android-bnr-11/">데이터베이스와 Room 라이브러리</a>에서 기술한 <strong>LiveData</strong>를 사용하는 것과 유사하다고 생각할 수 있다. 실제로 <strong>Observable</strong> 인터페이스 대신 <strong>LiveData</strong>를 데이터 바인딩에 사용할 수 있다. 이 내용은 <a id = "a1"><a href="#f1">궁금증 해소 : LiveData와 데이터 바인딩</a></a>에서 설명한다.</p><p>앱을 다시 실행해보면 이번에는 가로나 세로, 어느 방향에서 스크롤해도 정상적으로 작동한다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/120136860-12763700-c20e-11eb-84b8-1b49d5e5b015.gif'></p><h2 id="궁금증-해소-️-데이터-바인딩-추가로-알아보기"><a class="markdownIt-Anchor" href="#궁금증-해소-️-데이터-바인딩-추가로-알아보기"></a> 궁금증 해소 💁🏻‍♂️ : 데이터 바인딩 추가로 알아보기</h2><h3 id="람다식"><a class="markdownIt-Anchor" href="#람다식"></a> 람다식</h3><p>레이아웃 파일에 지정한 바인딩 연산자인 <code>@&#123;&#125;</code> 내부에는 간단한 코틀린 표현식은 물론이고 **람다식 <sup>lambda expression</sup>**도 사용할 수 있다. 예를 들면 다음과 같다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;@&#123;viewModel.title&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;(view) -&gt; viewModel.onButtonClick()&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">&quot;Sound name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>자바 8의 람다식처럼 이것은 리스너 인터페이스의 구현 코드로 변환한다. 단, 여기처럼 정확한 문법을 사용해야 한다. 즉, 매개변수는 반드시 괄호로 둘러싸야 하고 <code>-&gt;</code> 오른쪽에는 하나의 표현식만 포함할 수 있다.</p><p>또한, 자바의 람다식과는 다르게 람다식 매개변수를 생략할 수도 있다. 따라서 다음과 같이 해도 된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:onClick=&quot;@&#123;() -&gt; viewModel.onButtonClick()&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="더-편리한-문법"><a class="markdownIt-Anchor" href="#더-편리한-문법"></a> 더 편리한 문법</h3><p>데이터 바인딩에는 큰따옴표 안에 백틱 <code>`</code> 기호도 사용할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=&quot;@&#123;`File name: ` + viewModel.title&#125;&quot;</span><br></pre></td></tr></table></figure><p>여기서 <code>`File name`</code>은 **“File name”**과 같은 의미다. 또한, 데이터 바인딩 표현식에는 null 처리 연산자를 넣을 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=&quot;@&#123;`File name: ` + viewModel.title ?? `No file`&#125;&quot;</span><br></pre></td></tr></table></figure><p>여기서 title 값이 null이면 <code>??</code> 연산자가 null 대신 'No file’을 결괏값으로 산출한다.</p><p>또한, 데이터 바인딩 표현식에는 null 값을 자동으로 처리한다. 심지어는 앞의 코드에서 viewModel이 null일지라도 앱이 중단되지 않게 데이터 바인딩에서 null 값 여부를 검사하고 조치한다. 따라서 viewModel이 null일 때는 viewModel.title의 결과를 &quot;null&quot;로 반환한다.</p><h3 id="bindingadapter"><a class="markdownIt-Anchor" href="#bindingadapter"></a> BindingAdapter</h3><p>기본적으로 데이터 바인딩에서는 바인딩 표현식을 레이아웃 속성의 게터/세터 호출로 변환한다. 예를 들어, 다음 표현식은 text 속성의 세터인 <code>setText(String)</code> 함수 호출로 변환되어 처리된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=&quot;@&#123;`File name: ` + viewModel.title ?? `No file`&#125;&quot;</span><br></pre></td></tr></table></figure><p>그러나 이 정도로는 충분치 않고 특정 속성에 나름의 추가 처리가 필요할 때가 있다. 이때는 다음과 같이 <strong>BindingAdapter</strong>를 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">&quot;app:soundName&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">bindAssetSound</span><span class="params">(button: <span class="type">Button</span>, assetFileName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉, 프로젝트의 어디서든 파일 수준 함수를 생성하고 <code>@BindingAdapter</code> 애노테이션을 지정하면 된다. 그리고 바인딩할 속성 이름을 <code>@BindingAdapter</code> 애노테이션의 인자로 전달한다<small>(여기서는 app:soundName)</small>. 그다음에 <code>@BindingAdapter</code> 애노테이션이 적용되는 <strong>View</strong>를 해당 함수의 첫 번째 인자로 전달한다.</p><p>앞의 예에서는 app:soundName 속성을 갖는 <strong>Button</strong>을 데이터 바인딩이 접할 때마다 <code>bindAssetSound(...)</code> 함수를 호출한다. 이때 해당 <strong>Button</strong>과 <strong>바인딩 표현식 <sup>binding expression</sup></strong> 의 결과가 인자로 전달된다<small>(여기서는 나타나지 않았지만, 바인딩 표현식은 app:soundName 속성에 지정되어 있다.)</small>.</p><p><strong>View</strong>나 <strong>ViewGroup</strong> 같은 더 일반화된 뷰의 <strong>BindingAdapter</strong>도 생성할 수 있다. 이때 <strong>BindingAdapter</strong>가 해당 <strong>View</strong>와 이것의 모든 서브 클래스에 적용된다.</p><p>예를 들어, Boolean 값을 기준으로 View<small>(와 이것의 모든 서브 클래스 뷰)</small>의 가시성을 설정하는 app:isGone 속성을 정의할 때는 다음과 같이 한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">&quot;app:isGone&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">bindIsGone</span><span class="params">(view: <span class="type">View</span>, isGone: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    view.visibility = <span class="keyword">if</span> (isGone) View.GONE <span class="keyword">else</span> View.VISIBLE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 View가 <code>bindIsGone(...)</code>의 첫 번째 인자이므로 isGone 속성은 app 모듈의 View와 이것의 모든 서브 클래스 View에 대해 사용할 수 있다. 예를 들면 Button, TextView, LinearLayout 등에서 사용 가능하다.</p><p>안드로이드 표준 라이브러리의 위젯에는 이미 바인딩 어댑터가 정의되어 있다. 예를 들어, TextView에는 TextViewBindingAdapter가 정의되어 있어서 TextView의 속성들에 데이터 바인딩을 할 수 있다<small>(TextViewBindingAdapter는 androidx.databinding.adapters 패키지에 있다)</small>.</p><h2 id="b-id-f1궁금증-해소-️-livedata와-데이터-바인딩b"><a class="markdownIt-Anchor" href="#b-id-f1궁금증-해소-️-livedata와-데이터-바인딩b"></a> <b id = "f1">궁금증 해소 💁🏻‍♂️ : LiveData와 데이터 바인딩</b>  <a href="#a1"> ↩</a></h2><p><strong>LiveData</strong>와 데이터 바인딩은 데이터가 변경되는지 관찰하면서 변경될 때 반응하는 방법을 제공한다는 면에서 서로 유사하다. 실제로 <strong>LiveData</strong>와 데이터 바인딩을 같이 사용할 수 있다. 다음 코드에서는 <strong>Observable</strong> 대신 <strong>LiveData</strong>를 사용해서 title 속성을 SoundViewModel에 바인딩했다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class SoundViewModel : BaseObservable() &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> title: MutableLiveData&lt;String?&gt; = MutableLiveData()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> sound: Sound? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">set</span>(sound) &#123;</span><br><span class="line">            field = sound</span><br><span class="line"><span class="comment">//            notifyChange()</span></span><br><span class="line">            title.postValue(sound?.name)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @get:Bindable</span></span><br><span class="line"><span class="comment">//    val title: String?</span></span><br><span class="line"><span class="comment">//        get() = sound?.name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이때는 SoundViewModel이 BaseObservable의 서브 클래스가 되지 않아도 되며, <code>@Bindable</code> 애노테이션도 지정하지 않아도 된다. LiveData는 자신의 알림 매커니즘을 갖고 있기 때문이다. 그러나 <a href="https://june0122.github.io/2021/05/24/android-bnr-11/">데이터베이스와 Room 라이브러리</a>에서 설명한듯이 LiveData는 LifeCycleOwner가 필요하므로 여기서는 title 속성을 관찰할 때 사용할 LifeCycleOwner를 데이터 바인딩 프레임워크에 알려주어야 한다. 따라서 바인딩 객체가 생성된 후 lifeCycleOwner 속성을 설정하기 위해 SoundAdapter를 변경해야 한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SoundAdapter</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> sounds: List&lt;Sound&gt;) : RecyclerView.Adapter&lt;SoundHolder&gt;() &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: SoundHolder &#123;</span><br><span class="line">        <span class="keyword">val</span> binding = DataBindingUtil.inflate&lt;ListItemSoundBinding&gt;(</span><br><span class="line">            layoutInflater,</span><br><span class="line">            R.layout.list_item_sound,</span><br><span class="line">            parent,</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        binding.lifecycleOwner = <span class="keyword">this</span><span class="symbol">@MainActivity</span> <span class="comment">// lifeCycleOwner 속성 설정</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> SoundHolder(binding)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 MainActivity를 LifeCycleOwner로 설정한다. 따라서 속성 이름인 title만 바뀌지 않는다면 뷰를 변경할 필요가 없다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Android/">Android</category>
      
      <category domain="http://june0122.github.io/categories/Android/Guide/">Guide</category>
      
      
      <category domain="http://june0122.github.io/tags/Android/">Android</category>
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Data-Binding/">Data Binding</category>
      
      <category domain="http://june0122.github.io/tags/MVVM/">MVVM</category>
      
      
      <comments>http://june0122.github.io/2021/06/01/android-bnr-19/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 암시적 인텐트를 이용한 촬영 및 저장</title>
      <link>http://june0122.github.io/2021/05/31/android-bnr-16/</link>
      <guid>http://june0122.github.io/2021/05/31/android-bnr-16/</guid>
      <pubDate>Sun, 30 May 2021 17:07:40 GMT</pubDate>
      
      <description>&lt;b&gt;암시적 인텐트&lt;/b&gt;를 사용해 사용자의 카메라 앱을 실행시켜서 사진을 찍고, 데이터에 추가로 저장하고 사용해보도록 한다. 사진을 어디에 저장하고 저장된 사진을 어떻게 보여주어야 할지도 본문에서 알아보도록 한다. 이를 위해 Context 클래스의 파일과 디렉터리 함수, File Provider, Bitmap 등의 개념도 함께 알아본다.</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://june0122.github.io/2021/05/30/android-bnr-15/">암시적 인텐트</a>를 사용해 사용자의 카메라 앱을 실행시켜서 사진을 찍고, 데이터에 추가로 저장하고 사용해보도록 한다. 사진을 어디에 저장하고 저장된 사진을 어떻게 보여주어야 할지도 본문에서 알아보도록 한다.</p><h2 id="사진을-위한-장소"><a class="markdownIt-Anchor" href="#사진을-위한-장소"></a> 사진을 위한 장소</h2><p>먼저 상세 내역 화면에 사진을 보여줄 곳을 만든다.</p><blockquote><p>새로운 사용자 인터페이스</p></blockquote><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/120074276-0e93c900-c0d7-11eb-8769-7e40c845693d.png'></p><h2 id="파일-스토리지"><a class="markdownIt-Anchor" href="#파일-스토리지"></a> 파일 스토리지</h2><p>사진 파일은 화면이 아닌 다른 곳에 저장해야 한다. 그런데 실제 크기의 사진은 용량이 너무 커서 SQLite 데이터베이스에 넣기도 어렵다. 따라서 장치의 파일 시스템에 저장해야 한다.</p><p>다행스럽게도 이런 파일은 장치의 개인 스토리지 영역에 저장할 수 있다. SQLite 데이터베이스도 마찬가지다. <code>Context.getFileStreamPath(String)</code>이나 <code>Context.getFilesDir()</code> 같은 함수를 사용하면 일반 파일도 개인 스토리지 영역에 저장할 수 있다<small>(SQLite 데이터베이스가 저장된 databases 서브 폴더와 인접한 다른 서브 폴더에 저장된다)</small>.</p><p><strong>Context</strong> 클래스에 있는 기본적인 파일과 디렉터리 함수는 다음과 같다.</p><p><code>getFilesDir(): File</code></p><ul><li>앱 전용 파일들의 디렉터리 핸들을 반환한다.</li></ul><p><code>openFileInput(name: String): FileInputStream</code></p><ul><li>데이터를 읽기 위해 파일 디렉터리의 기존 파일을 연다.</li></ul><p><code>openFileOutput(name: String, mode: Int): FileOutputStream</code></p><ul><li>데이터를 쓰기 위해 파일 디렉터리의 파일을 연다(생성도 한다).</li></ul><p><code>getDir(name: String, mode: Int): File</code></p><ul><li>파일 디렉터리 내부의 서브 디렉터리를 알아낸다.</li></ul><p><code>fileList(...): Array&lt;String&gt;</code></p><ul><li>파일 디렉터리의 파일 이름들을 알아낸다. 예를 들면, <code>openFileInput(String)</code>과 함께 사용한다.</li></ul><p><code>getCacheDir(): File</code></p><ul><li>캐시 파일 저장에 사용할 수 있는 디렉터리의 핸들을 반환한다. 단, 이 디렉터리는 가능한 한 작은 용량을 사용하도록 주의해야 한다.</li></ul><p>그런데 문제가 있다. 개인 스토리지 영역의 파일들은 <strong>이 앱에서만</strong> 읽거나 쓸 수 있기 때문이다. 물론, 다른 앱에서 해당 파일들을 사용하지 않는다면 앞의 함수들만 사용해도 충분하다.</p><p>그러나 다른 애플리케이션이 파일에 써야 한다면 앞의 함수들로는 충분하지 않다. 본문의 CriminalIntent 앱의 경우가 바로 그렇다. 왜냐하면 외부의 카메라 앱에서 개인 스토리지 영역의 파일로 사진을 저장해야 하기 때문이다.</p><p>이때 Context.MODE_WORLD_READABLE 플래그를 <code>openFileOutput(String, Int)</code> 함수에 전달해서 쓸 수 있지만, 이제는 사용 금지되어 있어서 새로운 안드로이드 버전의 장치에서도 잘 된다는 보장이 없다. 그리고 이전에는 공용의 외부 스토리지를 사용해서 파일을 전송할 수 있었지만, 보안상의 이유로 최근 버전의 안드로이드에서는 금지되었다.</p><p>따라서 다른 앱과 파일을 공유하거나 받으려면 <strong>ContentProvider</strong>를 통해서 해야 한다. <strong>ContentProvider</strong>로 파일을 콘텐츠 URI로 다른 앱에 노출하면 다른 앱에서는 해당 URI로부터 파일을 다운로드하거나 쓸 수 있다. 그리고 제어할 수도 있으며, 읽거나 쓰는 것을 거부할 수 있다.</p><h3 id="fileprovider-사용하기"><a class="markdownIt-Anchor" href="#fileprovider-사용하기"></a> FileProvider 사용하기</h3><p>다른 앱으로부터 파일을 받는 것이 전부라면 굳이 <strong>ContentProvider</strong> 전체를 구현할 필요 없다. 이런 용도로 사용하라고 구글에서는 <strong>FileProvider</strong>라는 편의 클래스를 제공한다.</p><p>ContentProvider로 FileProvider를 선언하기 위해 매니페스트 파일에 콘텐츠 제공자 선언을 추가한다.</p><blockquote><p>FileProvider 선언 추가하기 (manifests/AndroidManifest.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;androidx.core.content.FileProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;com.june0122.criminalintent.fileprovider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>여기서 android:authorities 속성은 이 FileProvider의 파일이 저장되는 위치이며, 시스템 전체에서 고유한 문자열이어야 한다. 따라서 패키지 이름을 문자열에 포함하는 것이 좋다<small>(여기선 com.june0122.criminalintent가 패키지 이름)</small>.</p><p>그리고 exported=“false” 속성을 추가하면 우리 자신 및 우리가 권한을 부여한 사람 외에는 FileProvider를 사용할 수 없다. 그리고 grantUriPermissions 속성을 추가하면 인텐트로 android:authorities의 URI를 전송할 때 전송된 URI에 다른 앱이 쓸 수 있는 권한을 부여할 수 있다.</p><p>안드로이드 시스템에 FileProvider가 어디에 있는지 알려주었으니, 어떤 경로 <sup>path</sup>의 파일들을 노출할 것인지도 별도의 XML 리소스 파일에 정의해서 FileProvider에게 알려준다. app/res 폴더에서 'files’라는 이름의 XML Resource type의 Android Resource File을 생성하고 아래와 같이 코드를 변경한다.</p><blockquote><p>경로 추가하기 (res/xml/files.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;PreferenceScreen xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/PreferenceScreen&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">&quot;crime_photos&quot;</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이 XML 파일은 개인 스토리지의 루트 경로를 crime_photos로 매핑하며, 이 이름은 FileProvider가 내부적으로 사용한다.</p><p>다음으로 매니페스트 파일에 meta-data 태그를 추가해 FileProvider에 files.xml을 연결한다.</p><blockquote><p>경로를 FileProvider에 연결하기 (manifests/AndroidManifest.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;androidx.core.content.FileProvider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">&quot;com.june0122.criminalintent.fileprovider&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">&quot;@xml/files&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="사진-위치-지정하기"><a class="markdownIt-Anchor" href="#사진-위치-지정하기"></a> 사진 위치 지정하기</h3><p>다음으로 사진을 개인 스토리지에 저장할 위치를 지정한다. 먼저 파일 이름을 얻는 연산 속성 <sup>computed property</sup>을 Crime 클래스에 추가한다<small>(코틀린에서 연산 속성은 다른 속성의 값으로 자신의 값을 산출하므로 값을 저장하는 필드 즉, backing field를 갖지 않는다)</small>.</p><blockquote><p>파일 이름 속성 추가하기 (Crime.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Crime</span></span>(<span class="meta">@PrimaryKey</span> <span class="keyword">val</span> id: UUID = UUID.randomUUID(),</span><br><span class="line">                 <span class="keyword">var</span> title: String = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                 <span class="keyword">var</span> date: Date = Date(),</span><br><span class="line">                 <span class="keyword">var</span> isSolved: <span class="built_in">Boolean</span> = <span class="literal">false</span>,</span><br><span class="line">                 <span class="keyword">var</span> suspect: String = <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> photoFileName</span><br><span class="line">        <span class="keyword">get</span>() = <span class="string">&quot;IMG_<span class="variable">$id</span>.jpg&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>photoFileName은 사진 파일이 저장되는 폴더의 경로를 포함하지 않지만, 파일 이름은 고유한 것이 된다. 이는 Crime 클래스의 id 속성 값이 이름 속에 포함되어 있기 때문이다.</p><p>다음으로 사진이 저장되는 위치를 찾는다. 본문의 앱에서는 CrimeRepository가 데이터 저장에 관련된 모든 것을 책임지고 있으므로 CrimeRepository에 <code>getPhotoFile(Crime)</code> 함수를 추가한다. 이 함수는 Crime 클래스의 photoFileName 속성이 참조하는 사진 파일의 경로를 제공한다.</p><blockquote><p>사진 파일 위치 찾기 (CrimeRepository.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeRepository</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(context: Context) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> executor = Executors.newSingleThreadExecutor()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> filesDir = context.applicationContext.filesDir</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addCrime</span><span class="params">(crime: <span class="type">Crime</span>)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getPhotoFile</span><span class="params">(crime: <span class="type">Crime</span>)</span></span>: File = File(filesDir, crime.photoFileName)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드에서는 파일 시스템의 어떤 파일도 생성하지 않는다. 단지 올바른 위치를 가리키는 File 객체만 반환한다. 향후에 FileProvider를 사용해서 이 경로를 URI로 노출할 것이다.</p><p>끝으로 사진 파일 정보를 CrimeFragment에 제공하는 함수를 CrimeDetailViewModel에 추가한다.</p><blockquote><p>CrimeDetailViewModel을 통해 사진 파일 정보 제공하기 (CrimeDetailViewModel.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeDetailViewModel</span>: <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">saveCrime</span><span class="params">(crime: <span class="type">Crime</span>)</span></span> &#123;</span><br><span class="line">        crimeRepository.updateCrime(crime)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 사진 파일 정보를 CrimeFragment에 제공하는 함수 추가</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getPhotoFile</span><span class="params">(crime: <span class="type">Crime</span>)</span></span>: File &#123;</span><br><span class="line">        <span class="keyword">return</span> crimeRepository.getPhotoFile(crime)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="카메라-인텐트-사용하기"><a class="markdownIt-Anchor" href="#카메라-인텐트-사용하기"></a> 카메라 인텐트 사용하기</h2><p>다음으로 할 일은 실제로 사진을 찍을 수 있게 하는 작업이다. 암시적 인텐트를 사용하면 되므로 매운 쉬운 작업이다.</p><p>먼저, 사진 파일의 위치를 CrimeFragment의 photoFile 속성에 저장한다. 이 속성은 이후에도 몇 번 더 사용한다.</p><blockquote><p>사진 파일 위치 저장하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> crime: Crime</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> photoFile: File</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        crimeDetailViewModel.crimeLiveData.observe(</span><br><span class="line">            viewLifecycleOwner,</span><br><span class="line">            Observer &#123; crime -&gt;</span><br><span class="line">                crime?.let &#123;</span><br><span class="line">                    <span class="keyword">this</span>.crime = crime</span><br><span class="line">                    photoFile = crimeDetailViewModel.getPhotoFile(crime) <span class="comment">// 사진 파일 위치 저장</span></span><br><span class="line">                    updateUI()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음으로 사진을 찍고 받을 수 있게 MeidaStore를 사용해 카메라 버튼을 코드와 연결한다. <strong>MeidaStore</strong>는 미디어와 관련된 모든 것을 갖고 있는 안드로이드 클래스다.</p><h3 id="인텐트-실행-요청하기"><a class="markdownIt-Anchor" href="#인텐트-실행-요청하기"></a> 인텐트 실행 요청하기</h3><p>카메라 인텐트를 실행 요청할 준비가 되었다<small>인텐트는 안드로이드 운영체제가 실행하므로 실행을 요청한다는 표현이 적합</small>. 이때 필요한 액션은 ACTION_IMAGE_CAPTURE이며, <strong>MediaStore</strong> 클래스에 상수로 정의되어 있다. 여기서는 MediaStore.ACTION_IMAGE_CAPTURE 액션을 갖는 암시적 인텐트를 요청하면 안드로이드가 카메라 액티비티를 시작시켜 사진을 찍을 수 있다. MediaStore에는 이미지, 비디오, 음악 등의 미디어를 처리하는 안드로이드에서 사용되는 <strong>public</strong> 인터페이스가 정의되어 있다. 그리고 카메라 앱을 시작시키는 이미지 캡처 인텐트 상수도 포함한다.</p><p>기본적으로 ACTION_IMAGE_CAPTURE 액션은 카메라 앱을 시작시키고 찍은 사진을 받을 수 있게 해준다. 다만 전체 해상도의 사진은 아니고 낮은 해상도의 섬네일 사진이다. 그리고 찍은 사진은 <code>onActivityResult(...)</code>에서 반환하는 <strong>Intent</strong> 객체에 포함된다.</p><p>전체 해상도의 사진을 받으려면 이미지를 저장할 파일 시스템의 위치를 알려주어야 한다. 이때는 MediaStore.EXTRA_OUTPUT 상수를 엑스트라의 키로, 사진 파일을 저장할 위치를 가리키는 Uri를 엑스트라의 값으로 설정해 인텐트에 전달하면 된다. 여기서 <strong>Uri</strong>는 <strong>FileProvider</strong>에 의해 서비스되는 위치를 가리킨다.</p><p>우선 사진 URI를 저장하는 photoUri 속성을 추가한다. 그리고 사진 파일의 참조를 얻은 후에 FileProvider가 반환하는 Uri로 photoUri 속성을 초기화한다.</p><blockquote><p>사진 URI 속성 추가하고 초기화하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> crime: Crime</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> photoFile: File</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> photoUri: Uri</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        crimeDetailViewModel.crimeLiveData.observe(</span><br><span class="line">            viewLifecycleOwner,</span><br><span class="line">            Observer &#123; crime -&gt;</span><br><span class="line">                crime?.let &#123;</span><br><span class="line">                    <span class="keyword">this</span>.crime = crime</span><br><span class="line">                    photoFile = crimeDetailViewModel.getPhotoFile(crime)</span><br><span class="line">                    photoUri = FileProvider.getUriForFile(</span><br><span class="line">                        requireActivity(),</span><br><span class="line">                        <span class="string">&quot;com.june0122.criminalintent.fileprovider&quot;</span>,</span><br><span class="line">                        photoFile</span><br><span class="line">                    )</span><br><span class="line">                    updateUI()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>FileProvider.getUriForFile(...)</code>을 호출하면 로컬 파일 시스템의 파일 경로를 카메라 앱에서 알 수 있는 Uri로 변환한다. 이 함수의 두 번째 인자는 FileProvider를 나타내며, 매니페스트의 android:authorities 속성에 정의했던 것과 같아야 한다.</p><p>다음으로 photoUri가 가리키는 위치에 저장할 새로운 사진을 요청하는 암시적 인텐트를 작성한다. 그리고 카메라 앱이 장치에 없거나 사진을 저장할 위치가 없으면, 카메라 버튼을 비활성화하는 코드도 추가한다<small>(사용할 수 있는 카메라 앱이 있는지 판단하기 위해 여기서는 카메라 암시적 인텐트에 응답하는 액티비티의 <strong>PackageManager</strong>를 쿼리한다)</small>.</p><blockquote><p>카메라 인텐트 실행 요청하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_CONTACT = <span class="number">2</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_PHOTO = <span class="number">3</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> DATE_FORMAT = <span class="string">&quot;yyyy년 M월 d일 H시 m분, E요일&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        suspectButton.apply &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        photoButton.apply &#123;</span><br><span class="line">            <span class="keyword">val</span> packageManager: PackageManager = requireActivity().packageManager</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> captureImage = Intent(MediaStore.ACTION_IMAGE_CAPTURE)</span><br><span class="line">            <span class="keyword">val</span> resolvedActivity: ResolveInfo? =</span><br><span class="line">                packageManager.resolveActivity(captureImage, PackageManager.MATCH_DEFAULT_ONLY)</span><br><span class="line">            <span class="keyword">if</span> (resolvedActivity == <span class="literal">null</span>) &#123;</span><br><span class="line">                isEnabled = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            setOnClickListener &#123;</span><br><span class="line">                captureImage.putExtra(MediaStore.EXTRA_OUTPUT, photoUri)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> cameraActivities: List&lt;ResolveInfo&gt; =</span><br><span class="line">                    packageManager.queryIntentActivities(captureImage, PackageManager.MATCH_DEFAULT_ONLY)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (cameraActivity <span class="keyword">in</span> cameraActivities) &#123;</span><br><span class="line">                    requireActivity().grantUriPermission(</span><br><span class="line">                        cameraActivity.activityInfo.packageName,</span><br><span class="line">                        photoUri,</span><br><span class="line">                        Intent.FLAG_GRANT_WRITE_URI_PERMISSION</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                startActivityForResult(captureImage, REQUEST_PHOTO)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>photoUri가 가리키는 위치에 실제로 사진 파일을 쓰려면 카메라 앱 퍼미션이 필요하다. 따라서 cameraImage 인텐트를 처리할 수 있는 모든 액티비티에 Intent.FLAG_GRANT_WRITE_URI_PERMISSION을 부여한다<small>(매니페스트에 grantUriPermissions 속성을 추가했으므로 이처럼 퍼미션을 부여할 수 있다)</small>. 이렇게 하면 해당 액티비티들이 Uri에 쓸 수 있는 퍼미션을 갖는다.</p><p>앱을 실행해 상세 내역 화면에서 카메라 버튼을 눌러보면 각자 장치에 설치된 카메라 앱이 실행되는 것을 확인할 수 있다.</p><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/120077897-b0bbad00-c0e7-11eb-8558-98e057c00d8f.gif'></p><h2 id="비트맵의-크기-조정과-보여주기"><a class="markdownIt-Anchor" href="#비트맵의-크기-조정과-보여주기"></a> 비트맵의 크기 조정과 보여주기</h2><p>이제는 사진을 찍을 수 있게 되었다. 그리고 이 앱에서 사용할 수 있도록 사진은 파일 시스템의 파일로 저장된다.</p><p>다음으로 사진 파일을 읽어서 로드한 후 사용자에게 보여주자. 이렇게 하려면 적합한 크기의 Bitmap 객체로 로드해야 한다. 파일로부터 Bitmap 객체를 얻을 때는 BitmapFactory 클래스를 사용하면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> bitmap = BitmapFactory.decodeFile(photoFile.getPath())</span><br></pre></td></tr></table></figure><p>그런데 한 가지 문제가 있다. 바로 <em>적합한 크기</em>에 관한 것이다. Bitmap은 화소 <sup>pixel</sup> 데이터를 저장하는 간단한 객체다. 즉, 원래 파일이 압축되었더라도 Bitmap 자체는 압축되지 않는다. 따라서 1600만 화소의 24비트 카메라 이미지는 5MB 크기의 JPG로 압축될 수 있지만, Bitmap 객체로 로드하면 48MB 크기로 커진다.</p><p>이 문제를 해결하려면 직접 비트맵의 크기를 줄여야 한다. 이때 파일 크기를 먼저 확인하고, 지정된 영역에 맞추기 위해 얼마나 줄여야 할지 파악한 후 해당 파일을 읽어서 크기를 줄인 Bitmap 객체를 생성하면 된다.</p><p>PictureUtil.kt라는 이름의 새로운 코틀린 파일을 생성하고 <code>getScaledBitmap(String, Int, Int)</code>라는 이름의 파일 수준 함수<small>(코틀린 파일 내에서 클래스 외부에 정의된 함수이며, 앱의 어떤 코드에서도 사용 가능)</small>를 추가한다.</p><blockquote><p><code>getScaledBitmap(...)</code> 함수 생성하기 (PictureUtils.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScaledBitmap</span><span class="params">(path: <span class="type">String</span>, destWidth: <span class="type">Int</span>, destHeight: <span class="type">Int</span>)</span></span>: Bitmap &#123;</span><br><span class="line">    <span class="comment">// 이미지 파일의 크기를 읽는다</span></span><br><span class="line">    <span class="keyword">var</span> options = BitmapFactory.Options()</span><br><span class="line">    options.inJustDecodeBounds = <span class="literal">true</span></span><br><span class="line">    BitmapFactory.decodeFile(path, options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> srcWidth = options.outWidth.toFloat()</span><br><span class="line">    <span class="keyword">val</span> srcHeight = options.outHeight.toFloat()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 크기를 얼마나 줄일지 파악한다</span></span><br><span class="line">    <span class="keyword">var</span> inSampleSize = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (srcHeight &gt; destHeight || srcWidth &gt; destWidth) &#123;</span><br><span class="line">        <span class="keyword">val</span> heightScale = srcHeight / destHeight</span><br><span class="line">        <span class="keyword">val</span> widthScale = srcWidth / destWidth</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> sampleScale = <span class="keyword">if</span> (heightScale &gt; widthScale) &#123;</span><br><span class="line">            heightScale</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            widthScale</span><br><span class="line">        &#125;</span><br><span class="line">        inSampleSize = Math.round(sampleScale)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    options = BitmapFactory.Options()</span><br><span class="line">    options.inSampleSize = inSampleSize</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 최종 Bitmap을 생성한다</span></span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeFile(path, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 중요한 것은 <code>inSampleSize</code>다. 각 화소에 대해 각 '샘플 <sup>sample</sup>’이 얼마나 큰지를 결정한다. 예를 들어, <code>inSampleSize</code>가 1이면 원래 파일의 각 수평 화소당 하나의 최종 수평 화소를 갖는다. 그리고 2이면 원래 파일의 두 개의 수평 화소마다 하나의 수평 화소를 갖는다. 따라서 <code>inSampleSize</code>가 2일 때는 원래 이미지 화소의 1/4에 해당하는 화소 개수를 갖는 이미지가 된다.</p><p>그런데 문제가 하나 더 있다. 프래그먼트가 최초로 시작될 때는 PhotoView의 크기를 미리 알 수 없다. 왜냐하면 프래그먼트의 <code>onCreate(...)</code>와 <code>onStart(...)</code> 및 <code>onResume(...)</code>이 차례대로 호출되어 실행된 후에 레이아웃이 뷰 객체로 생성되기 때문이다<small>(레이아웃이 뷰 객체로 생성될 때까지는 이것의 뷰들이 화면상의 크기를 갖지 않는다)</small>.</p><p>이 문제의 해결 방법은 두 가지가 있다. 레이아웃이 뷰 객체로 생성될 때까지 기다리거나, PhotoView의 크기가 어느 정도 될지 추정하는 것이다. 크기를 추정하는 방법은 효율성은 떨어지지만 구현은 쉽다.</p><p>여기서는 파일 수준 함수인 <code>getScaledBitmap(String, Activity)</code>를 작성해 특정 액티비티의 화면 크기에 맞춰 Bitmap의 크기를 조정한다.</p><blockquote><p>크기 추정 함수 추가하기 (PictureUtils.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScaledBitmap</span><span class="params">(path: <span class="type">String</span>, activity: <span class="type">Activity</span>)</span></span>: Bitmap &#123;</span><br><span class="line">    <span class="keyword">val</span> size = Point()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Suppress(<span class="meta-string">&quot;DEPRECATION&quot;</span>)</span></span><br><span class="line">    activity.windowManager.defaultDisplay.getSize(size)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> getScaledBitmap(path, size.x, size.y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScaledBitmap</span><span class="params">(path: <span class="type">String</span>, destWidth: <span class="type">Int</span>, destHeight: <span class="type">Int</span>)</span></span>: Bitmap &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getScaledBitmap(String, Activity)</code> 함수에서는 화면 크기를 확인해서 해당 크기에 맞춰 이미지 크기를 줄이기 위해 오버로딩된 <code>getScaledBitmap(String, Int, Int)</code> 함수를 호출한다.</p><p>다음으로 ImageView에 Bitmap을 로드하기 위해 CrimeFragment에 새로운 함수를 추가하고 photoView를 변경한다.</p><blockquote><p>photoView 변경하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updatePhotoView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (photoFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">val</span> bitmap = getScaledBitmap(photoFile.path, requireActivity())</span><br><span class="line">            photoView.setImageBitmap(bitmap)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            photoView.setImageDrawable(<span class="literal">null</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그다음에 <code>updatePhotoView()</code> 함수를 <code>updateUI()</code>와 <code>onActivityResult(...)</code> 내부에서 호출하게 한다.</p><blockquote><p><code>updatePhotoView()</code> 호출하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (crime.suspect.isNotEmpty()) &#123;</span><br><span class="line">            suspectButton.text = crime.suspect</span><br><span class="line">        &#125;</span><br><span class="line">        updatePhotoView()</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            resultCode != Activity.RESULT_OK -&gt; <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            requestCode == REQUEST_CONTACT &amp;&amp; <span class="keyword">data</span> != <span class="literal">null</span> -&gt; &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            requestCode == REQUEST_PHOTO -&gt; &#123;</span><br><span class="line">                updatePhotoView()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>이제는 카메라 앱에서 저장한 사진 파일을 처리할 수 있게 되었다. 따라서 Uri에 파일을 쓸 수 있는 퍼미션을 취소할 수 있다. 카메라 앱에서 정상적으로 사진 파일을 쓴 이후에 URI 퍼미션을 취소하도록 <code>onActivityResult(...)</code>를 변경하고 <code>onDetach()</code>를 추가해보자<small>(<code>onDetach()</code>는 부적합한 응답이 생길 가능성에 대비한 것이다)</small>.</p><blockquote><p>URI 퍼미션 취소하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDetach</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetach()</span><br><span class="line">        requireActivity().revokeUriPermission(photoUri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION)</span><br><span class="line">        updatePhotoView()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            requestCode == REQUEST_PHOTO -&gt; &#123;</span><br><span class="line">                requireActivity().revokeUriPermission(photoUri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION)</span><br><span class="line">                updatePhotoView()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>앱을 다시 실행해 범죄 리스트에서 한 항목을 클릭한 후 상세 내역 화면에서 카메라 버튼을 눌러 카메라 앱이 실행되면 사진을 찍는다. ‘확인’ 또는 ‘다시 시도’ 선택 버튼이 나타나면 '확인’을 클릭한다. 그러면 아래의 이미지와 같이 사진의 섬네일 이미지가 상세 내역 화면에 나타난다.</p><blockquote><p>상세 내역 화면에 나타난 섬네일 이미지</p></blockquote><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120093824-b94bcc00-c157-11eb-94b5-17aaafc9ac53.png'></p><h2 id="사용하는-장치-기능-선언하기"><a class="markdownIt-Anchor" href="#사용하는-장치-기능-선언하기"></a> 사용하는 장치 기능 선언하기</h2><p>사진 관련 기능을 구현해보았다. 그런데 할 일이 한 가지 더 있다. 앱에서 장치마다 다를 수 있는 기능<small>(카메라나 NFC 등)</small>을 사용할 때는 안드로이드에게 알려주는 것이 좋다. 장치가 지원하지 않는 기능을 앱이 사용하면 다른 앱<small>(예를 들어, 플레이스토어)</small>에서 해당 앱의 설치를 거부할 수 있기 때문이다.</p><p>카메라 사용을 선언하기 위해 매니페스트에 &lt;uses-feature&gt; 태그를 추가한다.</p><blockquote><p>&lt;uses-feature&gt; 태그 추가하기 (manifests/AndroidManifest.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.june0122.criminalintent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:required</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>여기서는 생략 가능한 속성인 android:required 가 있다. 왜 그랬을까? 이 속성값을 true로 지정하면 해당 기능 없이는 앱이 제대로 동작하지 않음을 의미한다. 그런데 본문의 앱에서는 그렇지 않으므로 false를 지정하였다. 왜냐하면 <code>resolveActivity(...)</code>를 호출해 작동 가능한 카메라 앱이 있는지 확인해서 없으면 카메라 버튼을 사용할 수 없게 비활성화하기 때문이다.</p><p>즉, android:required 속성의 값으로 false를 지정하면 카메라 없이도 앱이 잘 실행될 수 있음을 안드로이드에게 알려주는 것이다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Android/">Android</category>
      
      <category domain="http://june0122.github.io/categories/Android/Guide/">Guide</category>
      
      
      <category domain="http://june0122.github.io/tags/Android/">Android</category>
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Intent/">Intent</category>
      
      <category domain="http://june0122.github.io/tags/Content-Provider/">Content Provider</category>
      
      <category domain="http://june0122.github.io/tags/File-Provider/">File Provider</category>
      
      <category domain="http://june0122.github.io/tags/Bitmap/">Bitmap</category>
      
      
      <comments>http://june0122.github.io/2021/05/31/android-bnr-16/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 암시적 인텐트</title>
      <link>http://june0122.github.io/2021/05/30/android-bnr-15/</link>
      <guid>http://june0122.github.io/2021/05/30/android-bnr-15/</guid>
      <pubDate>Sat, 29 May 2021 16:40:29 GMT</pubDate>
      
      <description>안드로이드에서는 &lt;b&gt;인텐트 &lt;sup&gt;intent&lt;/sup&gt;&lt;/b&gt; 를 사용해 장치의 다른 앱에 있는 액티비티를 시작시킬 수 있다. &lt;b&gt;명시적 인텐트 &lt;sup&gt;explicit intent&lt;/sup&gt;&lt;/b&gt; 에서는 시작시킬 액티비티 클래스를 지정하면 안드로이드 운영체제가 해당 액티비티를 시작시킨다. 반면에 &lt;b&gt;암시적 인텐트 &lt;sup&gt;implicit intent&lt;/sup&gt;&lt;/b&gt; 에서는 해야 할 작업을 알려주면 안드로이드 운영체제가 이 작업을 수행하는 데 적합한 앱의 액티비티를 찾아서 시작시킨다.</description>
      
      
      
      <content:encoded><![CDATA[<p>안드로이드에서는 <strong>인텐트 <sup>intent</sup></strong> 를 사용해 장치의 다른 앱에 있는 액티비티를 시작시킬 수 있다. <strong>명시적 인텐트 <sup>explicit intent</sup></strong> 에서는 시작시킬 액티비티 클래스를 지정하면 안드로이드 운영체제가 해당 액티비티를 시작시킨다. 반면에 <strong>암시적 인텐트 <sup>implicit intent</sup></strong> 에서는 해야 할 작업을 알려주면 안드로이드 운영체제가 이 작업을 수행하는 데 적합한 앱의 액티비티를 찾아서 시작시킨다.</p><p>본문에서는 ① 암시적 인텐트를 사용해서 사용자의 연락처에서 범죄 용의자를 한 명 선택하고, ② 텍스트 형태의 범죄 보고서를 전송할 수 있게 한다. 이때 사용자는 장치에 설치된 연락처 앱과 텍스트 전송 앱을 선택해 사용할 수 있다.</p><p>암시적 인텐트를 사용하면 추가로 앱을 개발하지 않아도 다른 앱을 이용할 수 있다. 따라서 모바일 장치의 여러 앱들에게 공통으로 필요한 작업을 쉽게 처리할 수 있다. 따라서 모바일 장치의 여러 앱들에게 공통으로 필요한 작업을 쉽게 처리할 수 있다. 그리고 사용자 또한 다른 앱들을 이 앱과 연계해 사용할 수 있다.</p><p>암시적 인텐트 생성에 앞서 다음과 같이 몇 가지 준비할 것이 있다.</p><ul><li>‘용의자 선택’ 버튼과 ‘범죄 보고서 전송’ 버튼을 CrimeFragment의 레이아웃에 추가한다.</li><li>용의자 이름을 저장하는 <code>suspect</code> 속성을 Crime 클래스에 추가한다.</li><li><strong>포맷 리소스 문자열 <sup>format resource string</sup></strong> 을 사용해서 범죄 보고서를 생성한다.</li></ul><h2 id="모델-계층에-용의자-추가하기"><a class="markdownIt-Anchor" href="#모델-계층에-용의자-추가하기"></a> 모델 계층에 용의자 추가하기</h2><p>용의자 이름을 저장할 새로운 속성을 Crime 클래스에 추가한다.</p><blockquote><p><code>suspect</code> 속성 추가하기 (Crime.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Crime</span></span>(</span><br><span class="line">    <span class="meta">@PrimaryKey</span> <span class="keyword">val</span> id: UUID = UUID.randomUUID(),</span><br><span class="line">    <span class="keyword">var</span> title: String = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="keyword">var</span> date: Date = Date(),</span><br><span class="line">    <span class="keyword">var</span> isSolved: <span class="built_in">Boolean</span> = <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">var</span> suspect: String = <span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>그런 다음 <code>suspect</code> 속성값을 저장하도록 데이터베이스의 Crime 테이블 열 <sup>column</sup>도 추가해야 한다. 이렇게 하려면 CrimeDatabase 클래스의 버전을 높여서 Room이 데이터베이스를 새 버전으로 이행 <sup>migration</sup>하게 해야 한다<small>(이행은 기존 데이터베이스의 스키마를 업데이트하고 데이터를 새 버전의 스키마에 맞춰 옮기는 것을 말한다.)</small>. 이때 <strong>Migration</strong> 클래스를 사용한다.</p><blockquote><p>새 버전의 데이터베이스로 이행하기 (database/CrimeDatabase.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Database(entities = [Crime::class], version = 1)</span></span><br><span class="line"><span class="meta">@Database(entities = [Crime::class], version = 2)</span></span><br><span class="line"><span class="meta">@TypeConverters(CrimeTypeConverters::class)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CrimeDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">crimeDao</span><span class="params">()</span></span>: CrimeDao</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> migration_1_2 = <span class="keyword">object</span> : Migration(<span class="number">1</span>, <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">migrate</span><span class="params">(database: <span class="type">SupportSQLiteDatabase</span>)</span></span> &#123;</span><br><span class="line">        database.execSQL(</span><br><span class="line">            <span class="string">&quot;ALTER TABLE Crime ADD COLUMN suspect TEXT NOT NULL DEFAULT &#x27;&#x27;&quot;</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터베이스의 초기 버전이 1이었으므로 위의 코드에서는 2로 올렸다. 그리고 Migration 객체를 생성해 데이터베이스를 업데이트한다.</p><p>Migration 클래스의 생성자는 두 개의 인자를 받는다. 첫 번째는 업데이트 전의 데이터베이스 버전이고, 두 번째는 업데이트할 버전이다. 여기서는 버전 번호를 1과 2로 지정하였다.</p><p>Migration 객체에는 <code>migrate(SupportSQLiteDatabase)</code> 함수만 구현하면 된다. 이 함수에서는 인자로 전달된 데이터베이스를 사용해서 테이블을 업그레이드하는 데 필요한 SQL 명령을 실행한다. 여기서는 <code>ALTER TABLE</code> 명령으로 suspect 열을 Crime 테이블에 추가한다.</p><p>생성된 Migration 객체는 데이터베이스를 생성할 때 제공해야 한다. CrimeRepository에서 CrimeDatabase 인스턴스를 생성할 때 Migration 객체를 Room에 제공하도록 변경한다.</p><blockquote><p>Migration 객체를 Room에 제공하기 (CrimeRepository.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> com.june0122.criminalintent.database.migration_1_2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeRepository</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(context: Context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> database: CrimeDatabase = Room.databaseBuilder(</span><br><span class="line">        context.applicationContext,</span><br><span class="line">        CrimeDatabase::<span class="keyword">class</span>.java,</span><br><span class="line">        DATABASE_NAME</span><br><span class="line"><span class="comment">//    ).build()</span></span><br><span class="line">    ).addMigrations(migration_1_2)</span><br><span class="line">        .build()</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> crimeDao = database.crimeDao()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Migration 객체를 설정하려면 <code>addMigration(...)</code>를 호출한 후에 <code>build()</code> 함수를 호출해야 한다. <code>addMigration(...)</code> 함수는 여러 개의 Migration 객체를 인자로 받을 수 있으므로 선언했던 모든 Migration 객체를 한꺼번에 전달할 수 있다.</p><p>앱이 실행되어 Room이 데이터베이스를 빌드할 때는 맨 먼저 장치의 기존 데이터베이스 버전을 확인한다. 그리고 이 버전이 CrimeDatabase 클래스의 <code>@Database</code> 애노테이션에 지정된 것과 일치하지 않으면, Room이 <code>@Database</code>에 지정된 버전에 맞는 Migration 객체를 찾아서 해당 버전으로 데이터베이스를 업데이트한다.</p><p>만일 데이터베이스 버전을 변경할 때 Migration 객체를 제공하지 않으면 Room이 기존 버전의 데이터베이스를 삭제하고 새 버전의 데이터베이스를 다시 생성한다. 이때 기존 데이터가 모두 없어지므로 주의해야 한다.</p><h2 id="포맷-문자열-사용하기"><a class="markdownIt-Anchor" href="#포맷-문자열-사용하기"></a> 포맷 문자열 사용하기</h2><p>마지막으로 특정 범죄의 상세 정보로 구성되는 범죄 보고서의 템플릿을 생성하면 모든 준비가 끝난다. 앱이 실행되기 전까지는 범죄의 상세 정보를 알 수 없으니 런타임 시에 대체될 수 있는 플레이스 홀더를 갖는 다음 포맷 문자열을 사용해야 한다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%1$s! 이 범죄가 발견된 날짜는 %2$s. %3$s, 그리고 %4$s</span><br></pre></td></tr></table></figure><p><code>%1$s</code>, <code>%2$s</code> 등 이 문자열 이자로 대체되는 플레이스 홀더들이다. 이 포맷 문자열을 코드에서 사용할 때는 <code>getString(...)</code> 함수를 호출하며, 이때 포맷 문자열 리소스 ID, 그리고 플레이스 홀더들을 대체하는 순서대로 네 개의 문자열을 인자로 전달한다.</p><blockquote><p>문자열 리소스 추가하기 (res/values/strings.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;crime_suspect_text&quot;</span>&gt;</span>용의자 선택<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;crime_report_text&quot;</span>&gt;</span>범죄 보고서 전송<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;crime_report&quot;</span>&gt;</span>%1$s!</span><br><span class="line">      이 범죄가 발견된 날짜는 %2$s. %3$s, 그리고 %4$s</span><br><span class="line">    <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;crime_report_solved&quot;</span>&gt;</span>이 건은 해결되었음<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;crime_report_unsolved&quot;</span>&gt;</span>이 건은 미해결임<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;crime_report_no_suspect&quot;</span>&gt;</span>용의자가 없음.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;crime_report_suspect&quot;</span>&gt;</span>용의자는 %s.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;crime_report_subject&quot;</span>&gt;</span>CriminalIntent 범죄 보고서<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;send_report&quot;</span>&gt;</span>범죄 보고서 전송<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>다음으로 문자열 네 개를 생성하고 결합해 하나의 완전한 보고서 문자열로 반환하는 함수를 CrimeFragment.kt에 추가한다.</p><blockquote><p><code>getCrimeReport()</code> 함수 추가하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_TIME = <span class="number">1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> DATE_FORMAT = <span class="string">&quot;yyyy년 M월 d일 H시 m분, E요일&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCrimeReport</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> solvedString = <span class="keyword">if</span> (crime.isSolved) &#123;</span><br><span class="line">            getString(R.string.crime_report_solved)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            getString(R.string.crime_report_unsolved)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">val</span> dateString = DateFormat.format(DATE_FORMAT, crime.date).toString()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> suspect = <span class="keyword">if</span> (crime.suspect.isBlank()) &#123;</span><br><span class="line">            getString(R.string.crime_report_no_suspect)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            getString(R.string.crime_report_suspect, crime.suspect)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> getString(R.string.crime_report, crime.title, dateString, solvedString, suspect)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small>(DateFormat 클래스의 import 문을 추가할 때는 android.text.format.DateFormat을 선택해야 한다.)</small></p><p>준비 작업이 끝났으니 이제 암시적 인텐트를 자세히 알아본다.</p><h2 id="암시적-인텐트-사용하기"><a class="markdownIt-Anchor" href="#암시적-인텐트-사용하기"></a> 암시적 인텐트 사용하기</h2><p><strong>인텐트</strong>는 하고자 원하는 것을 안드로이드 운영체제에 알려주는 객체다. 지금까지는 우리가 생성했던 <strong>명시적</strong> 인텐트를 사용해서 안드로이드 운영체제가 시작시킬 액티비티 이름을 명시적으로 지정하였다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, CheatActivity::<span class="keyword">class</span>.java)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure><p><strong>암시적</strong> 인텐트를 사용할 때는 원하는 작업을 안드로이드 운영체제에 알려준다. 그러면 해당 작업을 할 수 있다고 자신을 알린 액티비티를 안드로이드 운영체제가 찾아서 시작시킨다. 단, 안드로이드 운영체제가 그런 능력을 가진 액티비티를 두 개 이상 찾으면 사용자가 선택할 수 있게 해준다.</p><h3 id="암시적-인텐트의-구성-요소"><a class="markdownIt-Anchor" href="#암시적-인텐트의-구성-요소"></a> 암시적 인텐트의 구성 요소</h3><p>원하는 작업을 정의할 때 사용하는 암시적 인텐트의 주요 구성 요소는 다음과 같다.</p><p>수행하고자 하는 액션 <sup>action</sup></p><ul><li><strong>Intent</strong> 클래스의 상수다. 예를 들어, 웹 URL을 보기 원한다면 Intent.ACTION_VIEW를 액션으로 사용하며, 텍스트 등을 전송할 때는 Intent.ACTION_SEND를 사용한다. 이외에도 여러 가지 상수가 있다.</li></ul><p>데이터의 위치</p><ul><li>웹 페이지의 URL과 같은 장치 외부 것이 될 수 있다. 또는 파일에 대한 URI나 <strong>Content Provider</strong>의 레코드<small>(주로 데이터베이스 테이블의 행)</small>를 가리키는 <strong>콘텐츠 URI</strong>도 될 수 있다.</li></ul><p>액션에서 필요한 데이터의 타입</p><ul><li>text/html이나 audio/mpeg3과 같은 MIME 타입이다. 인텐트가 데이터의 위치를 포함하면 해당 데이터로부터 타입을 유추할 수 있다.</li></ul><p>선택적으로 사용하는 카테고리</p><ul><li>액션이 <strong>무엇<small>(what)</small></strong> 을 하는지를 나타내는 데 사용되는 것이라면 카테고리는 액티비티를 <strong>어디서<small>(where)</small>, 언제<small>(when)</small>, 어떻게<small>(how)</small></strong> 사용할지를 나타낸다. 액티비티가 최상위 수준의 앱 론처에 보여야 함을 나타내기 위해 안드로이드는 <em>android.intent.category.LAUNCHER</em> 카테고리를 사용한다. 반면에 액티비티의 패키지에 관한 정보를 사용자에게 보여주되 론처에는 나타나지 않아야 하는 액티비티를 나타내려면 <em>android.intent.category.INFO</em> 카테고리를 사용한다.</li></ul><p>예를 들어, 웹 사이트의 페이지를 보는 간단한 암시적 인텐트는 Intent.ACTION_VIEW 액션과 웹 사이트의 URL인 데이터 URI<small>(Uri 객체)</small>를 포함한다.</p><p>안드로이드 운영체제는 이런 정보를 기준으로 적합한 애플리케이션의 액티비티를 찾아서 실행한다<small>(만일 하나 이상의 액티비티를 찾으면 대화상자를 보여주고 사용자가 선택하게 해준다)</small>.</p><p>액티비티는 매니페스트<small>(AndroidManifest.xml)</small>의 인텐트 필터를 통해서 지정된 액션을 수행할 수 있음을 알린다. 예를 들어, 웹 브라우저 앱이라면 ACTION_VIEW를 수행할 수 있는 액티비티를 선언할 때 다음과 같이 인텐트 필터를 포함하면 된다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.BrowserActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.VIEW&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">&quot;http&quot;</span> <span class="attr">android:host</span>=<span class="string">&quot;www.naver.com&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>액티비티가 암시적 인텐트에 응답하려면 인텐트 필터에 DEFAULT 카테고리를 갖고 있어야 한다. 인텐트 필터의 action 요소는 이 액티비티가 해당 작업<small>(여기서는 VIEW, 즉 웹 URL의 브라우징)</small>을 수행할 수 있음을 안ㄴ드로이드 운영체제에 알린다. 그리고 DEFAULT 카테고리는 해당 작업을 할 의향이 있음을<small>(암시적으로 인텐트를 받겠다는)</small> 안드로이드 운영체제에 알린다. DEFAULT 카테고리는 모든 암시적 이벤트에 기본으로 추가된다.</p><p>명시적 인텐트처럼 암시적 인텐트도 엑스트라를 포함할 수 있다. 그러나 암시적 인텐트의 엑스트라는 안드로이드 운영체제가 적합한 액티비티를 찾기 위해 사용하는 것이 아니라 액션에 따른 추가 데이터를 보낼 때 사용한다.</p><p>그리고 인텐트의 액션<small>(action 태그로 지정됨)</small>과 데이터<small>(data 태그로 지정됨)</small>는 명시적 인텐트에서도 사용할 수 있다.</p><h3 id="범죄-보고서-전송하기"><a class="markdownIt-Anchor" href="#범죄-보고서-전송하기"></a> 범죄 보고서 전송하기</h3><p>지금부터는 CriminalIntent 앱에서 암시적 인텐트를 생성해 범죄 보고서를 발송하는 방법을 알아본다. 범죄 보고서는 문자열이므로 텍스트를 전송하는 작업을 해야 한다. 따라서 암시적 인텐트의 액션은 ACTION_SEND가 되며, 어떤 데이터나 카테고리도 지정하지 않지만 타입은 text/plain으로 지정한다.</p><p>CrimeFragment의 <code>onCreatView(...)</code>에서 ‘범죄 보고서 전송’ 버튼의 참조를 얻은 후, <code>onStart()</code>에서 이 버튼의 리스너를 설정한다. 그리고 이 리스너 내부에서는 암시적 인텐트를 생성해 <code>startActivity(Intent)</code>의 인자로 전달한다.</p><blockquote><p>범죄 보고서 전송하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> solvedCheckBox: CheckBox</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> reportButton: Button</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        ...</span><br><span class="line">        solvedCheckBox = view.findViewById(R.id.crime_solved) <span class="keyword">as</span> CheckBox</span><br><span class="line">        reportButton = view.findViewById(R.id.crime_report) <span class="keyword">as</span> Button</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        dateButton.setOnClickListener &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timeButton.setOnClickListener &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reportButton.setOnClickListener &#123;</span><br><span class="line">            Intent(Intent.ACTION_SEND).apply &#123;</span><br><span class="line">                type = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">                putExtra(Intent.EXTRA_TEXT, getCrimeReport())</span><br><span class="line">                putExtra(Intent.EXTRA_SUBJECT, getString(R.string.crime_report_subject))</span><br><span class="line">            &#125;.also &#123; intent -&gt;</span><br><span class="line">                startActivity(intent)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서는 액션을 정의하는 상수 문자열을 인자로 받는 Intent 생성자를 사용한다. 생성하야 할 암시적 인텐트의 종류에 따라 사용할 수 있는 생성자도 달라진다. 이와 관련된 내용은 <a href="https://developer.android.com/reference/kotlin/android/content/Intent#public-constructors">API 문서</a>에서 <strong>Intent</strong> 클래스를 찾아보면 알 수 있다. 그런데 타입을 인자로 받는 생성자는 없으므로 Intent의 <strong>type</strong> 속성으로 지정해야 한다.</p><p>보고서의 텍스트와 제목 문자열은 엑스트라의 값에 포함되며, 엑스트라의 키는 Intent 클래스에 정의한 상수들을 사용한다<small>(<strong>EXTRA_SUBJECT</strong>는 메시지의 제목이며, <strong>EXTRA_TEXT</strong>는 메시지의 데이터다)</small>. 이 인텐트에 응답해 시작되는 액티비티는 엑스트라의 키로 사용된 상수들과 각 키의 값이 무엇을 의미하는지 알아야 한다.</p><p>프래그먼트에서 액티비티르 시작시키는 것은 액티비티에서 다른 액티비티를 시작시키는 것과 거의 같다. 위의 코드에서는 Fragment의 <code>startActivity(Intent)</code> 함수를 호출하며, 이 함수는 내부적으로 이것과 대응되는 Activity 함수를 호출한다.</p><p>CriminalIntent 앱을 실행하고 범죄 리스트에서 한 항목을 클릭한 후 상세 내역 화면이 나타나면 ‘범죄 보고서 전송’ 버튼을 눌러보면 이 인텐트는 장치의 많은 액티비티와 일치하므로 아래의 이미지과 같이 선택할 액티비티들을 보여준다<small>(ACTION_SEND 인텐트에 응답할 수 있는 액티비티가 하나만 있다면 해당 액티비티의 앱이 바로 실행된다)</small>.</p><blockquote><p>범죄 보고서를 전송할 수 있는 액티비티들</p></blockquote><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/120061369-e6d14080-c097-11eb-9298-6d48cd88d9f1.png'></p><p>선택기 <sup>chooser</sup>가 보여주는 액티비티 중에서 하나를 선택해 액티비티의 앱에서 범죄 보고서를 전송하고, 종료하면 다시 범죄 상세 내역 화면으로 돌아온다.</p><p>‘메시지’ 앱을 선택하면 아래 이미지와 같이 범죄 보고서가 메시지로 작성된 상태에서 새 메시지 화면이 나타난다. 그래고 맨 위의 '받는 사람’만 지정하고 '보내기’를 누르면 메시지가 전송된다.</p><blockquote><p>‘메시지’ 앱으로 범죄 보고서 전송하기</p></blockquote><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120061526-a6be8d80-c098-11eb-92ae-da44438daa8b.png'></p><p>만일 선택기가 나타나지 않는다면 이미 이와 같은 암시적 인텐트의 기본 앱을 설정했거나, 이 인텐트에 응답할 수 있는 액티비티가 장치에 하나만 있어서 그렇다.</p><p>액티비티를 시작시키기 위해 암시적 인텐트가 사용될 때마다 매번 선택기가 나타나게 할 수도 있다. 그렇게 하려면 이전처럼 암시적 인텐트를 생성한 후에 <code>Intent.createChooser(Intent, String)</code> 함수를 호출하면 된다. 이때 암시적 인텐트와 선택기의 제목 문자열을 인자로 전달한다. 그다음에 <code>createChooser(...)</code>로부터 반환된 인텐트를 <code>startActivity(...)</code>의 인자로 전달한다.</p><p>암시적 인텐트에 응답하는 액티비티들을 보여줄 선택기를 생성하는 코드를 CrimeFragment.kt에 추가한다.</p><blockquote><p>선택기 사용하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">reportButton.setOnClickListener &#123;</span><br><span class="line">    Intent(Intent.ACTION_SEND).apply &#123;</span><br><span class="line">        type = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">        putExtra(Intent.EXTRA_TEXT, getCrimeReport())</span><br><span class="line">        putExtra(Intent.EXTRA_SUBJECT, getString(R.string.crime_report_subject))</span><br><span class="line">    &#125;.also &#123; intent -&gt;</span><br><span class="line"><span class="comment">//      startActivity(intent)</span></span><br><span class="line">        <span class="keyword">val</span> chooserIntent = Intent.createChooser(intent, getString(R.string.send_report))</span><br><span class="line">        startActivity(chooserIntent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앱을 다시 실행해 범죄 리스트에서 한 항목을 선택한 후, 상세 내역 화면이 나타나면 ‘범죄 보고서 전송’ 버튼을 눌러보자. 선택기의 제목이 '범죄 보고서 전송’으로 나타나며, 인텐트를 처리할 수 있는 액티비티가 하나 이상이면 항상 앱 선택 리스트가 나타난다.</p><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/120062056-0a49ba80-c09b-11eb-9877-1e248be815ca.png'></p><h3 id="안드로이드에-연락처-요청하기"><a class="markdownIt-Anchor" href="#안드로이드에-연락처-요청하기"></a> 안드로이드에 연락처 요청하기</h3><p>지금부터는 사용자가 자신의 연락처에서 용의자를 선택할 수 있게 또 다른 암시적 인텐트를 생성해본다. 이 암시적 인텐트는 액션 및 관련된 데이터를 찾을 수 있는 위치를 갖는다. 이때 액션은 Intent.ACTION_PICK이며, 연락처의 데이터는 ContactsContract.Contacts.CONTENT_URI에 있다. 요컨대 연락처 데이터베이스에서 한 항목을 선택할 수 있게 해달라고 안드로이드에 요청하는 것이다.</p><p>여기서는 인텐트로 시작된 액티비티로부터 결과<small>(연락처 데이터)</small>를 돌려받아야 한다. 따라서 <code>startActivityForResult(...)</code> 함수를 호출하면서 인텐트와 요청 코드를 인자로 전달해야 한다. 그리고 요청 코드의 상수와 ‘용의자 선택’ 버튼을 참조하는 속성을 CrimeFragment.kt에 추가한다.</p><blockquote><p>‘용의자 선택’ 버튼을 참조하는 속성 추가하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_DATE = <span class="number">0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_TIME = <span class="number">1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_CONTACT = <span class="number">2</span> <span class="comment">// 연락처 요청 코드의 상수</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> reportButton: Button</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> suspectButton: Button <span class="comment">// 버튼 참조 속성</span></span><br></pre></td></tr></table></figure><p>그다음에 <code>onCreateView(...)</code>의 끝에서 ‘용의자 선택’ 버튼 객체의 참조를 얻고, <code>onStart()</code>에서 이 버튼의 클릭 리스너를 설정한다. 클릭 리스너 구현 코드에서는 연락처를 요청하는 암시적 인텐트를 생성해서 <code>startActivityForResult(...)</code>의 인자로 전달한다. 그리고 용의자가 선정되면 이 사람들의 이름을 ‘용의자 선택’ 버튼에 보여준다.</p><blockquote><p>암시적 인텐트 전달하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        ...</span><br><span class="line">        reportButton = view.findViewById(R.id.crime_report) <span class="keyword">as</span> Button</span><br><span class="line">        suspectButton = view.findViewById(R.id.crime_suspect) <span class="keyword">as</span> Button</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        reportButton.setOnClickListener &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        suspectButton.apply &#123; </span><br><span class="line">            <span class="keyword">val</span> pickContactIntent = Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI)</span><br><span class="line">            </span><br><span class="line">            setOnClickListener &#123; </span><br><span class="line">                startActivityForResult(pickContactIntent, REQUEST_CONTACT)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pickContactIntent는 잠시 후에 한번 더 사용하므로 OnClickListener의 외부에 선언하였다.</p><p>다음으로 용의자가 선정되었을 때 ‘용의자 선택’ 버튼에 텍스트를 설정하도록 <code>updateUI()</code>를 변경한다.</p><blockquote><p>‘용의자 선택’ 버튼에 텍스트 설정하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">    titleField.setText(crime.title)</span><br><span class="line">    dateButton.text = crime.date.toString()</span><br><span class="line">    solvedCheckBox.apply &#123;</span><br><span class="line">        isChecked = crime.isSolved</span><br><span class="line">        jumpDrawablesToCurrentState()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (crime.suspect.isNotEmpty()) &#123;</span><br><span class="line">        suspectButton.text = crime.suspect</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앱을 다시 실행해 범죄 리스트에서 한 항목을 선택한 후 상세 내역 화면이 나타나면 ‘용의자 선택’ 버튼을 눌러보자. 아래의 이미지와 같이 연락처 리스트가 나타난다.</p><blockquote><p>용의자 선택을 위한 연락처 리스트</p></blockquote><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/120063255-35370d00-c0a1-11eb-9a63-1b5f9e70e5bb.gif'></p><h4 id="연락처-리스트에서-데이터-가져오기"><a class="markdownIt-Anchor" href="#연락처-리스트에서-데이터-가져오기"></a> 연락처 리스트에서 데이터 가져오기</h4><p>이제 연락처 앱으로부터 결과를 돌려받아야 한다. 그런데 연락처 정보는 많은 앱이 공유한다. 따라서 안드로이드에서는 <strong>ContentProvider</strong>를 통해 연락처 데이터와 함께 작동하는 상세한 API를 제공한다. 이 API 클래스의 인스턴스들은 데이터베이스를 포함하며, 다른 앱에서 이 데이터베이스의 데이터를 사용할 수 있게 한다. <strong>ContentProvider</strong>는 <strong>ContentReslover</strong>를 통해서 사용할 수 있다<small>(연락처 데이터베이스의 자세한 내용은 <a href="https://developer.android.com/guide/topics/providers/content-provider-basics?hl=ko">Content Provider 기본 사항</a>에서 Content Provider API 참고한다)</small>.</p><p>다음으로 연락처 앱으로부터 연락처의 이름을 가져오는 <code>onActivityResult(...)</code>를 CrimeFragment에 구현한다. 일단 코드를 작성한 후 하나씩 알아본다.</p><blockquote><p>연락처의 이름 가져오기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks, TimePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateUI</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> &#123;</span><br><span class="line">            requestCode != Activity.RESULT_OK -&gt; <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            requestCode == REQUEST_CONTACT &amp;&amp; <span class="keyword">data</span> != <span class="literal">null</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> contactUri: Uri = <span class="keyword">data</span>.<span class="keyword">data</span> ?: <span class="keyword">return</span></span><br><span class="line">                <span class="comment">// 쿼리에서 값으로 반환할 필드를 지정한다</span></span><br><span class="line">                <span class="keyword">val</span> queryFields = arrayOf(ContactsContract.Contacts.DISPLAY_NAME)</span><br><span class="line">                <span class="comment">// 쿼리를 수행한다. contactUri는 콘텐츠 제공자의 테이블을 나타낸다</span></span><br><span class="line">                <span class="keyword">val</span> cursor = requireActivity().contentResolver</span><br><span class="line">                    .query(contactUri, queryFields, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">                cursor?.use &#123;</span><br><span class="line">                    <span class="comment">// 쿼리 결과 데이터가 있는지 확인한다</span></span><br><span class="line">                    <span class="keyword">if</span> (it.count == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 첫 번째 데이터 행의 첫 번째 열의 값을 가져온다</span></span><br><span class="line">                    <span class="comment">// 이 값이 용의자의 이름이다</span></span><br><span class="line">                    it.moveToFirst()</span><br><span class="line">                    <span class="keyword">val</span> suspect = it.getString(<span class="number">0</span>)</span><br><span class="line">                    crime.suspect = suspect</span><br><span class="line">                    crimeDetailViewModel.saveCrime(crime)</span><br><span class="line">                    suspectButton.text = suspect</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드에서는 반환된 데이터에 있는 연락처의 모든 표시명<small>(display name, 쉽게 말해 테이블의 열 이름)</small>을 가져온다. 그리고 연락처 데이터베이스를 쿼리한 후 반환된 결과셋 <sup>result set</sup>의 행들을 읽는 데 사용할 <strong>Cursor</strong> 객체를 얻는다. 그다음에 커서가 최소한 한 행의 데이터를 갖고 있는지 확인한 후, <code>Cursor.moveToFirst()</code>를 호출해 첫 번째 행으로 커서를 이동시킨다. 그리고 <code>Cursor.getString(Int)</code>를 호출해 첫 번째 행의 첫 번째 열 값을 가져오며, 이때 이 값이 바로 용의자의 이름이다. 그다음에 이 값을 Crime 객체의 suspect 속성과 ‘용의자 선택’ 버튼의 text 속성에 설정한다.</p><p>여기서는 연락처 앱으로부터 용의자 이름을 받으면 그 즉시 범죄 데이터베이스의 Crime 테이블에 저장한다. 이렇게 해야 하는 이유는 다음과 같다.</p><ul><li>CrimeFragment가 실행 재개 <sup>resumed</sup> 상태일 때는 <code>onViewCreated(...)</code> 함수가 호출되므로, 범죄 데이터베이스로부터 범죄 데이터를 쿼리하게 된다.</li><li>그러나 <code>onActivityResult(...)</code>가 호출된 후에 <code>onViewCreated(...)</code>가 호출되므로 연락처 앱으로부터 받은 용의자 이름을 범죄 데이터베이스의 범죄 데이터<small>(Crime 테이블의 suspect 열 값)</small>로 덮어쓰게 된다.</li><li>따라서 연락처 앱으로부터 받은 용의자 이름이 유실되지 않도록 범죄 데이터베이스에 저장해야 한다.</li></ul><p>연락처 앱과 범죄 데이터가 있는 장치에서 앱을 다시 실행한다. 범죄 리스트가 나타나면 한 항목을 선택한 후 상세 내역 화면에서 ‘용의자 선택’ 버튼을 누른다. 그다음에 연락처 리스트에서 한 명을 선택하면 상세 내역 화면으로 돌아오면서 ‘용의자 선택’ 버튼에 해당 이름이 나타난다. 그리고 ‘범죄 보고서 전송’ 버튼을 누른 후 ‘메시지’ 앱을 선택하면, 해당 용의자 이름이 범죄 보고서 메시지에도 나타난다.</p><blockquote><p>‘용의자 선택’ 버튼과 범죄 보고서 메시지에 나타난 용의자 이름</p></blockquote><p align = 'center'><img width = '200' src = 'https://user-images.githubusercontent.com/39554623/120064979-01acb080-c0aa-11eb-938a-175dca8599c7.png'><img width = '212' src = 'https://user-images.githubusercontent.com/39554623/120065111-aa5b1000-c0aa-11eb-8774-22dfe371d738.png'></p><h4 id="연락처-앱의-퍼미션"><a class="markdownIt-Anchor" href="#연락처-앱의-퍼미션"></a> 연락처 앱의 퍼미션</h4><p>연락처 데이터베이스를 읽기 위한 퍼미션 <sup>permission</sup>은 어떻게 얻을까? 연락처 앱이 우리에게 퍼미션을 부여한다. 연락처 앱은 연락처 데이터베이스의 모든 퍼미션을 갖고 있으며, Intent의 데이터 URI를 부모 액티비티에 반환할 때 Intent.FLAG_GRANT_READ_URI_PERMISSION 플래그도 추가한다. 이 플래그는 안드로이드에게 앱의 부모 액티비티가 해당 데이터를 한번 읽는 것을 허용한다고 알린다. 여기서는 연락처 데이터베이스의 전체 데이터를 액세스할 필요가 없고 하나의 연락처 데이터만 필요하므로 퍼미션 문제는 없다.</p><h3 id="응답하는-액티비티-확인하기"><a class="markdownIt-Anchor" href="#응답하는-액티비티-확인하기"></a> 응답하는 액티비티 확인하기</h3><p>본문에서 생성했던 첫 번째 암시적 인텐트<small>(범죄 보고서 전송)</small>는 어떤 경우에도 항상 응답을 받는다. 안드로이드 장치에는 이런저런 종류의 메시지 전송 앱이 반드시 있기 때문이다. 그런데 연락처에서 용의자를 선택하기 위한 두 번째 암시적 인텐트에서는 다르다. 일부 사용자나 장치에는 연락처 앱이 없을 수 있기 때문이다. 따라서 이때는 문제가 되는데, 안드로이드 운영체제가 일치하는 액티비티를 찾을 수 없어 앱이 중단되기 때문이다.</p><p>이런 문제의 해결책은 <code>onStart()</code> 함수에서 안드로이드 운영체제의 일부인 <strong>PackageManager</strong>를 먼저 확인하는 것이다.</p><blockquote><p>연락처 앱이 없을 때를 대비하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    suspectButton.apply &#123;</span><br><span class="line">        <span class="keyword">val</span> pickContactIntent = Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI)</span><br><span class="line">        setOnClickListener &#123;</span><br><span class="line">            startActivityForResult(pickContactIntent, REQUEST_CONTACT)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> packageManager: PackageManager = requireActivity().packageManager</span><br><span class="line">        <span class="keyword">val</span> resolvedActivity: ResolveInfo? =</span><br><span class="line">            packageManager.resolveActivity(pickContactIntent, PackageManager.MATCH_DEFAULT_ONLY)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (resolvedActivity == <span class="literal">null</span>) &#123;</span><br><span class="line">            isEnabled = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PackageManager</strong>는 안드로이드 장치에 설치된 모든 컴포넌트와 이것들의 모든 액티비티를 알고 있다. 따라서 <code>resolveActivity(Intent, Int)</code> 함수를 호출하면 첫 번째 인자로 전달된 인텐트와 일치하는 액티비티를 찾도록 요청한다. 그리고 두 번째 인자로 우리가 원하는 플래그를 전달하면 이 플래그를 갖는 액티비티들만 찾는다. 여기서는 MATCH_DEFAULT_ONLY 플래그를 전달해 CATEGORY_DEFAULT가 매니페스트의 인텐트 필터에 정의된 액티비티들만 찾는데, <code>startActivity(Intent)</code>가 하는 것과 같다.</p><p>그리고 찾은 액티비티들이 있으면 이것들의 정보를 갖는 <strong>ResolveInfo</strong> 인스턴스가 반환되고, 찾지 못하면 null을 반환하므로 이때는 ‘용의자 선택’ 버튼이 작동하지 않도록 비활성화한다.</p><p>인텐트 필터의 검사가 제대로 되는지 알아보고 싶지만 연락처 앱이 없는 장치가 없을 수도 있다. 이때는 인텐트에 임의의 카테고리를 추가해 테스트하면 된다. 아래 코드에서는 CATEGORY_HOME 플래그를 인텐트의 카테고리로 추가했다. 이 카테고리는 인텐트와 일치하는 연락처 애플리케이션을 찾지 못하게 일부러 추가한 것이다.</p><blockquote><p>인텐트 필터 테스트 코드 추가하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    suspectButton.apply &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// CATEGORY_HOME 플래그를 인텐트의 카테고리로 추가</span></span><br><span class="line">        pickContactIntent.addCategory(Intent.CATEGORY_HOME) </span><br><span class="line">        <span class="keyword">val</span> packageManager: PackageManager = requireActivity().packageManager</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>앱을 다시 실행해 범죄 리스트에서 한 항목을 선택하면 상세 내역 화면의 ‘용의자 선택’ 버튼이 비활성화된 것을 확인할 수 있다.</p><blockquote><p>비활성화된 ‘용의자 선택’ 버튼</p></blockquote><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/120065605-1b032c00-c0ad-11eb-8f7d-907b8af398c5.png'></p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Android/">Android</category>
      
      <category domain="http://june0122.github.io/categories/Android/Guide/">Guide</category>
      
      
      <category domain="http://june0122.github.io/tags/Android/">Android</category>
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Intent/">Intent</category>
      
      <category domain="http://june0122.github.io/tags/Content-Provider/">Content Provider</category>
      
      
      <comments>http://june0122.github.io/2021/05/30/android-bnr-15/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] 앱 바와 메뉴</title>
      <link>http://june0122.github.io/2021/05/29/android-bnr-14/</link>
      <guid>http://june0122.github.io/2021/05/29/android-bnr-14/</guid>
      <pubDate>Sat, 29 May 2021 04:13:12 GMT</pubDate>
      
      <description>잘 디자인된 안드로이드 앱에서 중요한 컴포넌트 중 하나가 &lt;b&gt;앱 바 &lt;sup&gt;app bar&lt;/sup&gt;&lt;/b&gt;다. 앱 바는 사용자가 수행할 수 있는 액션과 화면 간을 이동할 수 있는 매커니즘을 제공한다. 더불어 디자인의 일관성도 제공한다. 앱 바의 오른쪽 위에는 메뉴를 넣을 수 있다. 메뉴는 &lt;b&gt;액션 항목 &lt;sup&gt;action item&lt;/sup&gt;&lt;/b&gt; 으로 구성되며, 액션 항목은 현재 화면과 관련된 액션 또는 앱 전체의 액션을 수행할 수 있다.</description>
      
      
      
      <content:encoded><![CDATA[<p>잘 디자인된 안드로이드 앱에서 중요한 컴포넌트 중 하나가 <strong>앱 바 <sup>app bar</sup></strong> 다. 앱 바는 사용자가 수행할 수 있는 액션과 화면 간을 이동할 수 있는 매커니즘을 제공한다. 더불어 디자인의 일관성도 제공한다.</p><p>앱 바는 <strong>액션 바 <sup>action bar</sup></strong> 또는 <strong>툴바 <sup>toolbar</sup></strong> 자세한 내용은 <a id = "a1"><a href="#f1">앱 바 vs 액션 바 vs 툴바</a></a> 에서 다룬다.</p><h2 id="appcompat의-기본-앱-바"><a class="markdownIt-Anchor" href="#appcompat의-기본-앱-바"></a> AppCompat의 기본 앱 바</h2><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/119933287-c5505600-bfbe-11eb-9e94-68569fcfa7c6.png'></p><p>앱 바를 포함하는 이유는 새로운 프로젝트를 생성할 때 안드로이드 스튜디오가 <strong>AppCompatActivity</strong>의 서브 클래스인 모든 액티비티에 앱 바를 기본으로 포함하도록 설정하기 때문이다. 이때 안드로이드 스튜디오가 다음 내용을 수행함으로써 아래와 같은 일이 가능해진다.</p><ul><li>Jetpack의 <strong>AppCompat</strong> 라이브러리 의존성을 추가한다.</li><li>앱 바를 포함하는 <strong>AppCompat</strong> 테마 중 하나를 적용한다.</li></ul><p><em>app/build.gradle</em> 파일을 열면 <strong>AppCompat</strong> 라이브러리의 의존성이 이미 추가되어 있는 걸 확인할 수 있다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.3.0&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AppCompat</strong>은 'application compatibility’의 단축어다. Jetpack의 AppCompat 라이브러리는 안드로이드 버전이 달라도 일관된 UI를 유지하는 데 핵심이 되는 클래스와 리소스들을 포함한다. AppCompat의 각 하위 패키지와 관련된 내용은 <a href="https://developer.android.com/jetpack/androidx/releases/appcompat?hl=ko">이곳</a>에서 확인 가능하다.</p><p>안드로이드 스튜디오 4.1.1 버전부터는 새 프로젝트를 생성할 때 앱의 테마를 자동으로 <code>Theme.MaterialComponents.DayNight.DarkActionBar</code>으로 설정한다. 이 테마는 <em>res/values/themes.xml</em>에 설정되어 있으며, 앱 전체의 기본 스타일을 지정한다.<small>(스타일 이름은 <strong>Theme.앱이름</strong>으로 지정된다.)</small></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;Theme.CriminalIntent&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;Theme.MaterialComponents.DayNight.DarkActionBar&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>애플리케이션의 테마는 매니페스트 파일에 애플리케이션 수준으로 지정되며, 액티비티마다 선택적으로 지정될 수도 있다. 매니페스트 파일의 <application> 태그에 포함된 android:theme 속성을 보면 아래와 같이 지정되어 있음을 볼 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.CriminalIntent&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="메뉴"><a class="markdownIt-Anchor" href="#메뉴"></a> 메뉴</h2><p>앱 바의 오른쪽 위에는 메뉴를 넣을 수 있다. 메뉴는 <strong>액션 항목 <sup>action item</sup></strong> 으로 구성되며 <small>(때로는 <strong>메뉴 항목</strong>이라고도 함)</small>, 액션 항목은 현재 화면과 관련된 액션 또는 앱 전체의 액션을 수행할 수 있다.</p><p>본문에선 사용자가 새로운 데이터를 추가할 수 있는 액션 항목을 생성해본다. 액션 항목의 이름은 문자열 리소스로 만들어야 하므로 <em>res/values/strings.xml</em>을 열어 새로운 액션을 나타내는 문자열을 추가한다.</p><blockquote><p>메뉴 문자열 추가 (res/values/strings.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;new_crime&quot;</span>&gt;</span>새로운 범죄<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="xml로-메뉴-정의하기"><a class="markdownIt-Anchor" href="#xml로-메뉴-정의하기"></a> XML로 메뉴 정의하기</h3><p>메뉴는 레이아웃과 유사한 리소스로, XML 파일로 생성해 프로젝트의 res/menu 디렉터리에 둔다. 그리고 코드에서 메뉴를 인플레이트해 사용할 수 있도록 앱을 빌드하면 메뉴 파일의 리소스 ID가 자동 생성된다.</p><blockquote><p>메뉴 파일 생성하기</p></blockquote><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/119936549-4fe78400-bfc4-11eb-9f57-52e9b913c1c8.png'></p><p>메뉴 파일의 이름이 CrimeListFragment의 레이아웃 파일의 이름과 같지만 메뉴 파일은 res/menu/ 에 생성된다.</p><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/119936581-5bd34600-bfc4-11eb-8db9-ec217538954d.png'></p><blockquote><p>CrimeListFragment의 메뉴 리소스 생성하기 (res/menu/fragment_crime_list.xml)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/new_crime&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@android:drawable/ic_menu_add&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/new_crime&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">&quot;ifRoom|withText&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>showAsAction 속성은 액션 항목이 앱 바 자체에 보이게 할 것인지, 아니면 <strong>오버플로 메뉴 <sup>overflow menu</sup></strong> 에 포함되어 보이게 될 것인지를 나타낸다. 여기서는 ifRoom과 withText 두 값을 같이 지정했으므로 앱 바에 공간이 있으면 액션 항목의 아이콘과 텍스트 모두 앱 바에 나타난다. 만일 아이콘을 보여줄 공간은 있지만 텍스트의 공간은 없다면 아이콘만 나타나고, 둘 다 보여줄 공간이 없으면 해당 액션 항목은 오버플로 메뉴에 들어간다.</p><p>showAsAction 속성의 다른 값으로는 always와 never가 있는데, always는 액션 항목을 항상 앱 바에 보여주기 때문에 권장하지 않는다. 대신에 ifRoom을 사용해서 안드로이드 운영체제가 결정하게 하는 것이 좋다. 자주 사용하지 않는 액션에는 never를 지정해서 오버플로 메뉴에 두는 것이 좋다. 화면이 너무 어수선해지는 것을 피하려면 사용자가 자주 사용할 액션 항목들만 앱 바에 두어야 한다. 따라서 위와 같이 ifRoom과 withText 두 값을 같이 지정하는 것이 좋다.</p><h4 id="앱의-네임스페이스"><a class="markdownIt-Anchor" href="#앱의-네임스페이스"></a> 앱의 네임스페이스</h4><p>fragment_crime_list.xml에서는 xmls 태그를 사용해서 새로운 네임스페이스로 app을 정의하는데, 보통의 android 네임스페이스와는 다르다. 여기서는 showAsAction 속성을 지정하기 위해 app 네임스페이스가 사용되었다.</p><p><strong>app</strong>과 같이 특이한 네임스페이스에는 <strong>AppCompat</strong> 라이브러리와 관련해서 필요하다. 앱 바 API는 안드로이드 3.0에서 처음 추가되었다<small>(당시에는 액션 바라고 했다)</small>. 원래 AppCompat 라이브러리의 앱 바는 더 이전 버전의 안드로이드를 지원하는 앱에 호환성 버전의 액션 바를 넣을 수 있게 만든 것으로, 액션 바를 지원하지 않는 안드로이드 버전을 실행하는 장치까지도 액션 바가 나타날 수 있게 한다.</p><p>AppCompat 라이브러리는 커스텀 showAsAction 속성을 정의하고 있으며, 안드로이드의 내장된 showAsAction 속성을 사용하지 않는다.</p><h3 id="메뉴-생성하기"><a class="markdownIt-Anchor" href="#메뉴-생성하기"></a> 메뉴 생성하기</h3><p>메뉴는 Activity 클래스의 콜백 함수가 관리한다. 메뉴가 필요하면 안드로이드는 Activity 함수인 <code>onCreateOptionsMenu(Menu)</code>를 호출한다.</p><p>그런데 이 앱에서는 액티비티가 아닌 프래그먼트에 구현된 코드를 호출한다. Fragment는 자신의 메뉴 콜백 함수들을 갖고 있다. 본문에서는 이 함수들을 CrimeListFragment에 구현한다. 메뉴를 생성하고 액션 항목의 선택에 응답하는 함수들은 다음과 같다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onCreateOptionsMenu(menu: Menu, inflater: MenuInflater)</span><br><span class="line">onOptionsItemSelected(item: MenuItem): <span class="built_in">Boolean</span></span><br></pre></td></tr></table></figure><p>CrimeListFragment.kt에서 <code>onCreateOptionsMenu(Menu, MenuInflater)</code>를 오버라이드해 fragment_crime_list.xml에 정의된 메뉴를 인플레이트하자.</p><blockquote><p>메뉴 리소스 인플레이트하기 (CrimeListFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeListFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDetach</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>, inflater: <span class="type">MenuInflater</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater)</span><br><span class="line">        inflater.inflate(R.menu.fragment_crime_list, menu)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 함수에서는 <code>MenuInflater.inflate(Int, Menu)</code>를 호출할 때 메뉴 파일의 리소스 ID를 인자로 전달한다. 이렇게 함으로써 파일에 정의된 액션 항목들로 Menu 인스턴스가 채워진다.</p><p>여기서는 슈퍼 클래스에 구현된 <code>onCreateOptionsMenu(...)</code>를 먼저 호출했다. 따라서 슈퍼 클래스에 정의된 어떤 메뉴 기능도 여전히 작동할 수 있다. 하지만 슈퍼 클래스인 Fragment의 <code>onCreateOptionsMenu(...)</code> 함수에서는 아무 일도 하지 않기 때문에 특별한 의미는 없다.</p><p>CrimeListFragment를 호스팅하는 액티비티가 운영체제로부터 자신의 <code>onCreateOptionsMenu(...)</code> 콜백 함수 호출을 받았을 때 FragmentManager는 <code>Fragment.onCreateOptionsMenu(Menu, MenuInflater)</code>를 호출하는 책임을 갖는다. 단, 다음의 Fragment 함수를 호출해서 CrimeListFragment가 <code>onCreateOptionsMenu(...)</code> 호출을 받아야 함을 FragmentManager가 명시적으로 알려주어야 한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setHasOptionsMenu(hasMenu: <span class="built_in">Boolean</span>)</span><br></pre></td></tr></table></figure><p>따라서 <code>CrimeListFragment.onCreate(Bundle?)</code>에 CrimeListFragment가 메뉴 콜백 호출을 받아야 함을 FragmentManager에 알려주는 코드를 추가한다.</p><blockquote><p>메뉴 콜백 호출을 받도록 하기 (CrimeListFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeListFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAttach</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setHasOptionsMenu(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>앱 바에 나타난 범죄 추가 액션 항목 아이콘과 텍스트</p></blockquote><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/119939626-1f561900-bfc9-11eb-844b-52512102a48e.png'></p><blockquote><p>앱 바의 아이콘 제목 보기</p></blockquote><p>대부분의 폰에서는 아이콘을 보여줄 공간밖에 없기에 액션 항목의 텍스트가 표시되지 않는다. 앱 바의 + 아이콘을 길게 누르면 텍스트를 볼 수 있다.</p><p align = 'center'><img width = '300' src = 'https://user-images.githubusercontent.com/39554623/119968508-8a631800-bfe8-11eb-928b-dce3f0458bae.gif'></p><h3 id="메뉴-선택에-응답하기"><a class="markdownIt-Anchor" href="#메뉴-선택에-응답하기"></a> 메뉴 선택에 응답하기</h3><p>사용자가 <strong>‘새로운 범죄’</strong> 액션 항목을 눌렀을 때 그에 대한 응답을 하려면 CrimeListFragment가 데이터베이스에 새로운 범죄 데이터<small>(Crime 인스턴스)</small>를 추가할 방법이 필요하다. 그러기 위해서는 리포지터리의 addCrime(Crime) 함수를 호출하는 코드를 CrimeListViewModel에 추가하면 된다.</p><blockquote><p>새로운 범죄 데이터 추가하기 (CrimeListViewModel.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeListViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> crimeRepository = CrimeRepository.<span class="keyword">get</span>()</span><br><span class="line">    <span class="keyword">val</span> crimeListLiveData = crimeRepository.getCrimes()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addCrime</span><span class="params">(crime: <span class="type">Crime</span>)</span></span> &#123;</span><br><span class="line">        crimeRepository.addCrime(crime)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용자가 메뉴 항목을 누르면 프래그먼트에서 <code>onOptionsItemSelected(MenuItem)</code> 함수의 콜백 호출을 받게 되고, 이 함수는 사용자가 선택한 MenuItem의 인스턴스를 인자로 받는다.</p><p>지금 메뉴에는 액션 항목 하나만 있지만, 메뉴는 대개 둘 이상의 액션 항목을 갖는다. 이때 어떤 액션 항목이 선택되었는지는 MenuItem의 ID를 확인해서 알아낸 뒤 해당 항목에 적합한 응답을 하면된다. 이 ID는 메뉴 파일의 MenuItem에 지정한 리소스 ID와 일치한다.</p><p>이제 CrimeListFragment.kt의 <code>onOptionsItemSeleceted(MenuItem)</code> 함수를 구현해서 MenuItem의 선택에 응답하게 한다. 이 함수에서는 새로운 Crime 객체를 생성하고 데이터베이스에 추가한다. 그다음에 부모 액티비티에 구현된 <code>onCrimeSelected(...)</code> 콜백 함수를 호출해 CrimeListFragment를 CrimeFragment로 교체한다. 이렇게 하면 데이터베이스에 새로 추가된 범죄 데이터가 상세 내역 화면에 보이고, 사용자가 변경할 수도 있게 된다.</p><blockquote><p>메뉴 선택에 응답하기 (CrimeListFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeListFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>, inflater: <span class="type">MenuInflater</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater)</span><br><span class="line">        inflater.inflate(R.menu.fragment_crime_list, menu)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOptionsItemSelected</span><span class="params">(item: <span class="type">MenuItem</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> (item.itemId) &#123;</span><br><span class="line">            R.id.new_crime -&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> crime = Crime()</span><br><span class="line">                crimeListViewModel.addCrime(crime)</span><br><span class="line">                callbacks?.onCrimeSelected(crime.id)</span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onOptionsItemSeleceted(MenuItem)</code> 함수는 Boolean 값을 반환한다. 즉, 선택된 MenuItem을 정상적으로 처리하고 나면 더 이상의 처리가 필요 없음을 나타내는 true를 반환해야 한다. 만일 false를 반환하면, 호스팅 액티비티의 <code>onOptionsItemSeleceted(MenuItem)</code> 함수를 호출해 메뉴 처리가 계속된다. 그리고 처리를 구현하지 않은 액션 항목 ID에는 슈퍼 클래스에 구현된 <code>onOptionsItemSeleceted(MenuItem)</code> 함수를 호출한다.</p><blockquote><p>새로운 범죄 데이터 추가</p></blockquote><p align = 'center'><img width = '250' src = 'https://user-images.githubusercontent.com/39554623/119941477-9c828d80-bfcb-11eb-8639-d00e2c9b678f.gif'></p><h2 id="궁금증-해소-️-b-id-f1-앱-바-vs-액션-바-vs-툴바b"><a class="markdownIt-Anchor" href="#궁금증-해소-️-b-id-f1-앱-바-vs-액션-바-vs-툴바b"></a> 궁금증 해소 💁🏻‍♂️ : <b id = "f1"> 앱 바 vs 액션 바 vs 툴바</b>  <a href="#a1"> ↩</a></h2><p>앱 바를 ‘툴바’ 또는 '액션 바’라고 하는 경우를 심심치 않게 볼 수 있으며 안드로이드 문서에서도 이 용어들을 혼용해서 사용한다. 하지만 앱 바, 액션 바, 툴바는 정말로 같은 것일까? 이 용어들은 서로 관련이 있으나 정확하게 같은 것은 아니며, UI 설계 요소로는 '앱 바’라고 한다.</p><p>안드로이드 5.0<small>(롤리팝, API 레벨 21)</small> 이전에는 앱 바가 <strong>ActionBar</strong> 클래스를 사용해서 구현되었다. 따라서 액션 바와 앱 바 두 용어는 같은 것으로 간주했다. 그러나 안드로이드 5.0부터는 앱 바를 구현하는 방법으로 <strong>Toolbar</strong> 클래스가 도입되었다.</p><p>2021년을 기준으로 <strong>AppCompat</strong> 라이브러리는 Jetpack의 <strong>Toolbar</strong> 위젯을 사용해서 액션 바<small>(앱 바)</small>를 아래와 같이 구현한다.</p><blockquote><p>레이아웃 검사기로 본 액션 바</p></blockquote><p><small>앱을 실행하고 리스트에서 항목을 하나 선택해 상세 내역의 화면이 나타나게 한다. 그리고 안드로이드 스튜디오 메뉴 바의 <code>Tools -&gt; Layout Inspector</code> 를 선택하면 아래와 같이 레이아웃 검사기 도구 창이 열린다. 그리고 왼쪽의 컴포넌트 트리 패널에서 원하는 레이아웃이나 컴포넌트를 확장하고 선택하면 중앙의 레이아웃 화면에 표시해주며, 속성과 상세 정보를 오른쪽 패널에 보여준다.</small></p><p align = 'center'><img width = '850' src = 'https://user-images.githubusercontent.com/39554623/119947070-4c5af980-bfd2-11eb-9c37-ecf271bc5168.png'></p><p>ActionBar와 Toolbar는 매우 유사한 컴포넌트다. 그러나 툴바는 변경된 UI를 가지며 액션 바보다 유연성 있게 사용할 수 있는 반면에, 액션 바는 항상 화면의 제일 위쪽에 나타나며 한 화면에 하나만 있는 등 많은 제약을 가졌다. 게다가 액션 바의 크기는 정해져 있어서 변경할 수 없지만, 툴바는 이런 제약을 갖지 않는다.</p><p>본문에서는 AppCompat 테마 중 하나에서 제공한 툴바를 사용했지만, 액티비티나 프래그먼트의 레이아웃 파일에 포함된 뷰로 툴바를 포함할 수 있다. 그리고 화면의 어떤 위치에도 툴바를 둘 수 있고 여러 개를 넣을 수도 있다. 이런 유연성 덕분에 흥미로운 화면 디자인이 가능하다. 예를 들어, 각 프래그먼트가 자신의 툴바를 갖는다고 해보자. 그리고 한 화면에서 동시에 여러 개의 프래그먼트를 수용한다면, 화면 위에 하나의 툴바를 공유하지 않고 각 프래그먼트가 자신의 툴바를 갖고 나타날 수 있다. 또한 툴바는 내부에 다른 뷰들을 둘 수 있고 높이도 조정할 수 있어서 앱의 작동 방식에 훨씬 더 좋은 유연성을 제공한다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Android/">Android</category>
      
      <category domain="http://june0122.github.io/categories/Android/Guide/">Guide</category>
      
      
      <category domain="http://june0122.github.io/tags/Android/">Android</category>
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/AppCompat/">AppCompat</category>
      
      <category domain="http://june0122.github.io/tags/App-Bar/">App Bar</category>
      
      <category domain="http://june0122.github.io/tags/Action-Bar/">Action Bar</category>
      
      <category domain="http://june0122.github.io/tags/Toolbar/">Toolbar</category>
      
      <category domain="http://june0122.github.io/tags/Menu/">Menu</category>
      
      
      <comments>http://june0122.github.io/2021/05/29/android-bnr-14/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Android] Dialog - 대화상자</title>
      <link>http://june0122.github.io/2021/05/28/android-bnr-13/</link>
      <guid>http://june0122.github.io/2021/05/28/android-bnr-13/</guid>
      <pubDate>Fri, 28 May 2021 01:20:19 GMT</pubDate>
      
      <description>&lt;b&gt;대화상자 &lt;sup&gt;Dialog&lt;/sup&gt;&lt;/b&gt;는 사용자의 주의를 끌고 입력을 받는 데 사용되며 사용자의 선택을 받거나 중요한 정보를 보여줄 때 유용하다. DatePickerDialog는 사용자가 날짜를 선택할 수 있게 해주며 사용자 선택을 알아내기 위해 구현하는 리스너 인터페이스를 제공한다. AlertDialog는 다목적의 Dialog 서브 클래스이며 커스텀 대화상자를 생성할 때 흔히 사용한다.</description>
      
      
      
      <content:encoded><![CDATA[<p><strong>대화상자 <sup>Dialog</sup></strong> 는 사용자의 주의를 끌고 입력을 받는 데 사용되며 사용자의 선택을 받거나 중요한 정보를 보여줄 때도 유용하다.</p><blockquote><p>범죄 발생일자를 선택하는 대화상자</p></blockquote><p align = 'center'><img width = '200' src = 'https://user-images.githubusercontent.com/39554623/119682086-91214c00-be7d-11eb-9907-b8a5cd9c29b1.png'></p><p>위의 대화상자는 <strong>AlertDialog</strong>의 서브 클래스인 <strong>DatePickerDialog</strong>의 인스턴스다. DatePickerDialog는 사용자가 날짜를 선택할 수 있게 해주며 사용자 선택을 알아내기 위해 구현하는 리스너 인터페이스를 제공한다. AlertDialog는 다목적의 Dialog 서브 클래스이며 커스텀 대화상자를 생성할 때 흔히 사용한다.</p><h2 id="dialogfragment-생성하기"><a class="markdownIt-Anchor" href="#dialogfragment-생성하기"></a> DialogFragment 생성하기</h2><p>DatePickerDialog를 화면에 보여줄 때는 <strong>Fragment의 서브 클래스인 DialogFragment 인스턴스에 포함시키는 것이 좋다.</strong></p><p>DialogFragment 없이 DatePickerDialog를 보여줄 수 있지만, FragmentManager로 DatePickerDialog를 관리하는 것이 유연성이 좋다. 그냥 DatePickerDialog만 사용하면 장치가 회전할 때 화면에서 사라지지만, DatePickerDialog가 프래그먼트에 포함되면 장치 회전 후에도 대화상자가 다시 생성되어 화면에 다시 나타난다.</p><blockquote><p>MainActivity에 의해 호스팅되는 두 프래그먼트의 객체 다이어그램</p></blockquote><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/119649087-337d0780-be5d-11eb-8c3f-58d1428e3df0.jpeg'></p><p>할 일은 다음과 같다.</p><ul><li>DatePickerFragment 클래스 생성한다.</li><li>DatePickerDialog 인스턴스를 생성해 대화상자를 만든다.</li><li>FragmentManager를 통해 대화상자를 화면에 보여준다.</li></ul><blockquote><p>DialogFragment 생성하기</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.DialogFragment</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span>: <span class="type">DialogFragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog &#123;</span><br><span class="line">        <span class="keyword">val</span> calendar = Calendar.getInstance()</span><br><span class="line">        <span class="keyword">val</span> initialYear = calendar.<span class="keyword">get</span>(Calendar.YEAR)</span><br><span class="line">        <span class="keyword">val</span> initialMonth = calendar.<span class="keyword">get</span>(Calendar.MONTH)</span><br><span class="line">        <span class="keyword">val</span> initialDay = calendar.<span class="keyword">get</span>(Calendar.DAY_OF_MONTH)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> DatePickerDialog(</span><br><span class="line">            requireContext(),</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            initialYear,</span><br><span class="line">            initialMonth,</span><br><span class="line">            initialDay</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DatePickerDialog 생성자는 여러 개의 인자를 받는다. 첫 번째는 이 뷰에서 필요한 리소스를 사용하려면 지정해야 하는 Context 객체다. 두 번째는 날짜 리스너로 본문의 뒤에서 추가한다. 나머지 세 개는 년, 월, 일의 초기값으로, 일단 오늘 날짜로 초기화한다.</p><h3 id="dialogfragment-보여주기"><a class="markdownIt-Anchor" href="#dialogfragment-보여주기"></a> DialogFragment 보여주기</h3><p>다른 모든 프래그먼트처럼 DialogFragment의 인스턴스도 호스팅 액티비티의 FragmentManager가 관리한다.</p><p>FragmentManager에 추가되는 DialogFragment를 화면에 나타나게 하려면 다음 프래그먼트 인스턴스 함수 중 하나를 호출하면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show(manager: FragmentManager, tag: String)</span><br><span class="line">show(transaction: FragmentTransaction, tag: String)</span><br></pre></td></tr></table></figure><p>String 인자는 FragmentManager의 리스트에서 DialogFragment를 고유하게 식별할 때 사용된다.</p><p>FragmentManager나 FragmentTransaction 중 어떤 것을 사용하는가는 프로그래머에게 달렸다.</p><ul><li>FragmentTransaction을 인자로 전달할 때는 <strong>직접 트랜잭션을 생성</strong>한 후 커밋해야 한다.</li><li>FragmentManager를 인자로 전달하면 <strong>트랜잭션이 자동으로 생성</strong>되어 커밋된다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">&quot;CrimeFragment&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> ARG_CRIME_ID = <span class="string">&quot;crime_id&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> DIALOG_DATE = <span class="string">&quot;DialogDate&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        ...</span><br><span class="line">        solvedCheckBox = view.findViewById(R.id.crime_solved) <span class="keyword">as</span> CheckBox</span><br><span class="line"></span><br><span class="line"><span class="comment">//        dateButton.apply &#123;</span></span><br><span class="line"><span class="comment">//            text = crime.date.toString()</span></span><br><span class="line"><span class="comment">//            isEnabled = false</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        solvedCheckBox.apply &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dateButton.setOnClickListener &#123; </span><br><span class="line">            DatePickerFragment().apply &#123; </span><br><span class="line">                show(<span class="keyword">this</span><span class="symbol">@CrimeFragment</span>.parentFragmentManager, DIALOG_DATE)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>this@CrimeFragment</code>는 DatePickerFragment가 아닌 CrimeFragment로부터 <code>requireFragmentManager()</code>를 호출하기 위해 필요하다. 여기서는 <em>apply</em> 블록 내부의 <code>this</code>가 DatePickerFragment를 참조하므로 this 다음에 <code>@CrimeFragment</code>를 지정했다.</p><blockquote><p><em>apply</em> 블록 내부의 <code>this</code>가 DatePickerFragment를 참조</p></blockquote><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/119652122-ae93ed00-be60-11eb-98f7-f6999424dfe5.png'></p><p>DialogFragment의 <code>show(FragmentManager, String)</code> 함수에서 첫 번째 인자인 프래그먼트매니저 인스턴스 참조는 null 값이 될 수 없는 타입니다. 그런데 Fragment.fragmentManager 속성은 null 값이 될 수 있는 타입이므로 첫 번재 인자로 전달 할 수 없다. 따라서 여기서는 Fragment의 <code>getParentFragmentManager()</code> 함수를 사용했는데 이 함수는 null이 아닌 FragmentManager 인스턴스를 반환하기 때문이다. 만일 <code>Fragment.requireFragmentManager()</code>가 호출되었는데 프래그먼트의 fragmentManager 속성이 null이면 IllegalStateException이 발생한다. 이 예외는 해당 프래그먼트와 연관된 프래그먼트 매니저가 없음을 나타낸다.</p><blockquote><p>날짜 선택 대화 상자</p></blockquote><p align = 'center'><img width = '200' src = 'https://user-images.githubusercontent.com/39554623/119654067-029fd100-be63-11eb-83fd-4c7cbb42e986.png'></p><h2 id="두-프래그먼트-간의-데이터-전달하기"><a class="markdownIt-Anchor" href="#두-프래그먼트-간의-데이터-전달하기"></a> 두 프래그먼트 간의 데이터 전달하기</h2><p><a href="https://june0122.github.io/2021/05/17/android-bnr-06/">인텐트 엑스트라를 사용한 두 액티비티 간의 데이터 전달</a>, <a href="https://june0122.github.io/2021/05/26/android-bnr-12/">콜백 인터페이스를 사용한 프래그먼트와 액티비티 간의 데이터 전달, 프래그먼트 인자를 사용한 액티비티로부터 프래그먼트로의 데이터 전달</a>에 관해서는 다른 글에 정리되어 있다.</p><p>본문에서는 같은 액티비티에 의해 호스팅되는 두 프래그먼트, 즉 CrimeFragment와 DatePickerFragment 간의 데이터 전달이 필요하다.</p><p align = 'center'><img width = '400' src = 'https://user-images.githubusercontent.com/39554623/119649085-324bda80-be5d-11eb-9a3b-c4f164105e45.jpeg'></p><p>DatePickerFragment에 범죄 발생일자 <small>(Crime 객체의 date)</small>를 전달하기 위해 <code>newInstance(Date)</code> 함수를 작성하고, 이 함수의 인자로 전달된 발생일자를 DatePickerFragment의 프래그먼트 인자로 전달한다.</p><p>그다음에 대화상자에서 사용자가 선택한 날짜를 DatePickerFragment에서 CrimeFragment로 돌려준다. 더불어 사용자가 선택한 날짜를 인자로 받는 콜백 인스턴스 함수를 DatePickerFragment에 선언하기 위해 CrimeFragment가 모델 계층 <small>(Crime 객체)</small>과 자신의 뷰 <small>(범죄 상세 내역 화면)</small>를 변경한다.</p><blockquote><p>CrimeFragment와 DatePickerFragment 간의 처리 흐름</p></blockquote><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/119649074-30821700-be5d-11eb-8072-2063c4718276.jpeg'></p><h3 id="datepickerfragment에-데이터-전달하기"><a class="markdownIt-Anchor" href="#datepickerfragment에-데이터-전달하기"></a> DatePickerFragment에 데이터 전달하기</h3><p>DatePickerFragment에 현재의 범죄 발생일자를 전달하고자 여기서는 DatePickerFragment의 인자 번들에 해당 날짜를 저장한다.</p><p>일반적으로 프래그먼트 인자의 생성과 설정은 프래그먼트 생성자를 대체하는 <code>newInstance(...)</code> 함수에서 처리한다. 따라서 DatePickerFragment.kt에서 동반 객체 내부에 <code>newInstance(Date)</code> 함수를 추가하면 된다.</p><blockquote><p><code>newInstance(Date)</code> 함수를 추가하기 (DatePickerFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> ARG_DATE = <span class="string">&quot;date&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span>: <span class="type">DialogFragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newInstance</span><span class="params">(date: <span class="type">Date</span>)</span></span>: DatePickerFragment &#123;</span><br><span class="line">            <span class="keyword">val</span> args = Bundle().apply &#123; </span><br><span class="line">                putSerializable(ARG_DATE, date)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> DatePickerFragment().apply &#123; </span><br><span class="line">                arguments = args</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 <code>arguments</code>는 DatePickerFragment의 속성 <small>(최상위 슈퍼 클래스인 Fragment로부터 DialogFragment로 상속되고 다시 DatePickerFragment로 상속됨)</small>이며, 프래그먼트 인자를 갖는다.</p><p>그다음에 CrimeFragment에서 DatePickerFragment의 생성자 호출 코드를 삭제하고, <code>DatePickerFragment.newInstance(Date)</code></p><blockquote><p><code>newInstance(...)</code> 호출 추가하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    dateButton.setOnClickListener &#123;</span><br><span class="line"><span class="comment">//      DatePickerFragment().apply &#123;</span></span><br><span class="line">        DatePickerFragment.newInstance(crime.date).apply &#123;</span><br><span class="line">            show(<span class="keyword">this</span><span class="symbol">@CrimeFragment</span>.parentFragmentManager, DIALOG_DATE)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DatePickerFragment는 Date 객체의 데이터를 사용해서 DatePickerDialog를 초기화해야 한다. DatePickerDialog를 초기화하려면 월, 일, 년의 정수 값들이 필요하다. 그러나 Date 객체는 타임스탬프 형태이므로 이런 형식의 정수를 제공할 수 없다.</p><p>따라서 필요한 정수들을 얻으려면 Date 객체를 사용해서 Calendar 객체를 생성해야 한다. 그렇게 해야 이 Calendar 객체로부터 필요한 형태의 정수를 얻을 수 있다.</p><p>프래그먼트 인자로부터 얻은 Date 객체의 값을 Calendar 객체로 옮긴 후 DatePickerDialog를 초기화하는 코드를 DatePickerFragment.kt의 <code>onCreateDialog(Bundle?)</code>에 추가한다.</p><blockquote><p>DatePickerDialog 초기화하기 (DatePickerFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span>: <span class="type">DialogFragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog &#123;</span><br><span class="line">        <span class="keyword">val</span> date = arguments?.getSerializable(ARG_DATE) <span class="keyword">as</span> Date <span class="comment">// ①</span></span><br><span class="line">        <span class="keyword">val</span> calendar = Calendar.getInstance()</span><br><span class="line">        calendar.time = date <span class="comment">// ②</span></span><br><span class="line">        <span class="keyword">val</span> initialYear = calendar.<span class="keyword">get</span>(Calendar.YEAR)</span><br><span class="line">        <span class="keyword">val</span> initialMonth = calendar.<span class="keyword">get</span>(Calendar.MONTH)</span><br><span class="line">        <span class="keyword">val</span> initialDay = calendar.<span class="keyword">get</span>(Calendar.DAY_OF_MONTH)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DatePickerDialog(</span><br><span class="line">            requireContext(),</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            initialYear,</span><br><span class="line">            initialMonth,</span><br><span class="line">            initialDay</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제는 CrimeFragment가 DatePickerFragment에 범죄 발생일자를 전달할 수 있다.</p><h3 id="crimefragment로-데이터-반환하기"><a class="markdownIt-Anchor" href="#crimefragment로-데이터-반환하기"></a> CrimeFragment로 데이터 반환하기</h3><p>CrimeFragment가 DatePickerFragment로부터 사용자가 선택한 날짜를 돌려받으려면 두 프래그먼트 간의 관계를 계속해서 유지하고 관리하는 방법이 필요하다.</p><p>액티비티의 경우에 <code>startActivityForResult(...)</code> 함수를 호출하면 ActivityManager가 부모-자식 액티비티 관계를 계속해서 유지하고 관리한다. 따라서 자식 액티비티가 끝나면 이것의 결과를 어떤 액티비티가 받아야 하는지 ActivityManager가 안다.</p><h4 id="대상-프래그먼트-설정하기"><a class="markdownIt-Anchor" href="#대상-프래그먼트-설정하기"></a> 대상 프래그먼트 설정하기</h4><p>CrimeFragment를 DatePickerFragment의 <strong>대상 프래그먼트 <sup>target fragment</sup></strong> 로 만들면 액티비티의 경우와 유사한 연결을 만들 수 있다. 그리고 CrimeFragment 인스턴스와 DatePickerFragment 인스턴스 모두가 안드로이드 운영체제에 의해 소멸되었다가 다시 생성되더라도 두 프래그먼트 간의 연결은 자동으로 복구된다. 이렇게 하려면 다음 Fragment 함수를 호출하면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTargetFragment(fragment: Fragment, requestCode: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure><p>이 함수는 대상이 되는 프래그먼트와 요청 코드를 인자로 받는데, 이 요청 코드는 <code>startActivityForResult(...)</code>의 인자로 전달되는 것과 같은 의미를 갖는다.</p><p>이때 FragmentManager는 대상 프래그먼트와 요청 코드를 계속 관리한다. 대상을 설정했던 프래그먼트의 targetFragment와 targetRequestCode 속성을 사용하면 이 정보를 알 수 있다.</p><p>이제 CrimeFragment.kt에서 요청 코드의 상수를 정의하고 DatePickerFragment 인스턴스의 대상 프래그먼트로 CrimeFragment를 설정한다.</p><blockquote><p>대상 프래그먼트 설정하기 (CriemFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> DIALOG_DATE = <span class="string">&quot;DialogDate&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_DATE = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        dateButton.setOnClickListener &#123;</span><br><span class="line">            DatePickerFragment.newInstance(crime.date).apply &#123;</span><br><span class="line">                setTargetFragment(<span class="keyword">this</span><span class="symbol">@CrimeFragment</span>, REQUEST_DATE)</span><br><span class="line">                show(<span class="keyword">this</span><span class="symbol">@CrimeFragment</span>.parentFragmentManager, DIALOG_DATE)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="대상-프래그먼트로-데이터-전달하기"><a class="markdownIt-Anchor" href="#대상-프래그먼트로-데이터-전달하기"></a> 대상 프래그먼트로 데이터 전달하기</h4><p>CrimeFragment와 DatePickerFragment가 연결되었으니 CrimeFragment로 데이터<small>(사용자가 선택한 날짜)</small>를 반환해야 한다. 여기서는 DatePickerFragment에 콜백 인터페이스를 생성한다. 이때 이 콜백 인터페이스는 CrimeFragment가 구현한다.</p><p>우선 DatePickerFragment에 <code>onDateSelected()</code>라는 하나의 함수를 갖는 콜백 인터페이스를 생성한다.</p><blockquote><p>콜백 인터페이스 생성하기 (DatePickerFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span>: <span class="type">DialogFragment</span></span>() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Callbacks</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onDateSelected</span><span class="params">(date: <span class="type">Date</span>)</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음으로 Callbacks 인터페이스를 CrimeFragment에 구현한다. 이때 <code>onDateSelected(Date)</code>에서는 인자로 전달된 Date 객체를 Crime 객체의 date 속성<small>(CrimeFragment의 crime 속성이 참조함)</small>에 설정하고 UI를 변경한다.</p><blockquote><p>콜백 인터페이스 구현하기 (CrimeFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrimeFragment</span> : <span class="type">Fragment</span></span>(), DatePickerFragment.Callbacks &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDateSelected</span><span class="params">(date: <span class="type">Date</span>)</span></span> &#123;</span><br><span class="line">        crime.date = date</span><br><span class="line">        updateUI()</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제는 CrimeFragment 사용자가 선택한 날짜를 처리할 수 있으므로 이 날짜를 DatePickerFragment가 전달해야 한다. DatePickerDialog의 리스너를 DatePickerFragment에 추가하면, 이 리스너에서는 사용자가 선택한 날짜를 CrimeFragment에 전달한다.</p><blockquote><p>사용자가 선택한 날짜 전달하기 (DatePickerFragment.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatePickerFragment</span> : <span class="type">DialogFragment</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog &#123;</span><br><span class="line">        <span class="keyword">val</span> dateListener = DatePickerDialog.OnDateSetListener &#123; _: DatePicker, year: <span class="built_in">Int</span>, month: <span class="built_in">Int</span>, day: <span class="built_in">Int</span> -&gt;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> resultDate: Date = GregorianCalendar(year, month, day).time</span><br><span class="line"></span><br><span class="line">            targetFragment?.let &#123; fragment -&gt;</span><br><span class="line">                (fragment <span class="keyword">as</span> Callbacks).onDateSelected(resultDate)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> date = arguments?.getSerializable(ARG_DATE) <span class="keyword">as</span> Date</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DatePickerDialog(</span><br><span class="line">            requireContext(),</span><br><span class="line"><span class="comment">//            null,</span></span><br><span class="line">            dateListener,</span><br><span class="line">            initialYear,</span><br><span class="line">            initialMonth,</span><br><span class="line">            initialDay</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OnDateSetListener는 사용자가 선택한 날짜를 받는데 사용된다. 첫 번째 매개변수는 결과가 산출되는 DatePicker 객체이며, 여기서는 사용하지 않으므로 밑줄 <code>_</code>을 지정하였다.<small>(코틀린에서 사용되지 않은 매개변수를 나타낼 때 밑줄을 사용)</small></p><p>선택된 날짜는 년, 월, 일 형식으로 제공된다. 그러나 이 값들을 Date 타입으로 CrimeFragment에 전달해야 하므로 GregorianCalendar의 인자로 이 값들을 전달한 후 <code>time</code> 속성을 사용해서 Date 객체를 얻는다.</p><p><code>targetFragment</code> 속성은 DatePickerFragment와 연관된 프래그먼트<small>(여기선 CrimeFragment)</small> 인스턴스 참조를 갖는다. 이 속성은 null 값을 가질 수 있으므로 <em>null에 안전한 let 블록이 사용되었다.</em> let 블록에서는 <code>targetFragment</code> 속성이 참조하는 프래그먼트 인스턴스의 타입을 Callbacks 인터페이스 타입으로 변환한 후, 새로운 날짜를 인자로 전달해 <code>onDateSelected()</code> 함수를 호출한다. 따라서 CrimeFragment에 구현된 <code>onDateSelected()</code> 함수가 호출되어 실행되므로, 사용자가 선택한 날자가 CrimeFragment에 전달될 수 있다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Android/">Android</category>
      
      <category domain="http://june0122.github.io/categories/Android/Guide/">Guide</category>
      
      
      <category domain="http://june0122.github.io/tags/Android/">Android</category>
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Dialog/">Dialog</category>
      
      
      <comments>http://june0122.github.io/2021/05/28/android-bnr-13/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
