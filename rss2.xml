<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>카미유 테크 블로그</title>
    <link>http://june0122.github.io/</link>
    
    <atom:link href="http://june0122.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 23 Jul 2021 21:58:37 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Android] View Binding (뷰 바인딩)</title>
      <link>http://june0122.github.io/2021/07/24/android-docs-view-binding/</link>
      <guid>http://june0122.github.io/2021/07/24/android-docs-view-binding/</guid>
      <pubDate>Fri, 23 Jul 2021 21:48:09 GMT</pubDate>
      
      <description>&lt;b&gt;뷰 바인딩&lt;small&gt;(View Binding)&lt;/small&gt;&lt;/b&gt; 기능은 뷰와 상호작용하는 코드를 쉽게 작성할 수 있게 해준다. 모듈에서 사용 설정&lt;small&gt;(enable)&lt;/small&gt;된 뷰 바인딩은 각 XML 레이아웃 파일의 &lt;b&gt;바인딩 클래스&lt;small&gt;(binding class)&lt;/small&gt;&lt;/b&gt;를 생성한다. 바인딩 클래스의 인스턴스는 상응하는 레이아웃에 ID가 있는 모든 뷰의 직접 참조가 포함된다.</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><b>뷰 바인딩<small>(View Binding)</small></b> 기능은 뷰와 상호작용하는 코드를 쉽게 작성할 수 있게 해준다.</li><li>모듈에서 사용 설정<small>(enable)</small>된 뷰 바인딩은 각 XML 레이아웃 파일의 <b>바인딩 클래스<small>(binding class)</small></b>를 생성한다.</li><li>바인딩 클래스의 인스턴스는 상응하는 레이아웃에 ID가 있는 모든 뷰의 직접 참조가 포함된다.</li><li>대부분의 경우, 뷰 바인딩이 <code>findViewById</code>를 대체한다.</li></ul><h2 id="설정-방법"><a class="markdownIt-Anchor" href="#설정-방법"></a> 설정 방법</h2><p>뷰 바인딩은 모듈 별로 사용 설정이 된다<small>(enabled on a module by module)</small>.</p><p>모듈에서 뷰 바인딩을 사용 설정<small>(enable)</small> 하려면, module 레벨의 <code>build.gradle</code> 파일에 <code>viewBinding</code> 빌드 옵션을 아래의 예시와 같이 <code>true</code>로 변경한다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">        ...</span><br><span class="line">        viewBinding &#123;</span><br><span class="line">            enabled = <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>바인딩 클래스를 생성하는 동안 레이아웃 파일을 무시하려면 <code>tools:viewBindingIgnore=&quot;true&quot;</code> 속성을 레이아웃 파일의 루트 뷰에 추가해야 한다.</p><h2 id="사용법"><a class="markdownIt-Anchor" href="#사용법"></a> 사용법</h2><p>모듈에 뷰 바인딩이 사용 설정되면, 모듈에 포함된 각 XML 레이아웃 파일의 바인딩 클래스가 생성된다.</p><p>각 바인딩 클래스에는 루트 뷰와 ID가 있는 모든 뷰에 대한 참조를 포함한다.</p><p>생성된 바인딩 클래스의 이름은 XML 파일의 이름을 카멜 표기법으로 변환하고 끝에 'Binding’이 추가된다.</p><blockquote><p><code>result_profile.xml</code> 이름을 가진 레이아웃 파일의 예시</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span> <span class="attr">android:cropToPadding</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@drawable/rounded_button&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>생성된 바인딩 클래스의 이름은 <code>ResultProfileBinding</code>이 된다. 이 클래스에는 <code>name</code>이라는 <code>TextView</code>와 <code>button</code>이라는 <code>Button</code> 등 두 개의 필드가 있다. 레이아웃의 <code>ImageView</code>에는 ID가 없으므로 바인딩 클래스에 참조가 없다.</p><p>모든 바인딩 클래스는 <code>getRoot()</code> 메서드를 포함하고 있는데, <strong>상응하는 레이아웃 파일의 루트 뷰에 대한 직접 참조를 제공</strong>한다.</p><p>위의 예시 코드에서는 <code>ResultProfileBinding</code> 클래스의 <code>getRoot()</code> 메서드가 <code>LinearLayout</code> 루트 뷰를 반환한다.</p><h3 id="액티비티에서의-뷰-바인딩-사용법"><a class="markdownIt-Anchor" href="#액티비티에서의-뷰-바인딩-사용법"></a> 액티비티에서의 뷰 바인딩 사용법</h3><p>액티비티에 사용할 바인딩 클래스 인스턴스를 설정하려면, 액티비티의 <code>onCreate()</code> 메서드에서 다음 두 단계를 따라야 한다.</p><ol><li>생성된 바인딩 클래스에 포함된 static <code>inflate()</code> 메서드를 호출한다. 이를 통해 액티비티에서 사용할 바인딩 클래스의 인스턴스를 생성한다.</li><li><code>getRoot()</code>메서드를 호출하거나 <a href="https://kotlinlang.org/docs/properties.html#declaring-properties">Kotlin property syntax</a>를 사용하여 루트 뷰의 참조를 가져온다.</li><li>루트 뷰를 <code>setContentView()</code>에 전달<small>(pass)</small>하여 화면 상의 활성 뷰로 만든다.</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ResultProfileBinding</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    binding = ResultProfileBinding.inflate(layoutInflater)</span><br><span class="line">    <span class="keyword">val</span> view = binding.root</span><br><span class="line">    setContentView(view)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 바인딩 클래스의 인스턴스를 사용하여 뷰를 참조할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binding.name.text = viewModel.name</span><br><span class="line">binding.button.setOnClickListener &#123; viewModel.userClicked() &#125;</span><br></pre></td></tr></table></figure><h3 id="프래그먼트에서의-뷰-바인딩-사용법"><a class="markdownIt-Anchor" href="#프래그먼트에서의-뷰-바인딩-사용법"></a> 프래그먼트에서의 뷰 바인딩 사용법</h3><p>프래그먼트에서 사용할 바인딩 클래스의 인스턴스를 설정하려면, 프래그먼트의 <code>onCreateView()</code> 메서드에서 다음 단계를 따라야 한다.</p><ol><li>생성된 바인딩 클래스에 포함된 static <code>inflate()</code> 메서드를 호출한다. 그러면 프래그먼트에서 사용할 바인딩 클래스의 인스턴스가 생성된다.</li><li><code>getRoot()</code>메서드를 호출하거나 <a href="https://kotlinlang.org/docs/properties.html#declaring-properties">Kotlin property syntax</a>를 사용하여 루트 뷰의 참조를 가져온다.</li><li><code>onCreateView()</code> 메서드에서 루트 뷰를 반환하여 화면 상의 활성 뷰를 만든다.</li></ol><blockquote><p>★ 참고 : inflate() 메서드를 사용하려면 layout inflator를 전달해야 한다. 레이아웃이 이미 inflate 되었다면, 바인딩 클래스의 static bind() 메서드를 호출하면 된다. 자세한 내용은 <a id = "a1"><a href="#f1">본문의 하단</a></a>이나 <a href="https://github.com/android/architecture-components-samples/blob/master/ViewBindingSample/app/src/main/java/com/android/example/viewbindingsample/BindFragment.kt#L36-L41">뷰 바인딩 깃허브 샘플의 예시</a>에서 볼 수 있다.</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> _binding: ResultProfileBinding? = <span class="literal">null</span></span><br><span class="line"><span class="comment">// This property is only valid between onCreateView and</span></span><br><span class="line"><span class="comment">// onDestroyView.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> binding <span class="keyword">get</span>() = _binding!!</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    inflater: <span class="type">LayoutInflater</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="params"><span class="function">    savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: View? &#123;</span><br><span class="line">    _binding = ResultProfileBinding.inflate(inflater, container, <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">val</span> view = binding.root</span><br><span class="line">    <span class="keyword">return</span> view</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">    _binding = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제 바인딩 클래스의 인스턴스를 사용하여 뷰를 참조할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binding.name.text = viewModel.name</span><br><span class="line">binding.button.setOnClickListener &#123; viewModel.userClicked() &#125;</span><br></pre></td></tr></table></figure><blockquote><p>★ 참고 : 프래그먼트는 뷰보다 오래 지속된다<small>(Fragments outlive their views)</small>. 프래그먼트의 onDestroyView() 메서드에서 바인딩 클래스 인스턴스에 대한 참조를 정리해야 한다.</p></blockquote><h3 id="다른-구성smallconfigurationsmall에-대한-힌트"><a class="markdownIt-Anchor" href="#다른-구성smallconfigurationsmall에-대한-힌트"></a> 다른 구성<small>(configuration)</small>에 대한 힌트</h3><p>여러 구성<small>(configuration)</small>에서 뷰를 선언할 때, 특정 레이아웃에 따라 다른 뷰 타입을 사용하는 것이 더 합리적이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># in res/layout/example.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/user_bio&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"># in res/layout-land/example.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">EditText</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/user_bio&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>이러한 경우, <code>TextView</code>가 공통된 기본 클래스<small>(common base class)</small>이기 때문에 생성된 클래스가 <code>TextView</code> 타입의 <code>userBio</code> 필드를 노출할 것으로 예상할 것이다. 하지만 기술적인 한계로 인해 뷰 바인딩 코드 생성기는 이러한 결정을 내릴 수 없으며, 대신에 단순히 <code>View</code> 필드를 생성한다. 이를 위해서는 나중에 <code>binding.userBio as TextView</code>를 사용하여 필드를 캐스팅해야 한다.</p><p>이 제한 사항을 해결하기 위해, 뷰 바인딩은 <code>tools:viewBindingType</code> 속성을 지원하여 생성된 코드에서 어떤 타입을 사용할 것인지 컴파일러에게 알릴 수 있다.</p><blockquote><p><code>tools:viewBindingType</code> 속성을 사용하여 컴파일러가 필드를 <code>TextView</code>로 생성하게 하기</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># in res/layout/example.xml (unchanged)</span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/user_bio&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"># in res/layout-land/example.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">EditText</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/user_bio&quot;</span> <span class="attr">tools:viewBindingType</span>=<span class="string">&quot;TextView&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>다른 예시로, 하나는 <code>BottomNavigationView</code>를 포함하고 다른 하나는 <code>NavigationRailView</code>를 포함하는 두 개의 레이아웃이 있다고 가정해보자. 두 클래스 모두 구현의 세부 정보가 포함된 <code>NavigationBarView</code>를 확장한다. 코드가 현재 레이아웃에 어떤 하위 클래스가 있는지 정확히 알 필요가 없는 경우, <code>tools:viewBindingType</code>를 사용하여 생성된 타입을 두 레이아웃 모두에서 <code>NavigationBarView</code>로 설정할 수 있다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># in res/layout/navigation_example.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">BottomNavigationView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation&quot;</span> <span class="attr">tools:viewBindingType</span>=<span class="string">&quot;NavigationBarView&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"># in res/layout-w720/navigation_example.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">NavigationRailView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation&quot;</span> <span class="attr">tools:viewBindingType</span>=<span class="string">&quot;NavigationBarView&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>참고로 뷰 바인딩은 코드를 생성할 때 속성 값의 유효성을 검사할 수 없다. 컴파일 타임과 런타임 오류를 방지하려면 값이 다음 조건들을 충족해야 한다.</p><ul><li>값은 <code>android.view.View</code>에서 상속되는 클래스여야 한다.</li><li>값은 해당 값이 배치된 태그의 슈퍼 클래스여야 한다. 예를 들어 다음 값들은 작동하지 않는다.<ul><li><code>&lt;TextView tools:viewBindingType=&quot;ImageView&quot; /&gt;</code> : ImageView는 TextView와 관련이 없다.</li><li><code>&lt;TextView tools:viewBindingType=&quot;Button&quot; /&gt;</code> : Button은 TextView의 슈퍼 클래스가 아니다.</li></ul></li><li>최종 타입은 모든 구성에서 일관되게 해결되어야 한다.</li></ul><h2 id="findviewbyid와의-차이점"><a class="markdownIt-Anchor" href="#findviewbyid와의-차이점"></a> findViewById와의 차이점</h2><p>뷰 바인딩은 <code>findViewById</code>를 사용하는 것에 비해 중요한 장점이 있다.</p><ul><li><strong>널 안정성</strong><ul><li>뷰 바인딩운 뷰에 대한 직접 참조를 생성하므로, 유효하지 않은 view ID로 인해 null pointer exception이 발생할 위험이 없다. 또한 레이아웃의 일부 구성에서만 뷰가 있는 경우, 바인딩 클래스에서 참조를 포함하는 필드가 <code>@Nullable</code>로 표시된다.</li></ul></li><li><strong>타입 안정성</strong><ul><li>각 바인딩 클래스에 있는 필드는 XML 파일에서 참조하는 뷰와 일치하는 타입을 가진다. 즉, 클래스 변환 예외<small>(class cast exception)</small>이 발생할 위험이 없다.</li></ul></li></ul><p>이러한 차이점은 레이아웃과 코드 사이의 비호환성으로 인해 <code>findViewById</code>가 런타임에 오류가 발생하는 반면, 뷰 바인딩은 런타임이 아닌 컴파일 타임에 빌드가 실패하게 된다는 것을 의미한다.</p><p>연산 속도 면에서도 <code>findViewById</code>는 레이아웃 태그를 순회하여 일치하는 뷰를 찾아가기 때문에 연산 속도에 영향을 미치고, 단순 바인딩 코드가 길어진다.</p><h2 id="데이터-바인딩과의-비교"><a class="markdownIt-Anchor" href="#데이터-바인딩과의-비교"></a> 데이터 바인딩과의 비교</h2><p>뷰 바인딩과 데이터 바인딩은 모두 뷰를 직접 참조하는 데 사용할 수 있는 바인딩 클래스를 생성한다. 하지만 뷰 바인딩은 보다 단순한 사용 사례를 처리하기 위한 것이며 데이터 결합에 비해 다음과 같은 이점을 제공한다.</p><ul><li>더 빠른 컴파일<ul><li>뷰 바인딩은 주석 처리<small>(annotation processing)</small>이 필요하지 않으므로 컴파일 시간이 더 짧다.</li></ul></li><li>사용 편의성<ul><li>뷰 바인딩은 특별히 태그된 XML 레이아웃 파일이 필요하지 않으므로 앱에서 더 신속하게 채택될 수 있다. 모듈에서 뷰 바인딩을 사용 설정하면 모듈의 모든 레이아웃에 뷰 바인딩이 자동으로 적용된다.</li></ul></li></ul><p>반대로 뷰 바인딩에는 데이터 바인딩과 비교해서 다음과 같은 제한 사항들이 있다.</p><ul><li>뷰 바인딩은 <a href="https://developer.android.com/topic/libraries/data-binding/expressions">레이아웃 변수 또는 레이아웃 표현식</a>을 지원하지 않으므로, XML 레이아웃 파일에서 직접 동적 UI 콘텐츠를 선언하는 데 사용할 수 없다.</li><li>뷰 바인딩은 <a href="https://developer.android.com/topic/libraries/data-binding/two-way">양방향 데이터 바인딩</a>을 지원하지 않는다.</li></ul><p>위 사항을 고려할 때, 일부 사례에서는 뷰 바인딩과 데이터 바인딩을 모두 사용하는 것이 가장 좋다. 고급 기능이 필요한 레이아웃에는 데이터 바인딩을, 고급 기능이 필요 없는 레이아웃에는 뷰 바인딩을 사용할 수 있다.</p><h3 id="b-id-f1레이아웃이-이미-인플레이트된-상황에서의-뷰-바인딩b"><a class="markdownIt-Anchor" href="#b-id-f1레이아웃이-이미-인플레이트된-상황에서의-뷰-바인딩b"></a> <b id = "f1">레이아웃이 이미 인플레이트된 상황에서의 뷰 바인딩</b>  <a href="#a1"> ↩</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * View Binding example with a fragment that uses the alternate constructor for inflation and</span></span><br><span class="line"><span class="comment"> * [onViewCreated] for binding.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindFragment</span> : <span class="type">Fragment</span></span>(R.layout.fragment_blank) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scoped to the lifecycle of the fragment&#x27;s view (between onCreateView and onDestroyView)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> fragmentBlankBinding: FragmentBlankBinding? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">        <span class="keyword">val</span> binding = FragmentBlankBinding.bind(view)</span><br><span class="line">        fragmentBlankBinding = binding</span><br><span class="line">        binding.textViewFragment.text = getString(string.hello_from_vb_bindfragment)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// Consider not storing the binding instance in a field, if not needed.</span></span><br><span class="line">        fragmentBlankBinding = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 코드는 인플레이션을 위해 <a href="https://developer.android.com/reference/androidx/fragment/app/Fragment#Fragment(int)">Alternate constructor</a>를 사용하고 <code>onViewCreated</code>를 바인딩에 사용하는 프래그먼트의 뷰 바인딩 예시이다. 레이아웃이 이미 인플레이트 되었기에 바로 바인딩 클래스의 static <code>bind()</code> 메서드를 호출하면 된다.</li></ul><h2 id="additional-resources"><a class="markdownIt-Anchor" href="#additional-resources"></a> Additional resources</h2><h3 id="samples"><a class="markdownIt-Anchor" href="#samples"></a> Samples</h3><ul><li><a href="https://github.com/android/architecture-components-samples/tree/main/ViewBindingSample">View binding sample</a></li></ul><h3 id="blogs"><a class="markdownIt-Anchor" href="#blogs"></a> Blogs</h3><ul><li><a href="https://medium.com/androiddevelopers/use-view-binding-to-replace-findviewbyid-c83942471fc">Use view binding to replace findViewById</a></li><li><a href="https://betterprogramming.pub/why-are-kotlin-synthetics-deprecated-and-what-are-the-alternatives-5c2b087dda1c">Why Are Kotlin Synthetics Deprecated and What Are the Alternatives?</a></li></ul><h3 id="videos"><a class="markdownIt-Anchor" href="#videos"></a> Videos</h3><ul><li><a href="https://www.youtube.com/watch?v=W7uujFrljW0">Android Jetpack: Replace findViewById with view binding</a></li></ul><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><ul><li>Android Docs - View Binding : <a href="https://developer.android.com/topic/libraries/view-binding">https://developer.android.com/topic/libraries/view-binding</a></li></ul>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Android/">Android</category>
      
      <category domain="http://june0122.github.io/categories/Android/Documentation/">Documentation</category>
      
      
      <category domain="http://june0122.github.io/tags/Android/">Android</category>
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Data-Binding/">Data Binding</category>
      
      <category domain="http://june0122.github.io/tags/View-Binding/">View Binding</category>
      
      <category domain="http://june0122.github.io/tags/findViewById/">findViewById</category>
      
      
      <comments>http://june0122.github.io/2021/07/24/android-docs-view-binding/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] 15649번 : N과 M</title>
      <link>http://june0122.github.io/2021/07/23/boj-15649/</link>
      <guid>http://june0122.github.io/2021/07/23/boj-15649/</guid>
      <pubDate>Fri, 23 Jul 2021 12:33:37 GMT</pubDate>
      
      <description>[백트래킹] 백준 알고리즘 15649번, N과 M</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://www.acmicpc.net/problem/15649">문제 보기</a></h2><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">0</span></span><br><span class="line"><span class="keyword">val</span> arr = IntArray(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> isUsed = BooleanArray(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    n = nextInt()</span><br><span class="line">    m = nextInt()</span><br><span class="line">    backTrack(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">backTrack</span><span class="params">(k : <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (k == m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            print(<span class="string">&quot;<span class="subst">$&#123;arr[i]&#125;</span> &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        println()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> .. n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isUsed[i].not()) &#123;</span><br><span class="line">            arr[k] = i</span><br><span class="line">            isUsed[i] = <span class="literal">true</span></span><br><span class="line">            backTrack(k+<span class="number">1</span>)</span><br><span class="line">            isUsed[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/">백트래킹</category>
      
      
      <comments>http://june0122.github.io/2021/07/23/boj-15649/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] 2798번 : 블랙잭</title>
      <link>http://june0122.github.io/2021/07/23/boj-2798/</link>
      <guid>http://june0122.github.io/2021/07/23/boj-2798/</guid>
      <pubDate>Fri, 23 Jul 2021 12:33:37 GMT</pubDate>
      
      <description>[백트래킹] 백준 알고리즘 2798번, 블랙잭</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://www.acmicpc.net/problem/2798">문제 보기</a></h2><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line"><span class="keyword">val</span> nums = IntArray(<span class="number">101</span>)</span><br><span class="line"><span class="keyword">val</span> visited = BooleanArray(<span class="number">101</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    n = nextInt()</span><br><span class="line">    m = nextInt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        nums[i] = nextInt()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> arr = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    dfs(arr, <span class="number">0</span>)</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(arr: <span class="type">MutableList</span>&lt;<span class="type">Int</span>&gt;, count: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.sum() &lt;= m) result = max(result, arr.sum())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            visited[i] = <span class="literal">true</span></span><br><span class="line">            arr.add(nums[i])</span><br><span class="line">            dfs(arr, count + <span class="number">1</span>)</span><br><span class="line">            arr.removeAt(arr.size - <span class="number">1</span>)</span><br><span class="line">            visited[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>단순히 3중 for문을 이용하여 간단하게 해결할 수 있는 문제이지만 백트래킹에 익숙해지기 위해 위와 같이 풀이하였다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/">완전탐색</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/">백트래킹</category>
      
      
      <comments>http://june0122.github.io/2021/07/23/boj-2798/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] 10819번 : 차이를 최대로</title>
      <link>http://june0122.github.io/2021/07/23/boj-10819/</link>
      <guid>http://june0122.github.io/2021/07/23/boj-10819/</guid>
      <pubDate>Fri, 23 Jul 2021 12:33:37 GMT</pubDate>
      
      <description>[백트래킹] 백준 알고리즘 10819번, 차이를 최대로</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://www.acmicpc.net/problem/10819">문제 보기</a></h2><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.abs</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">val</span> nums = IntArray(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> visited = BooleanArray(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    n = nextInt()</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        nums[i] = nextInt()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> arr = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    dfs(arr, <span class="number">0</span>)</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(arr: <span class="type">MutableList</span>&lt;<span class="type">Int</span>&gt;, count: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count == n) &#123;</span><br><span class="line">        result = max(arr.value(), result)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            visited[i] = <span class="literal">true</span></span><br><span class="line">            arr.add(nums[i])</span><br><span class="line">            dfs(arr, count + <span class="number">1</span>)</span><br><span class="line">            arr.removeAt(arr.size - <span class="number">1</span>)</span><br><span class="line">            visited[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> MutableList<span class="type">&lt;Int&gt;</span>.<span class="title">value</span><span class="params">()</span></span> : <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">        sum += abs(<span class="keyword">this</span>[i] - <span class="keyword">this</span>[i + <span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/">백트래킹</category>
      
      
      <comments>http://june0122.github.io/2021/07/23/boj-10819/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] 14889번 : 스타트와 링크</title>
      <link>http://june0122.github.io/2021/07/23/boj-14889/</link>
      <guid>http://june0122.github.io/2021/07/23/boj-14889/</guid>
      <pubDate>Fri, 23 Jul 2021 12:33:37 GMT</pubDate>
      
      <description>[백트래킹] 백준 알고리즘 14889번, 스타트와 링크</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://www.acmicpc.net/problem/14889">문제 보기</a></h2><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.abs</span><br><span class="line"><span class="keyword">import</span> kotlin.math.min</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> status: Array&lt;IntArray&gt;</span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> visited: BooleanArray</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    n = nextInt()</span><br><span class="line">    status = Array(n) &#123; IntArray(n) &#125;</span><br><span class="line">    visited = BooleanArray(n)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">            status[i][j] = nextInt()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(index: <span class="type">Int</span>, count: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count == n / <span class="number">2</span>) &#123;</span><br><span class="line">        statusGap()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> index until n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">            visited[i] = <span class="literal">true</span></span><br><span class="line">            dfs(i + <span class="number">1</span>, count + <span class="number">1</span>)</span><br><span class="line">            visited[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">statusGap</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> startSum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> linkSum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> i + <span class="number">1</span> until n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] &amp;&amp; visited[j]) &#123;</span><br><span class="line">                startSum += status[i][j] + status[j][i]</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!visited[i] &amp;&amp; !visited[j]) &#123;</span><br><span class="line">                linkSum += status[i][j] + status[j][i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = min(result, abs(startSum - linkSum))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스타트 팀과 링크 팀을 구분 짓는 자료구조를 따로 선언하지 않고 BooleanArray인 <em>visited</em>의 값을 통해 구분하므로 dfs 함수의 첫 번째 인자로 <em>index</em>를 사용하였다.</p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/">백트래킹</category>
      
      
      <comments>http://june0122.github.io/2021/07/23/boj-14889/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] 2661번 : 좋은수열</title>
      <link>http://june0122.github.io/2021/07/23/boj-2661/</link>
      <guid>http://june0122.github.io/2021/07/23/boj-2661/</guid>
      <pubDate>Fri, 23 Jul 2021 12:33:37 GMT</pubDate>
      
      <description>[백트래킹] 백준 알고리즘 2661번, 좋은수열</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://www.acmicpc.net/problem/2661">문제 보기</a></h2><h2 id="풀이"><a class="markdownIt-Anchor" href="#풀이"></a> 풀이</h2><p>백트래킹 문제이며 좋은 수열인지 나쁜 수열인지 검사하는 코드를 구현하는 것이 핵심이다.</p><p>문자열에서 동일한 요소의 중복은 요소의 길이가 <code>1 ~ N/2</code>의 범위에 있을 때만 발생한다.</p><p>백트래킹을 통해 수열을 늘려나가는 식이므로 맨 뒷자리를 기준으로</p><p>맨 뒤 <code>1</code>자리의 수가 그 앞의 <code>1</code>자리 수와 동일한지</p><p>맨 뒤 <code>2</code>자리의 수가 그 앞의 <code>2</code>자리 수와 동일한지</p><p>맨 뒤 <code>3</code>자리의 수가 그 앞의 <code>3</code>자리 수와 동일한지</p><p>맨 뒤 <code>4</code>자리의 수가 그 앞의 <code>4</code>자리 수와 동일한지</p><p>…</p><p>맨 뒤 <code>N/2</code>자리의 수가 그 앞의 <code>N/2</code>자리 수와 동일한지 비교하는 식으로</p><p>한 번이라도 동일한 경우가 발생한다면 그 수열은 나쁜 수열로 판단할 수 있다.</p><p>가장 첫 번째로 나오는 백트래킹 알고리즘의 결과가 결과값들 중 가장 작은 수이기 때문에 기본적인 백트래킹 문제들과 같이 만들어진 결과값들끼리 최대나 최소를 비교할 필요가 없다. 그렇기 때문에 프로세스를 종료하는 코드 혹은 플래그를 이용하는 코드가 사용이 된다.</p><p>가장 작은 수를 나타내는 수열을 구하는 것이기 때문에 첫 번째 자리는 무조건 1이 나온다. 그러므로 dfs의 첫 탐색 정점 기준을 <code>&quot;1&quot;</code>로 잡고 시작하는 것이 더 효율적인 코드이지만 쉬운 이해를 위해 <code>dfs(&quot;&quot;)</code>을 사용하였다.</p><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"><span class="keyword">import</span> kotlin.system.exitProcess</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    n = nextInt()</span><br><span class="line">    dfs(<span class="string">&quot;&quot;</span>) <span class="comment">// dfs(&quot;1&quot;)이 더 효율적</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(s: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length == n) &#123;</span><br><span class="line">        println(s)</span><br><span class="line">        exitProcess(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((s + i).isGood()) &#123;</span><br><span class="line">            dfs(s + i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">isGood</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> len = <span class="keyword">this</span>.length / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.substring(<span class="keyword">this</span>.length - i) == <span class="keyword">this</span>.substring(<span class="keyword">this</span>.length - i * <span class="number">2</span>, <span class="keyword">this</span>.length - i))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자바에서 프로세스를 강제 종료하는 <code>System.exit(0)</code>는 코틀린에선 <code>exitProcess(0)</code>를 사용한다. 하지만 <code>exitProcess(0)</code>를 사용하면 <em>kotlin.system</em> 패키지를 import 해줘야하는 번거로움이 있기에 시간이 제한되고 긴장되는 코딩 테스트 환경에서는 아래 코드와 같이 플래그 변수를 사용하거나 자바의 <code>System.exit(0)</code>를 사용하는 것이 나을 수도 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> exit = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    n = nextInt()</span><br><span class="line">    dfs(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(s: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (exit) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s.length == n) &#123;</span><br><span class="line">        println(s)</span><br><span class="line">        exit = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((s + i).isGood()) &#123;</span><br><span class="line">            dfs(s + i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">isGood</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> len = <span class="keyword">this</span>.length / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.substring(<span class="keyword">this</span>.length - i) == <span class="keyword">this</span>.substring(<span class="keyword">this</span>.length - i * <span class="number">2</span>, <span class="keyword">this</span>.length - i))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><ul><li><a href="https://bellog.tistory.com/43">https://bellog.tistory.com/43</a></li></ul>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/">백트래킹</category>
      
      
      <comments>http://june0122.github.io/2021/07/23/boj-2661/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] 14888번 : 연산자 끼워넣기</title>
      <link>http://june0122.github.io/2021/07/23/boj-14888/</link>
      <guid>http://june0122.github.io/2021/07/23/boj-14888/</guid>
      <pubDate>Fri, 23 Jul 2021 12:33:37 GMT</pubDate>
      
      <description>[백트래킹] 백준 알고리즘 14888번, 연산자 끼워넣기</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://www.acmicpc.net/problem/14888">문제 보기</a></h2><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"><span class="keyword">import</span> kotlin.math.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> nums: IntArray</span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> visit: BooleanArray</span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> opers: MutableList&lt;String&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    n = nextInt()</span><br><span class="line">    nums = IntArray(n)</span><br><span class="line">    visit = BooleanArray(n - <span class="number">1</span>)</span><br><span class="line">    opers = mutableListOf()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        nums[i] = nextInt()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repeat(nextInt()) &#123; opers.add(<span class="string">&quot;+&quot;</span>) &#125;</span><br><span class="line">    repeat(nextInt()) &#123; opers.add(<span class="string">&quot;-&quot;</span>) &#125;</span><br><span class="line">    repeat(nextInt()) &#123; opers.add(<span class="string">&quot;*&quot;</span>) &#125;</span><br><span class="line">    repeat(nextInt()) &#123; opers.add(<span class="string">&quot;/&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    println(max)</span><br><span class="line">    println(min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(comb: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comb.length == n - <span class="number">1</span>) &#123;</span><br><span class="line">        min = min(min, comb.result())</span><br><span class="line">        max = max(max, comb.result())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i]) <span class="keyword">continue</span></span><br><span class="line">        visit[i] = <span class="literal">true</span></span><br><span class="line">        dfs(comb + opers[i])</span><br><span class="line">        comb.removeRange(comb.length - <span class="number">1</span>, comb.length - <span class="number">1</span>)</span><br><span class="line">        visit[i] = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">result</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">        temp = calc(temp, nums[i+<span class="number">1</span>], <span class="keyword">this</span>[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">calc</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, c: <span class="type">Char</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (c) &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span> -&gt; a + b</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span> -&gt; a - b</span><br><span class="line">        <span class="string">&#x27;*&#x27;</span> -&gt; a * b</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span> -&gt; a / b</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">메모리</th><th style="text-align:center">시간</th></tr></thead><tbody><tr><td style="text-align:center">304432 KB</td><td style="text-align:center">1548 ms</td></tr></tbody></table><blockquote></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"><span class="keyword">import</span> kotlin.math.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line"><span class="keyword">val</span> opers = IntArray(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> nums: IntArray</span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> visit: BooleanArray</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    n = nextInt()</span><br><span class="line">    nums = IntArray(n)</span><br><span class="line">    visit = BooleanArray(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        nums[i] = nextInt()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">        opers[i] = nextInt()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(nums[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    println(max)</span><br><span class="line">    println(min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dfs</span><span class="params">(acc: <span class="type">Int</span>, count: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count == n) &#123;</span><br><span class="line">        min = min(min, acc)</span><br><span class="line">        max = max(max, acc)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (opers[i] &lt;= <span class="number">0</span>) <span class="keyword">continue</span></span><br><span class="line">        opers[i]--</span><br><span class="line">        dfs(calc(acc, nums[count], i), count + <span class="number">1</span>)</span><br><span class="line">        opers[i]++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">calc</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, oper: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (oper) &#123;</span><br><span class="line">        <span class="number">0</span> -&gt; a + b</span><br><span class="line">        <span class="number">1</span> -&gt; a - b</span><br><span class="line">        <span class="number">2</span> -&gt; a * b</span><br><span class="line">        <span class="number">3</span> -&gt; a / b</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">메모리</th><th style="text-align:center">시간</th></tr></thead><tbody><tr><td style="text-align:center">13684 KB</td><td style="text-align:center">140 ms</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/">백트래킹</category>
      
      
      <comments>http://june0122.github.io/2021/07/23/boj-14888/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[코틀린 자료구조] 트리 (Tree)</title>
      <link>http://june0122.github.io/2021/07/19/data-structure-trees/</link>
      <guid>http://june0122.github.io/2021/07/19/data-structure-trees/</guid>
      <pubDate>Mon, 19 Jul 2021 14:36:42 GMT</pubDate>
      
      <description>&lt;b&gt;트리&lt;small&gt;(tree)&lt;/small&gt;&lt;/b&gt;는 매우 중요한 자료구조로 다음과 같이 소프트웨어 개발에서 반복되는 많은 문제를 해결하는 데 사용한다.&lt;br&gt;① 계층적 관계를 표현 ② 정렬된 데이터 관리 ③ 빠른 조회 작업을 용이하게 함</description>
      
      
      
      <content:encoded><![CDATA[<p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125863597-4066759b-d019-421a-bcd4-f0383febe0d0.png'></p><p><b>트리<small>(tree)</small></b>는 매우 중요한 자료구조로 다음과 같이 소프트웨어 개발에서 반복되는 많은 문제를 해결하는 데 사용한다.</p><ul><li>계층적 관계를 표현</li><li>정렬된 데이터 관리</li><li>빠른 조회 작업을 용이하게 함</li></ul><h2 id="트리와-관련된-용어들smallterminologysmall"><a class="markdownIt-Anchor" href="#트리와-관련된-용어들smallterminologysmall"></a> 트리와 관련된 용어들<small>(Terminology)</small></h2><h3 id="노드smallnodesmall"><a class="markdownIt-Anchor" href="#노드smallnodesmall"></a> 노드<small>(Node)</small></h3><p>연결 리스트와 마찬가지로 트리도 노드로 구성된다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125863852-f54f02f7-560f-4037-8e11-db6f9ba137b7.png'></p><p>각 노드는 일부 데이터를 캡슐화하고 자식을 추적한다.</p><h3 id="부모와-자식smallparent-and-childsmall"><a class="markdownIt-Anchor" href="#부모와-자식smallparent-and-childsmall"></a> 부모와 자식<small>(Parent and child)</small></h3><p>트리는 거꾸로 뒤집힌 실제 나무처럼 위에서 시작하여 아래쪽으로 가지를 뻗어 나간다.</p><p>첫 번째 노드를 제외한 모든 노드는 <strong>부모</strong> 노드라고 하는 위의 단일 노드에 연결된다. 바로 아래에 있고 부모 노드에 연결된 노드를 <strong>자식</strong> 노드라 한다. 트리에서 모든 자식은 정확히 한 명의 부모를 가진다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125863863-bf9c778e-92b9-4b93-b44a-edf19b0a64af.png'></p><h3 id="뿌리smallrootsmall"><a class="markdownIt-Anchor" href="#뿌리smallrootsmall"></a> 뿌리<small>(Root)</small></h3><p>트리의 최상위 노드를 트리의 뿌리<small>(루트, root)</small>라고 한다. 부모가 없는 유일한 노드이기도 하다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125863874-acebca4c-f298-4ab9-b24e-10376320c968.png'></p><h3 id="잎smallleafsmall"><a class="markdownIt-Anchor" href="#잎smallleafsmall"></a> 잎<small>(Leaf)</small></h3><p>자식이 없는 노드를 리프라고 한다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125863886-cfebea5d-2c3d-497c-9848-a1c709baa36c.png'></p><h2 id="구현"><a class="markdownIt-Anchor" href="#구현"></a> 구현</h2><p>트리는 노드로 구성되어 있으므로 제일 처음해야 할 작업은 TreeNode 클래스를 생성하는 것이다.</p><blockquote><p>TreeNode.kt</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> value: T) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> children: MutableList&lt;TreeNode&lt;T&gt;&gt; = mutableListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각 노드는 값을 담당하고 MutableList를 사용하여 모든 자식에 대한 참조를 저장한다.</p><p>다음으로 TreeNode 내부에 아래의 메서드를 추가하자</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(child: <span class="type">TreeNode</span>&lt;<span class="type">T</span>&gt;)</span></span> = children.add(child)</span><br></pre></td></tr></table></figure><p>이 메서드는 노드에 자식 노드를 추가한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> hot = TreeNode(<span class="string">&quot;Hot&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> cold = TreeNode(<span class="string">&quot;Cold&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> beverages = TreeNode(<span class="string">&quot;Beverages&quot;</span>).run &#123;</span><br><span class="line">        add(hot)</span><br><span class="line">        add(cold)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>계층 구조는 트리 구조의 자연스러운 형태 중 하나이다. 위의 코드는 아래와 같은 구조를 가지고 있다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125865331-9c19532f-d417-4f64-88f0-91cd4314520f.png'></p><h2 id="traversal-algorithms"><a class="markdownIt-Anchor" href="#traversal-algorithms"></a> Traversal algorithms</h2><p>배열이나 리스트와 같은 <strong>선형 컬렉션</strong>을 반복<small>(iterating)</small>하는 것은 간단하다. 선형 컬렉션에는 명확한 시작과 끝이 있다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125865349-410b60ee-2e18-41ea-b07c-05d8f3939925.png'></p><p>트리를 반복하는 것은 조금 더 복잡하다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125865353-3a4a0fec-6f60-42d7-8165-cdee3b7d6ddb.png'></p><p>왼쪽에 있는 노드가 우선 순위를 가져야 할까? 노드의 깊이는 우선 순위와 어떤 관련이 있을까? 순회 전략은 해결하려는 문제에 따라 다르게 가져가야 한다.</p><p>서로 다른 트리와 문제에 대해 여러 전략이 존재한다. 이 모든 방법은 노드를 <strong>방문</strong>하고 노드 내부의 정보를 사용할 수 있게 해준다.</p><blockquote><p>TreeNode 클래스의 외부에 정의 추가</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> Visitor&lt;T&gt; = (TreeNode&lt;T&gt;) -&gt; <span class="built_in">Unit</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> value: T) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="depth-first-traversalsmalldepth-first-search-dfs-깊이-우선-탐색small"><a class="markdownIt-Anchor" href="#depth-first-traversalsmalldepth-first-search-dfs-깊이-우선-탐색small"></a> Depth-first traversal<small>(Depth-first search, DFS, 깊이 우선 탐색)</small></h3><p>깊이 우선 탐색은 루트 노드에서 시작하여 리프에 도달한 다음 백트래킹하기 전에 각 분기를 따라 가능한 멀리 트리를 탐색한다.</p><p>TreeNode 내부에 다음을 추가한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">forEachDepthFirst</span><span class="params">(visit: <span class="type">Visitor</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">    visit(<span class="keyword">this</span>)</span><br><span class="line">    children.forEach &#123; </span><br><span class="line">        it.forEachDepthFirst(visit)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 간단한 코드는 재귀를 사용하여 다음 노드를 처리한다.</p><p>재귀적인 구현을 사용하지 않으려면 스택을 사용할 수 있으나 재귀를 이용한 방법이 더 간단하다.</p><blockquote><p>재귀 깊이 우선 탐색 테스트</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">makeBeverageTree</span><span class="params">()</span></span>: TreeNode&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> tree = TreeNode(<span class="string">&quot;Beverages&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> hot = TreeNode(<span class="string">&quot;hot&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> cold = TreeNode(<span class="string">&quot;cold&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> tea = TreeNode(<span class="string">&quot;tea&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> coffee = TreeNode(<span class="string">&quot;coffee&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> chocolate = TreeNode(<span class="string">&quot;cocoa&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> blackTea = TreeNode(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> greenTea = TreeNode(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> chaiTea = TreeNode(<span class="string">&quot;chai&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> soda = TreeNode(<span class="string">&quot;soda&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> milk = TreeNode(<span class="string">&quot;milk&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> gingerAle = TreeNode(<span class="string">&quot;ginger ale&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> bitterLemon = TreeNode(<span class="string">&quot;bitter lemon&quot;</span>)</span><br><span class="line">    tree.add(hot)</span><br><span class="line">    tree.add(cold)</span><br><span class="line">    hot.add(tea)</span><br><span class="line">    hot.add(coffee)</span><br><span class="line">    hot.add(chocolate)</span><br><span class="line">    cold.add(soda)</span><br><span class="line">    cold.add(milk)</span><br><span class="line">    tea.add(blackTea)</span><br><span class="line">    tea.add(greenTea)</span><br><span class="line">    tea.add(chaiTea)</span><br><span class="line">    soda.add(gingerAle)</span><br><span class="line">    soda.add(bitterLemon)</span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>makeBeverageTree()</code>는 아래와 같은 트리를 생성한다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125865366-20b030f5-3cee-472f-b095-2d50ba7e7151.png'></p><p>트리를 생성한 다음 <code>main()</code>에서 다음과 같은 코드를 실행한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tree = makeBeverageTree()</span><br><span class="line">    tree.forEachDepthFirst &#123; println(it.value) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드의 출력 결과는 깊이 우선 탐색이 각 노드를 방문하는 순서를 보여준다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Beverages</span><br><span class="line">hot</span><br><span class="line">tea</span><br><span class="line">black</span><br><span class="line">green</span><br><span class="line">chai</span><br><span class="line">coffee</span><br><span class="line">cocoa</span><br><span class="line">cold</span><br><span class="line">soda</span><br><span class="line">ginger ale</span><br><span class="line">bitter lemon</span><br><span class="line">milk</span><br></pre></td></tr></table></figure><h3 id="level-order-traversal"><a class="markdownIt-Anchor" href="#level-order-traversal"></a> Level-order traversal</h3><p>Level-order traversal은 노드의 깊이를 기반으로 트리의 각 노드를 방문하는 방법이다. 루트에서 시작하여 하위 레벨로 이동하기 전에 같은 레벨의 모든 노드를 방문한다.</p><p>TreeNode 내부에 다음을 추가한다.</p><blockquote><p><a href="https://github.com/june0122/DataStructureKotlin/tree/master/src/queue">직접 구현한 Queue</a>를 사용할 시</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">forEachLevelOrder</span><span class="params">(visit: <span class="type">Visitor</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">    visit(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">val</span> queue = StackQueue&lt;TreeNode&lt;T&gt;&gt;()</span><br><span class="line">    children.forEach &#123; queue.enqueue(it) &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> node = queue.dequeue()</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        visit(node)</span><br><span class="line">        node.children.forEach &#123; queue.enqueue(it) &#125;</span><br><span class="line">        node = queue.dequeue()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java.util 패키지 내부의 Queue 사용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">forEachLevelOrder</span><span class="params">(visit: <span class="type">Visitor</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">    visit(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;TreeNode&lt;T&gt;&gt; = LinkedList()</span><br><span class="line">    children.forEach &#123; queue.offer(it) &#125;</span><br><span class="line">    <span class="keyword">var</span> node = queue.poll()</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        visit(node)</span><br><span class="line">        node.children.forEach &#123; queue.offer(it) &#125;</span><br><span class="line">        node = queue.poll()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>forEachLevelOrder()</code>는 각 노드를 레벨 순으로 방문한다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125865372-a74a4353-1568-422f-ac6c-9abf96f4d858.png'></p><p>노드가 올바른 레벨 순서로 방문되도록 큐를 사용하는 방법에 유의한다. 현재 노드를 방문하여 모든 자식을 큐에 넣는다. 그런 다음 비어 있을 때까지 큐를 사용하기 시작한다. 노드를 방문할 때마다 노드의 모든 자식들도 큐에 넣는다. 이렇게 하면 같은 레벨의 모든 노드를 차례로 방문할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> tree = makeBeverageTree()</span><br><span class="line">  tree.forEachLevelOrder &#123; println(it.value) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">beverages</span><br><span class="line">hot</span><br><span class="line">cold</span><br><span class="line">tea</span><br><span class="line">coffee</span><br><span class="line">cocoa</span><br><span class="line">soda</span><br><span class="line">milk</span><br><span class="line">black</span><br><span class="line">green</span><br><span class="line">chai</span><br><span class="line">ginger ale</span><br><span class="line">bitter lemon</span><br></pre></td></tr></table></figure><h3 id="검색"><a class="markdownIt-Anchor" href="#검색"></a> 검색</h3><p>노드를 반복하는 메서드를 이미 구현했으므로 검색 알고리즘을 구현하는데 오래 걸리지 않는다.</p><p>TreeNode 내부에 아래의 코드를 추가한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">search</span><span class="params">(value: <span class="type">T</span>)</span></span>: TreeNode&lt;T&gt;? &#123;</span><br><span class="line">    <span class="keyword">var</span> result: TreeNode&lt;T&gt;? = <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">    forEachLevelOrder &#123; </span><br><span class="line">        <span class="keyword">if</span> (it.value == value) &#123;</span><br><span class="line">            result = it</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코드를 테스트하기 위해 <code>main()</code>에 아래의 코드를 추가한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> tree = makeBeverageTree()</span><br><span class="line">    tree.search(<span class="string">&quot;ginger ale&quot;</span>)?.let &#123;</span><br><span class="line">        println(<span class="string">&quot;Found node: <span class="subst">$&#123;it.value&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    tree.search(<span class="string">&quot;WKD Blue&quot;</span>)?.let &#123;</span><br><span class="line">        println(it.value)</span><br><span class="line">    &#125; ?: println(<span class="string">&quot;Couldn&#x27;t find WKD Blue&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main()</code>을 실행하면 다음과 같은 출력 결과를 볼 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Found node: ginger ale</span><br><span class="line">Couldn&#x27;t find WKD Blue</span><br></pre></td></tr></table></figure><p>위에서 level-order traversal 알고리즘을 사용했는데, 모든 노드를 방문하기 때문에 일치하는 항목이 여러 개일 경우 마지막으로 일치하는 항목이 채택된다. 이것은 사용하는 순회 방법에 따라 다른 객체를 얻을 수 있음을 의미한다.</p><h2 id="챌린지"><a class="markdownIt-Anchor" href="#챌린지"></a> 챌린지</h2><p>아래 트리의 값을 레벨에 따라 순서대로 출력하시오. 같은 레벨에 속하는 노드는 같은 줄에 출력해야 합니다.</p><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/126172924-394314ff-9136-4639-bd29-65e1615d6edb.png'></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">1</span> <span class="number">17</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><blockquote><p>예제 트리 생성 코드</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">makeSampleTree</span><span class="params">()</span></span>: TreeNode&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> tree = TreeNode(<span class="number">15</span>)</span><br><span class="line">    <span class="keyword">val</span> one = TreeNode(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> seventeen = TreeNode(<span class="number">17</span>)</span><br><span class="line">    <span class="keyword">val</span> twenty = TreeNode(<span class="number">20</span>)</span><br><span class="line">    tree.add(one)</span><br><span class="line">    tree.add(seventeen)</span><br><span class="line">    tree.add(twenty)</span><br><span class="line">    one.add(TreeNode(<span class="number">1</span>))</span><br><span class="line">    one.add(TreeNode(<span class="number">5</span>))</span><br><span class="line">    one.add(TreeNode(<span class="number">0</span>))</span><br><span class="line">    seventeen.add(TreeNode(<span class="number">2</span>))</span><br><span class="line">    twenty.add(TreeNode(<span class="number">5</span>))</span><br><span class="line">    twenty.add(TreeNode(<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>레벨 별 노드 출력 코드 (java.util 패키지 내부의 Queue 사용)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printEachLevel</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;TreeNode&lt;T&gt;&gt; = LinkedList()</span><br><span class="line">    <span class="keyword">var</span> nodesLeftInCurrentLevel = <span class="number">0</span></span><br><span class="line">    queue.offer(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line">        nodesLeftInCurrentLevel = queue.size</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">while</span> (nodesLeftInCurrentLevel &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> node = queue.poll()</span><br><span class="line">            node?.let &#123;</span><br><span class="line">                print(<span class="string">&quot;<span class="subst">$&#123;node.value&#125;</span> &quot;</span>)</span><br><span class="line">                node.children.forEach &#123; queue.offer(it) &#125;</span><br><span class="line">                nodesLeftInCurrentLevel--</span><br><span class="line">            &#125; ?: <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5</span></span><br><span class="line">        println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>레벨 별 노드 출력 코드 (<a href="https://github.com/june0122/DataStructureKotlin/tree/master/src/queue">직접 구현한 Queue</a>를 사용)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printEachLevel</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">val</span> queue = StackQueue&lt;TreeNode&lt;T&gt;&gt;()</span><br><span class="line">    <span class="keyword">var</span> nodesLeftInCurrentLevel = <span class="number">0</span></span><br><span class="line">    queue.enqueue(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">while</span> (queue.isEmpty.not()) &#123;</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line">        nodesLeftInCurrentLevel = queue.count</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">while</span> (nodesLeftInCurrentLevel &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> node = queue.dequeue()</span><br><span class="line">            node?.let &#123;</span><br><span class="line">                print(<span class="string">&quot;<span class="subst">$&#123;node.value&#125;</span> &quot;</span>)</span><br><span class="line">                node.children.forEach &#123; queue.enqueue(it) &#125;</span><br><span class="line">                nodesLeftInCurrentLevel--</span><br><span class="line">            &#125; ?: <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5</span></span><br><span class="line">        println()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>레벨 순서 순회를 용이하게 하기 위해 큐를 초기화하는 것으로 시작한다. 또한 새 줄을 출력하기 전에 작업해야하는 노드의 수를 추적하기 위해 <em>nodesLeftInCurrentLevel</em>을 만든다.</li><li>레벨 순서 순회는 큐가 빌 때까지 계속된다.</li><li>첫 번째 while 루프 내에서 <em>nodesLeftInCurrentLevel</em>을 큐의 현재 요소로 설정하여 시작한다.</li><li>다른 while 루프를 사용하여 <em>nodesLeftInCurrentLevel</em>의 수만큼 큐에서 요소를 빼낸다. 큐에서 빼는 모든 요소는 다음 줄로 넘어가지 않고 출력되며, 노드의 모든 자식을 큐에 넣는다.</li><li>이 시점에서 <code>println()</code>을 사용하여 새 줄을 생성한다. 다음 반복에서 <em>nodesLeftInCurrentLevel</em>은 이전 반복의 자식 수를 나타내는 <em>queue.count</em>로 업데이트된다.</li></ol><h2 id="요약"><a class="markdownIt-Anchor" href="#요약"></a> 요약</h2><ul><li>트리는 연결 리스트와 몇 가지 유사점을 공유한다. 그러나 트리의 노드는 무한히 많은 노드에 연결할 수 있는 반면 연결 리스트의 노드는 하나의 다른 노드에만 연결할 수 있다.</li><li>깊이 우선 및 레벨 순서 순회는 일반적인 유형의 트리에만 국한되지 않는다. 트리 구조에 따라 구현이 약간 다르지만 다른 유형의 트리에서도 작동할 수 있다.</li></ul><br><div style="text-align: right"> <a href="https://github.com/june0122/DataStructureKotlin/tree/master/src/tree"><b><i>Github에서 본문의 코드 확인하기 </div><br><div style="text-align: right"> <a href="https://www.raywenderlich.com/books/data-structures-algorithms-in-kotlin/v1.0"><b><i>Data Structures & Algorithms in Kotlin</i></b></a> 서적을 참고하여 작성했습니다. </div>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Data-Structure/">Data Structure</category>
      
      <category domain="http://june0122.github.io/tags/Tree/">Tree</category>
      
      
      <comments>http://june0122.github.io/2021/07/19/data-structure-trees/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[코틀린 자료구조] 큐 (Queue)</title>
      <link>http://june0122.github.io/2021/07/16/data-structure-queue/</link>
      <guid>http://june0122.github.io/2021/07/16/data-structure-queue/</guid>
      <pubDate>Thu, 15 Jul 2021 21:53:06 GMT</pubDate>
      
      <description>우리는 모두 줄을 서서 기다리는 것에 익숙하다. 좋아하는 영화의 티켓을 구매하기 위해 줄을 서는 것과 같은 실생활의 예시들은 &lt;b&gt;큐&lt;small&gt;(Queue)&lt;/small&gt;&lt;/b&gt; 자료구조를 모방한다. 큐는 &lt;b&gt;FIFO&lt;small&gt;(first in, first out)&lt;/small&gt;&lt;/b&gt;의 형태로, 처음 추가된 요소가 제일 먼저 제거되는 요소가 된다. 큐는 나중에 처리할 요소의 순서를 유지해야 할 때 편리하다.</description>
      
      
      
      <content:encoded><![CDATA[<p>우리는 모두 줄을 서서 기다리는 것에 익숙하다. 좋아하는 영화의 티켓을 구매하기 위해 줄을 서는 것과 같은 실생활의 예시들은 <b>큐<small>(Queue)</small></b> 자료구조를 모방한다.</p><p>큐는 <b>FIFO<small>(first in, first out)</small></b>의 형태로, 처음 추가된 요소가 제일 먼저 제거되는 요소가 된다. 큐는 나중에 처리할 요소의 순서를 유지해야 할 때 편리하다.</p><h2 id="큐의-일반적인-연산들"><a class="markdownIt-Anchor" href="#큐의-일반적인-연산들"></a> 큐의 일반적인 연산들</h2><p>먼저 큐에 대한 인터페이스를 설정한다. base 패키지 내부에 Queue.kt라는 파일을 만들고 Queue 인터페이스를 정의하는 다음 코드를 추가한다.</p><blockquote><p>큐 인터페이스 정의 (base/Queue.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="type">T : Any</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">enqueue</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">dequeue</span><span class="params">()</span></span>: T?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> isEmpty: <span class="built_in">Boolean</span></span><br><span class="line">        <span class="keyword">get</span>() = count == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제부터 구현하는 모든 것은 큐의 핵심 작업을 설명하는 위의 인터페이스의 규약을 따른다.</p><p>큐의 핵심 연산들은 다음과 같다.</p><ul><li><code>enqueue</code> : <b>대기열<small>(queue)</small></b>의 뒤에 요소를 삽입하고 연산이 성공하면 true를 반환한다.</li><li><code>dequeue</code> : 대기열의 맨 앞 요소를 제거하고 반환한다.</li><li><code>isEmpty</code> : <em>count</em> 속성을 사용하여 대기열이 비어있는지 확인한다.</li><li><code>peek</code> : 대기열의 맨 앞에 있는 요소를 제거하지 않고 값만 반환한다.</li></ul><p>큐는 앞쪽에서 제거하고 뒤쪽에서 삽입하는 것에만 관심이 있다. 그 사이에 내용이 무엇인지 알 필요가 없다.</p><h2 id="큐의-이해"><a class="markdownIt-Anchor" href="#큐의-이해"></a> 큐의 이해</h2><p>큐의 작동 방식을 이해하는 가장 쉬운 방법은 작동 예제를 보는 것이다. 영화 티켓을 위해 줄을 서서 기다리는 사람들을 상상해보자.</p><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/124502496-9370b180-ddfe-11eb-8e2d-4841fcb3d2ef.png'></p><p>이 대기열에는 현재 Ray, Brian, Sam 및 Mic이 있다. Ray는 티켓을 받으면 줄에서 나간다. <code>dequeue()</code>를 호출하면 Ray가 대기열의 앞쪽에서 제거된다.</p><p><code>peek()</code>을 호출하면 Brian이 현재 맨앞에 있기 때문에 Brian이 반환된다.</p><p>이제 막 표를 사기 위해 비키가 줄에 합류한다. <code>enqueue(&quot;Vicki&quot;)</code>를 호출하면 Vicki가 대기열 뒤에 추가된다.</p><h2 id="큐의-구현-방법들"><a class="markdownIt-Anchor" href="#큐의-구현-방법들"></a> 큐의 구현 방법들</h2><p>본문에선 네 가지 방법의 큐 구현 방법들을 알아본다.</p><ol><li>배열 기반 리스트<small>(array based list)</small> 사용</li><li>이중 연결 리스트<small>(doubly linked list)</small> 사용</li><li>ring buffer 사용</li><li>두 개의 스택 사용</li></ol><h3 id="1-리스트-기반-구현"><a class="markdownIt-Anchor" href="#1-리스트-기반-구현"></a> 1. 리스트 기반 구현</h3><p>코틀린 표준 라이브러리에는 더 높은 수준의 추상화를 구축하는데 사용할 수 있는 고도로 최적화된 자료구조의 핵심 세트가 함께 제공된다. 이들 중 하나가 연속적이고<small>(contiguous)</small> 정렬된 요소들의 리스트를 저장하는 자료구조인 <strong>ArrayList</strong>이다. ArrayList를 이용해서 큐를 구현해보자.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124503376-67563000-de00-11eb-9be3-0bb2fcff0246.png'></p><p>list 패키지 내부에 ArrayListQueue.kt 파일을 생성하고 아래의 코드를 추가한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayListQueue</span>&lt;<span class="type">T : Any</span>&gt; : <span class="type">Queue</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> list = arrayListOf&lt;T&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Queue 인터페이스를 구현하는 제네릭 ArrayListQueue 클래스를 정의했다. 인터페이스 구현은 저장하는 요소에 대해 동일한 제네릭 타입인 <code>T</code>를 사용한다.</p><p>다음으로 ArrayListQueue 구현을 완료하여 Queue 인터페이스의 규약을 만족시키자.</p><h4 id="arraylist-활용"><a class="markdownIt-Anchor" href="#arraylist-활용"></a> ArrayList 활용</h4><p>ArrayListQueue 클래스에 다음 코드를 추가한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayListQueue</span>&lt;<span class="type">T : Any</span>&gt; : <span class="type">Queue</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = list.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T? = list.getOrNull(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList의 기능들을 사용하면 다음을 간단히 구현할 수 있다.</p><ol><li>리스트의 동일한 속성을 사용하여 큐의 크기를 가져온다.</li><li>큐의 맨 앞에 요소가 존재한다면 값을 반환한다.</li></ol><p>이 연산들은 모두 *O(1)*이다.</p><h4 id="enqueue"><a class="markdownIt-Anchor" href="#enqueue"></a> Enqueue</h4><p>큐의 뒤에 요소를 추가하는 것은 간단하다. ArrayList의 끝에 요소를 추가하기만 하면 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">enqueue</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    list.add(element)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>리스트의 크기에 관계없이 요소를 큐에 추가하는 것은 <em>O(1)</em> 연산이다. 리스트 뒤에 빈 공간이 있기 때문이다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124504495-9077c000-de02-11eb-8719-55521aae5db3.png'></p><p>위의 예시에서 Mic를 추가하면 리스트에 두 개의 빈 공간이 있다.</p><p>여러 요소를 추가한 후에는 ArrayList 내부 배열이 결국 가득 차게 된다. 할당된 공간보다 더 많이 사용하려면 추가 공간을 만들기 위해 배열의 크기를 조정해야만 한다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124504497-92418380-de02-11eb-8ad1-392ae7528963.png'></p><p>크기 조정<small>(resizing)</small>은 <em>O(n)</em> 연산이다. 크기를 조정하려면 리스트에서 새 메모리를 할당하고 기존의 모든 데이터를 새 리스트에 복사해야 한다. 매번 크기를 두 배로 늘리는 덕분에 자주는 발생하지 않으며, 시간 복잡도는 여전히 <a href = "https://stackoverflow.com/a/249695"><i>Amortized O(1)</i></a>으로 동작한다.</p><h4 id="dequeue"><a class="markdownIt-Anchor" href="#dequeue"></a> Dequeue</h4><p>전면에서 항목<small>(item)</small>을 제거하려면 약간 더 많은 작업이 필요하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dequeue</span><span class="params">()</span></span>: T? = </span><br><span class="line">    <span class="keyword">if</span> (isEmpty) <span class="literal">null</span> <span class="keyword">else</span> list.removeAt(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>큐가 비어 있으면 <code>dequeue()</code>는 단순히 null을 반환한다. 그렇지 않다면 리스트의 맨 앞에서 요소를 제거하고 반환한다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124504501-94a3dd80-de02-11eb-9b82-9818df31bf7d.png'></p><p>큐의 전면에서 요소를 제거하는 연산은 <em>O(n)</em> 시간 복잡도를 가진다. 대기열에서 요소를 제거하려면 리스트 시작 부분에서 요소를 제거해야 한다. 리스트의 나머지 모든 요소를 메모리에서 이동시켜야하므로 항상 선형 시간<small>(Linear time, O(n))</small>의 연산이다.</p><h4 id="테스트"><a class="markdownIt-Anchor" href="#테스트"></a> 테스트</h4><p>디버깅을 위해 구현한 큐가 <code>toString()</code>을 재정의하도록 한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String = list.toString()</span><br></pre></td></tr></table></figure><p>이제 구현한 큐를 직접 사용해보도록 하자.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> queue = ArrayListQueue&lt;String&gt;().apply &#123;</span><br><span class="line">        enqueue(<span class="string">&quot;Ray&quot;</span>)</span><br><span class="line">        enqueue(<span class="string">&quot;Brian&quot;</span>)</span><br><span class="line">        enqueue(<span class="string">&quot;Eric&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(queue)</span><br><span class="line">    queue.dequeue()</span><br><span class="line">    println(queue)</span><br><span class="line">    println(<span class="string">&quot;Next up: <span class="subst">$&#123;queue.peek()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Ray, Brian, Eric]</span><br><span class="line">[Brian, Eric]</span><br><span class="line">Next up: Brian</span><br></pre></td></tr></table></figure><p>이 코드는 Ray, Brian 및 Eric을 큐에 넣는다<small>(<code>enqueue</code>)</small>. 그런 다음 Ray를 제거하고<small>(<code>dequeue()</code>)</small> Brian을 들여다 보지만 제거하지는 않는다<small>(<code>peek()</code>)</small>.</p><h4 id="장점과-단점"><a class="markdownIt-Anchor" href="#장점과-단점"></a> 장점과 단점</h4><p>다음은 ArrayList 기반 큐 구현의 알고리즘 및 복잡도에 대해 요약하고 있다. 대부분의 작업은 선형 시간이 걸리는 <code>dequeue()</code>를 제외하고는 상수 시간을 가진다. 공간 복잡도는 <em>O(n)</em> 이다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124506381-7344f080-de06-11eb-963b-0c16e0146195.png'></p><p>Kotlin ArrayList를 활용하여 리스트 기반 큐를 간단하게 구현하였다. <em>O(1)</em> 추가 연산 덕분에 큐에 넣는 것이 매우 빠르다.</p><p>하지만 이 구현에는 몇 가지 단점들이 있다. 항목을 제거하면 모든 요소가 하나씩 이동하므로 큐에서 항목을 제거하는 것은 비효율적일 수 있다. 이것은 매우 큰 큐에서 차이를 만든다. 리스트가 가득 차면 크기를 조정해야 하며 사용하지 않는 공간이 있을 수 있다. 이것은 시간이 지남에 따라 메모리 사용량을 증가시킬 수 있다. 이러한 단점을 어떻게 해결할 수 있을까? 연결 리스트 기반 구현을 살펴보고 ArrayListQueue와 비교해보도록 하자.</p><h3 id="2-이중-연결-리스트smalldoubly-linked-listsmall-기반-구현"><a class="markdownIt-Anchor" href="#2-이중-연결-리스트smalldoubly-linked-listsmall-기반-구현"></a> 2. 이중 연결 리스트<small>(doubly linked list)</small> 기반 구현</h3><p>linkedlist 패키지 내부에 LinkedListQueue.kt 파일을 생성한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListQueue</span>&lt;<span class="type">T : Any</span>&gt; : <span class="type">Queue</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> list = DoublyLinkedList&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 구현은 <strong>ArrayListQueue</strong>와 유사하지만 <strong>ArrayList</strong> 대신 <strong>DoublyLinkedList</strong>를 생성한다.</p><p>DoublyLinkedList가 제공하지 않는 <em>count</em> 속성 아래로 Queue 인터페이스의 구현을 시작한다.</p><h4 id="enqueue-2"><a class="markdownIt-Anchor" href="#enqueue-2"></a> Enqueue</h4><p>큐의 뒤에 요소를 추가하기 위해 아래의 코드를 작성한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">enqueue</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    list.append(element)</span><br><span class="line">    size += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124506865-80161400-de07-11eb-841b-a5acb773c7a8.png'></p><p>이중 연결 리스트는 내부에서 새 노드에 대한 꼬리 노드의 이전<small>(prev)</small> 및 다음<small>(next)</small> 참조를 업데이트하고 크기를 늘린다. 이 과정은 <em>O(1)</em> 연산이다.</p><h4 id="dequeue-2"><a class="markdownIt-Anchor" href="#dequeue-2"></a> Dequeue</h4><p>큐에서 요소를 제거하기 위해서 아래의 코드를 추가한다.</p><blockquote><p>간단한 구현</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dequeue</span><span class="params">()</span></span>: T? = list.pop()</span><br></pre></td></tr></table></figure><p>원서는 DoublyLinkedList에 대한 코드가 제공되지 않은 상태에서 위의 코드를 예시로 들어놓았는데, 직접 구현한 LinkedList를 기반으로 Queue를 구현한다면 <code>dequeue()</code>를 리스트에서 첫 번째 노드를 제거하는 메서드를 호출하는 것으로 간단히 구현할 수 있다.</p><blockquote><p>원서의 코드</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dequeue</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">  <span class="keyword">val</span> firstNode = list.first ?: <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  size--</span><br><span class="line">  <span class="keyword">return</span> list.remove(firstNode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>원서의 코드는 큐의 첫 번째 요소가 존재하는지 확인하고 존재하지 않는다면 null을 반환한다. 큐에 첫 번째 요소가 존재한다면 맨 앞에 있는 요소를 제거하고 이를 반환한다. 크기도 감소한다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124506868-81dfd780-de07-11eb-875b-2bb97909b55f.png'></p><p>리스트 맨 앞을 제거하는 것 또한 <em>O(1)</em> 연산이다. ArrayList 구현과 비교할 때 요소를 하나씩 이동할 필요가 없는 대신, 위의 이미지처럼 연결 리스트의 처음 두 노드 사이의 전<small>(prev)</small> 및 다음<small>(next)</small> 포인터를 업데이트하기만 하면 된다.</p><h4 id="peek"><a class="markdownIt-Anchor" href="#peek"></a> Peek</h4><p>ArrayList 기반 구현과 유사하게, DoublyLinkedList의 속성을 이용하여 <code>peek()</code>을 간단히 구현할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T? = list.first?.value</span><br></pre></td></tr></table></figure><h4 id="테스트-2"><a class="markdownIt-Anchor" href="#테스트-2"></a> 테스트</h4><p>디버깅을 위해 아래의 코드를 클래스에 추가하고 테스트 해보자.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String = list.toString()</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> queue = LinkedListQueue&lt;String&gt;().apply &#123;</span><br><span class="line">    enqueue(<span class="string">&quot;Ray&quot;</span>)</span><br><span class="line">    enqueue(<span class="string">&quot;Brian&quot;</span>)</span><br><span class="line">    enqueue(<span class="string">&quot;Eric&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(queue)</span><br><span class="line">    queue.dequeue()</span><br><span class="line">    println(queue)</span><br><span class="line">    println(<span class="string">&quot;Next up: <span class="subst">$&#123;queue.peek()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 테스트 코드는 ArrayListQueue 구현과 동일한 결과를 생성한다.</p><h4 id="장점과-단점-2"><a class="markdownIt-Anchor" href="#장점과-단점-2"></a> 장점과 단점</h4><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124506871-84423180-de07-11eb-8b5b-ae09b51587b4.png'></p><p>ArrayListQueue의 주요 문제점 중 하나는 항목을 대기열에서 빼는데 <i>O(n)</i>이 걸리는 것이다. 연결 리스트 구현을 통해 노드의 이전 및 다음 포인터를 업데이트하는 것만으로 시간 복잡도를 <i>O(1)</i>으로 축소시켰다.</p><p>LinkedListQueue의 주요 단점은 위의 표에서 분명하게 나타나지 않는다. <i>O(1)</i> 성능에도 불구하고 높은 오버헤드가 존재하는데, 각 요소는 이전과 다음의 참조를 위한 추가 공간이 있어야 한다<small>(공간 복잡도 증가)</small>. 또한 새 요소를 만들 때마다 상대적으로 비용이 많이 드는 동적 할당이 필요하다. 이에 비해, ArrayListQueue는 더 빠른 대량 할당을 수행한다.</p><p>할당에 대한 오버헤드를 제거하고 <i>O(1)</i>의 dequeue를 유지할 수 있을까? 큐가 고정된 크기 이상으로 커지는 것에 대해 걱정할 필요가 없는 경우 <strong>링 버퍼</strong>와 같은 다른 접근 방식을 사용할 수 있다. 예를 들어, 5명의 플레이어가 참여하는 모노폴리 게임에 링 버퍼를 기반으로 한 큐를 사용하여 다음에 올 차례를 추적할 수 있다. 다음으로 링 버퍼 구현을 살펴보자.</p><h3 id="3-링-버퍼smallring-buffersmall-기반-구현"><a class="markdownIt-Anchor" href="#3-링-버퍼smallring-buffersmall-기반-구현"></a> 3. 링 버퍼<small>(Ring Buffer)</small> 기반 구현</h3><p>원형 버퍼<small>(circular buffer)</small>라고도 불리는 링 버퍼<small>(ring buffer)</small>는 고정 크기 배열이다. 이 자료구조는 마지막에 제거할 항목이 없을 때 시작 부분으로 래핑된다.</p><p>링 버퍼를 사용하여 큐를 구현하는 방법에 대한 간단한 예를 아래의 이미지들로 살펴보자.</p><blockquote><p>링 버퍼 생성</p></blockquote><p align = 'center'><img width = '400' src = 'https://user-images.githubusercontent.com/39554623/124657417-72cb5900-dedd-11eb-83e7-d1347a5734db.png'></p><p>먼저 고정 크기가 4인 링 버퍼를 만든다. 링 버퍼에는 두 개의 포인터가 존재한다.</p><ol><li>읽기<small>(read)</small> 포인터 : 큐의 앞쪽을 추적</li><li>쓰기<small>(write)</small> 포인터 : 사용 가능한 다음 칸을 추적하여 이미 읽어 들인 기존 요소를 재정의할 수 있다.</li></ol><blockquote><p>대기열에 항목 추가</p></blockquote><p align = 'center'><img width = '400' src = 'https://user-images.githubusercontent.com/39554623/124657442-7828a380-dedd-11eb-9b9e-81cb4ceefc91.png'></p><p>대기열에 항목을 추가할 때마다 쓰기 포인터가 1씩 증가한다.</p><blockquote><p>항목 2개를 더 추가</p></blockquote><p align = 'center'><img width = '400' src = 'https://user-images.githubusercontent.com/39554623/124657453-7bbc2a80-dedd-11eb-9434-92854fd7844a.png'></p><p>쓰기 포인터가 두 자리 더 이동하여 읽기 포인터보다 3칸 앞서 있는 것을 확인 할 수 있다. 이는 대기열이 비어 있지 않다는 것을 의미한다.</p><blockquote><p>대기열에서 두 개의 항목을 빼기</p></blockquote><p align = 'center'><img width = '400' src = 'https://user-images.githubusercontent.com/39554623/124657465-7fe84800-dedd-11eb-80da-d4634f1a86d8.png'></p><p>대기열에서 항목을 빼는 것을 링 버퍼를 읽는 것과 동일하다. 읽기 포인터가 어떻게 두 번 이동했는지 주목하자.</p><blockquote><p>대기열을 채우기 위해 항목을 하나 더 추가</p></blockquote><p align = 'center'><img width = '400' src = 'https://user-images.githubusercontent.com/39554623/124657480-824aa200-dedd-11eb-9928-35956b11d604.png'></p><p>쓰기 포인터가 끝에 도달했으므로 시작 인덱스로 다시 랩핑된다.</p><blockquote><p>마지막으로 남은 두 개의 항목을 대기열에서 빼기</p></blockquote><p align = 'center'><img width = '400' src = 'https://user-images.githubusercontent.com/39554623/124657496-8676bf80-dedd-11eb-8b69-b5961c7d5dc8.png'></p><p>남은 두 항목도 대기열에서 빼면서 읽기 포인터도 시작 부분으로 돌아온다.</p><p>위 이미지를 통해 읽기와 쓰기 포인터가 동일한 인덱스에 있을 경우 대기열, 즉 큐가 비어 있다는 것을 알 수 있다.</p><p>링 버퍼를 통한 큐의 구현은 개념만 확인하고 구현은 생략하였다.</p><h4 id="장점과-단점-3"><a class="markdownIt-Anchor" href="#장점과-단점-3"></a> 장점과 단점</h4><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/124657508-8aa2dd00-dedd-11eb-86f7-208f48e10b6b.png'></p><p>링 버퍼 기반 큐는 연결 리스트 기반 구현과 <code>enqueue</code>와 <code>dequeue</code>의 시간 복잡도가 동일하다. 유일한 차이점은 공간 복잡도인데, 링 버퍼의 크기는 고정되어 있으므로 큐에 넣는 것 자체가 실패할 수 있는 단점이 존재한다.</p><p>지금까지 배열, 연결 리스트, 링 버퍼 기반까지 총 세 가지의 구현 방법을 보았는데 마지막으로 두 개의 스택을 사용하여 구현된 큐를 알아 볼 것이다.</p><p>이중 스택 기반 구현 큐는 메모리 상의 공간적 지역성이 연결 리스트보다 훨씬 우수하고, 링 버퍼와 같이 고정된 크기가 필요하지 않다는 장점이 있다.</p><h3 id="4-이중-스택smalldouble-stacksmall-기반-구현"><a class="markdownIt-Anchor" href="#4-이중-스택smalldouble-stacksmall-기반-구현"></a> 4. 이중 스택<small>(Double-Stack)</small> 기반 구현</h3><p>doublestack 패키지 내부에 StackQueue.kt를 추가한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackQueue</span>&lt;<span class="type">T : Any</span>&gt; : <span class="type">Queue</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> leftStack = StackImpl&lt;T&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> rightStack = StackImpl&lt;T&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>두 개의 스택을 사용하는 아이디어는 요소를 큐에 넣을 때마다 <strong>오른쪽</strong> 스택으로 이동하고, 요소를 큐에서 뺄 때는 FIFO 순서를 사용하여 요소를 검색할 수 있도록 오른쪽 스택을 반대로 뒤집어서 <strong>왼쪽</strong> 스택에 넣는다.</p><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/125627123-d8f7ca3e-d598-4fda-b7e8-bf87d948cef6.png'></p><h4 id="스택-활용하기"><a class="markdownIt-Anchor" href="#스택-활용하기"></a> 스택 활용하기</h4><p>그러면 아래의 코드를 추가하여 큐의 공통 기능들을 구현해본다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">get</span>() = leftStack.count + rightStack.count </span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> isEmpty: <span class="built_in">Boolean</span></span><br><span class="line">    <span class="keyword">get</span>() = leftStack.isEmpty &amp;&amp; rightStack.isEmpty</span><br></pre></td></tr></table></figure><p>큐가 비어 있는지 확인하려면 왼쪽과 오른쪽의 스택이 모두 비어 있는지 확인하면 된다. 큐에 있는 요소의 개수는 두 스택에 있는 요소 개수의 합이다.</p><p>이중 스택으로 구현한 큐는 위에서 설명했듯이 오른쪽 스택에서 왼쪽 스택으로 요소를 전달해야 할 때가 있다. 이는 왼쪽 스택이 비어 있을 때마다 발생한다.</p><p>다음의 헬퍼 메서드를 추가하자.</p><blockquote><p>오른쪽 스택에서 왼쪽 스택으로 요소 이동</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">transferElements</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> nextElement = rightStack.pop()</span><br><span class="line">    <span class="keyword">while</span> (nextElement != <span class="literal">null</span>) &#123;</span><br><span class="line">        leftStack.push(nextElement)</span><br><span class="line">        nextElement = rightStack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드를 통해 오른쪽 스택으로부터 요소를 꺼내어 왼쪽 스택에 넣을 수 있다. 스택은 LIFO 방식으로 작동하기 때문에 추가적인 작업 없이 역순으로 요소들을 가져올 수 있다.</p><blockquote><p><code>peek()</code></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftStack.isEmpty) &#123;</span><br><span class="line">        transferElements()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> leftStack.peek()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>peek()</code>은 최상위 요소를 보는 메서드이다. 만약 왼쪽 스택이 비어 있지 않다면 이 스택의 맨 위에 있는 요소가 큐의 맨 앞에 있다.</p><p>왼쪽 스택이 비어 있으면 <code>transferElements()</code>를 사용한다. 그렇게 하면 <code>leftStack.peek()</code>은 항상 올바른 요소 또는 <em>null</em>을 반환한다. <code>isEmpty()</code>는 여전히 <i>O(1)</i> 작업인 반면 <code>peek()</code>은 <i>O(n)</i>이다.</p><p>이러한 <code>peek()</code>의 구현이 비싼 비용을 요구하는 것처럼 보이지만, 큐의 각 요소는 오른쪽 스택에서 왼쪽 스택으로 한 번만 이동하면 되기 때문에 amortized <i>O(1)</i>이다. 왼쪽 스택이 비어 있을 때 <code>peek()</code> 호출은 오른쪽 요소들을 모두 왼쪽 스택으로 이동시키므로 <i>O(n)</i>이지만, 그 외 추가적인 호출에 대해선 <i>O(1)</i>이 된다.</p><h4 id="enqueue-3"><a class="markdownIt-Anchor" href="#enqueue-3"></a> Enqueue</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">enqueue</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    rightStack.push(element)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>요소를 큐에 추가할 때는 오른쪽 스택이 사용된다. 스택에 요소를 넣는 <code>push()</code>는 <i>O(1)</i>이다.</p><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125709812-534b1733-5132-4770-9b10-23b3b17392b7.png'></p><h4 id="dequeue-3"><a class="markdownIt-Anchor" href="#dequeue-3"></a> Dequeue</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dequeue</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftStack.isEmpty) &#123;</span><br><span class="line">        transferElements()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> leftStack.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>동작 원리는 다음과 같다.</p><ol><li>왼쪽 스택이 비어 있는지 확인한다.</li><li>왼쪽 스택이 비어 있으면 오른쪽 스택의 요소를 역순으로 이동시킨다.</li><li>왼쪽 스택에서 맨 위의 요소를 제거한다.</li></ol><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125709818-4e175602-0dbc-45ef-b299-999bc03ec2d2.png'></p><p>왼쪽 스택이 비어 있을 때에만 오른쪽 스택의 요소를 이동시키므로 <code>dequeue()</code>는 <code>peek()</code>처럼 amortized <i>O(1)</i> 연산이다.</p><h4 id="테스트-3"><a class="markdownIt-Anchor" href="#테스트-3"></a> 테스트</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Left stack: \n<span class="variable">$leftStack</span> \nRight stack: \n<span class="variable">$rightStack</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> queue = StackQueue&lt;String&gt;().apply &#123;</span><br><span class="line">        enqueue(<span class="string">&quot;Ray&quot;</span>)</span><br><span class="line">        enqueue(<span class="string">&quot;Brian&quot;</span>)</span><br><span class="line">        enqueue(<span class="string">&quot;Eric&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(queue)</span><br><span class="line">    queue.dequeue()</span><br><span class="line">    println(queue)</span><br><span class="line">    println(<span class="string">&quot;Next up: <span class="subst">$&#123;queue.peek()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Left stack: </span><br><span class="line">----top----</span><br><span class="line">-----------</span><br><span class="line"> </span><br><span class="line">Right stack: </span><br><span class="line">----top----</span><br><span class="line">Eric</span><br><span class="line">Brian</span><br><span class="line">Ray</span><br><span class="line">-----------</span><br><span class="line"></span><br><span class="line">Left stack: </span><br><span class="line">----top----</span><br><span class="line">Brian</span><br><span class="line">Eric</span><br><span class="line">-----------</span><br><span class="line"> </span><br><span class="line">Right stack: </span><br><span class="line">----top----</span><br><span class="line">-----------</span><br><span class="line"></span><br><span class="line">Next up: Brian</span><br></pre></td></tr></table></figure><h4 id="장점과-단점-4"><a class="markdownIt-Anchor" href="#장점과-단점-4"></a> 장점과 단점</h4><p align = 'center'><img width = '600' src = 'https://user-images.githubusercontent.com/39554623/125711056-d0be53af-a4b3-4029-bacb-3a914e9d8115.png'></p><p>리스트 기반 구현과 비교했을 때, 두 개의 스택을 활용하면 <code>dequeue()</code>의 구현을 amortized <i>O(1)</i> 연산으로 변환할 수 있다. 또한 이중 스택 기반 구현은 완전히 동적이고 링 버퍼 기반 구현처럼 고정된 크기로 제한되지도 않는다. 마지막으로 공간적 지역성<small>(spatial locality, 메모리 상 인접 데이터의 재이용률이 높음)</small> 측면에서 연결 리스트 기반 구현을 능가하는데, 이는 리스트이 요소가 메모리 블록에서 서로 옆에 있기 때문이다. 따라서 많은 수의 요소가 한 번의 접근<small>(access)</small>으로 캐시에 로드된다.</p><blockquote><p>연속된 배열에 있는 요소들</p></blockquote><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125709832-3a3d4f43-4b43-4c06-8319-85f9d593084e.png'></p><blockquote><p>메모리 전체에 흩어져 있는 연결 리스트의 요소들</p></blockquote><p align = 'center'><img width = '500' src = 'https://user-images.githubusercontent.com/39554623/125709837-9a7d64d5-f7cf-45ef-825e-33b7f79b5e18.png'></p><p>연결 리스트에서 요소는 메모리 블록에 연속적으로 존재하지 않는다. 이로 인해 더 많은 캐시 미스가 발생하여 접근 시간이 늘어난다.</p><br><div style="text-align: right"> <a href="https://github.com/june0122/DataStructureKotlin/tree/master/src/queue"><b><i>Github에서 본문의 코드 확인하기 </div><br><div style="text-align: right"> <a href="https://www.raywenderlich.com/books/data-structures-algorithms-in-kotlin/v1.0"><b><i>Data Structures & Algorithms in Kotlin</i></b></a> 서적을 참고하여 작성했습니다. </div>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Data-Structure/">Data Structure</category>
      
      <category domain="http://june0122.github.io/tags/Queue/">Queue</category>
      
      
      <comments>http://june0122.github.io/2021/07/16/data-structure-queue/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 레벨 2 : JadenCase 문자열 만들기</title>
      <link>http://june0122.github.io/2021/07/16/programmers-12951/</link>
      <guid>http://june0122.github.io/2021/07/16/programmers-12951/</guid>
      <pubDate>Thu, 15 Jul 2021 20:40:24 GMT</pubDate>
      
      <description>레벨 2</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/12951">문제 보기</a></h3><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><blockquote><p>나의 풀이</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(s: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> words = s.toLowerCase().toCharArray()</span><br><span class="line"></span><br><span class="line">        words[<span class="number">0</span>] = words[<span class="number">0</span>].toUpperCase()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until words.size) &#123;</span><br><span class="line">            <span class="keyword">if</span> (words[i].isLowerCase() &amp;&amp; words[i - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                words[i] = words[i].toUpperCase()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> String(words)  <span class="comment">// words.joinToString(&quot;&quot;) 사용 가능</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>capitalize()</code></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(s: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">          <span class="keyword">return</span> s.toLowerCase().split(<span class="string">&quot; &quot;</span>).map &#123;</span><br><span class="line">                it.capitalize()</span><br><span class="line">            &#125;.joinToString(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/Programmers/">Programmers</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/Programmers/">Programmers</category>
      
      
      <comments>http://june0122.github.io/2021/07/16/programmers-12951/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[LeetCode] 1688. Count of Matches in Tournament</title>
      <link>http://june0122.github.io/2021/07/16/leetcode-1688/</link>
      <guid>http://june0122.github.io/2021/07/16/leetcode-1688/</guid>
      <pubDate>Thu, 15 Jul 2021 19:06:59 GMT</pubDate>
      
      <description>1688. Count of Matches in Tournament</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://leetcode.com/problems/count-of-matches-in-tournament/">문제 보기</a></h3><h2 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">numberOfMatches</span><span class="params">(n: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> remains = n</span><br><span class="line">        <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (remains &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (remains % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                cnt += remains / <span class="number">2</span></span><br><span class="line">                remains /= <span class="number">2</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cnt += (remains - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">                remains = (remains - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cnt</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/LeetCode/">LeetCode</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/LeetCode/">LeetCode</category>
      
      <category domain="http://june0122.github.io/tags/Simulation/">Simulation</category>
      
      
      <comments>http://june0122.github.io/2021/07/16/leetcode-1688/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[LeetCode] 57. Insert Interval</title>
      <link>http://june0122.github.io/2021/07/16/leetcode-57/</link>
      <guid>http://june0122.github.io/2021/07/16/leetcode-57/</guid>
      <pubDate>Thu, 15 Jul 2021 17:48:33 GMT</pubDate>
      
      <description>57. Insert Interval</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://leetcode.com/problems/insert-interval/">문제 보기</a></h3><h2 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h2><blockquote><p><i>O(nlogn)</i> 시간 복잡도 해결법</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(intervals: <span class="type">Array</span>&lt;<span class="type">IntArray</span>&gt;, newInterval: <span class="type">IntArray</span>)</span></span>: Array&lt;IntArray&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> new = intervals + newInterval</span><br><span class="line">        new.sortWith(compareBy &#123;it[<span class="number">0</span>]&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">val</span> arr = mutableListOf&lt;IntArray&gt;()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (interval <span class="keyword">in</span> new) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr.isEmpty() || arr.last()[<span class="number">1</span>] &lt; interval[<span class="number">0</span>]) &#123;</span><br><span class="line">                arr.add(interval)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.last()[<span class="number">1</span>] = max(arr.last()[<span class="number">1</span>], interval[<span class="number">1</span>])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> arr.toTypedArray()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><i>O(n)</i> 시간 복잡도 해결법</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.math.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(intervals: <span class="type">Array</span>&lt;<span class="type">IntArray</span>&gt;, newInterval: <span class="type">IntArray</span>)</span></span>: Array&lt;IntArray&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> merged = mutableListOf&lt;IntArray&gt;()</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (interval <span class="keyword">in</span> intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (interval[<span class="number">1</span>] &gt;= newInterval[<span class="number">0</span>]) <span class="keyword">break</span></span><br><span class="line">            merged.add(interval)</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt; intervals.size &amp;&amp; intervals[i][<span class="number">0</span>] &lt;= newInterval[<span class="number">1</span>])&#123;</span><br><span class="line">            newInterval[<span class="number">0</span>] = min(newInterval[<span class="number">0</span>], intervals[i][<span class="number">0</span>])</span><br><span class="line">            newInterval[<span class="number">1</span>] = max(newInterval[<span class="number">1</span>], intervals[i][<span class="number">1</span>])</span><br><span class="line">            i++</span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">        merged.add(newInterval)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> (i &lt; intervals.size)&#123;</span><br><span class="line">            merged.add(intervals[i])</span><br><span class="line">            i++</span><br><span class="line">        &#125;        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> merged.toTypedArray()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/LeetCode/">LeetCode</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://june0122.github.io/2021/07/16/leetcode-57/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[LeetCode] 56. Merge Intervals</title>
      <link>http://june0122.github.io/2021/07/15/leetcode-56/</link>
      <guid>http://june0122.github.io/2021/07/15/leetcode-56/</guid>
      <pubDate>Thu, 15 Jul 2021 07:41:39 GMT</pubDate>
      
      <description>56. Merge Intervals</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://leetcode.com/problems/merge-intervals/">문제 보기</a></h3><h2 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">merge</span><span class="params">(intervals: <span class="type">Array</span>&lt;<span class="type">IntArray</span>&gt;)</span></span>: Array&lt;IntArray&gt; &#123;</span><br><span class="line">        intervals.sortWith(compareBy &#123; it[<span class="number">0</span>] &#125;)</span><br><span class="line">        <span class="keyword">val</span> merged = mutableListOf&lt;IntArray&gt;()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (interval <span class="keyword">in</span> intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (merged.isEmpty() || merged.last()[<span class="number">1</span>] &lt; interval[<span class="number">0</span>]) &#123;</span><br><span class="line">                merged.add(interval)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                merged.last()[<span class="number">1</span>] = max(merged.last()[<span class="number">1</span>], interval[<span class="number">1</span>])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> merged.toTypedArray()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="복잡도-분석"><a class="markdownIt-Anchor" href="#복잡도-분석"></a> 복잡도 분석</h4><ul><li>시간 복잡도 : <i>O(nlogn)</i><ul><li>정렬로 인한 시간복잡도</li><li><code>java.util.Collections.sort()</code>의 <a href="https://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#sort(java.util.List)">API 문서</a>에 정렬 알고리즘으로 개선된 합병정렬<small>(a modified mergesort)</small>을 사용하고 시간 복잡도는 <i>O(nlogn)</i>으로 명시되어 있다.</li></ul></li><li>공간 복잡도 : <i>O(n)</i></li></ul>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/LeetCode/">LeetCode</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://june0122.github.io/2021/07/15/leetcode-56/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[LeetCode] 495. Teemo Attacking</title>
      <link>http://june0122.github.io/2021/07/15/leetcode-495/</link>
      <guid>http://june0122.github.io/2021/07/15/leetcode-495/</guid>
      <pubDate>Thu, 15 Jul 2021 05:35:23 GMT</pubDate>
      
      <description>495. Teemo Attacking</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://leetcode.com/problems/teemo-attacking/">문제 보기</a></h3><h2 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> Kotlin</h2><blockquote><p>시간 초과 코드</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findPoisonedDuration</span><span class="params">(timeSeries: <span class="type">IntArray</span>, duration: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> poisonedTimes = mutableSetOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        </span><br><span class="line">        timeSeries.forEach &#123; t -&gt;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> t until t + duration) &#123;</span><br><span class="line">                poisonedTimes.add(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> poisonedTimes.size</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>easy 난이도의 문제였기에 간단히 set을 이용하여 중복을 제거하는 식으로 문제를 해결하려 하였으나 시간 초과가 발생하였다. 제약 사항을 보니 아래와 같았다. 입력값의 범위를 보고 문제 접근 방법을 고려할 수 있어야 하는데 연습이 많이 부족하다.</p><p>제약 사항</p><ul><li>1 &lt;= timeSeries.length &lt;= 10<sup>4</sup></li><li>0 &lt;= timeSeries[i], duration &lt;= 10<sup>7</sup></li><li>timeSeries is sorted in <strong>non-decreasing</strong> order.</li></ul><blockquote><p>해답</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.math.min</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findPoisonedDuration</span><span class="params">(timeSeries: <span class="type">IntArray</span>, duration: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> n = timeSeries.size</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n - <span class="number">1</span>) &#123;</span><br><span class="line">            total += min(timeSeries[i + <span class="number">1</span>] - timeSeries[i], duration)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> total + duration</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일반적으로 이러한 유형의 문제들은 <a href="https://leetcode.com/problems/insert-interval/">입력 값이 정렬되어 있을 경우</a> <i>O(N)</i>, <a href="https://leetcode.com/problems/merge-intervals/">그렇지 않을 경우</a> <i>O(nlogn)</i>의 시간 복잡도를 가진다.</p><p>두 개의 공격 사이의 간격과 duration 중 작은 값을 독에 중독된 시간에 더해나가는 식으로 값을 구할 수 있다.</p><p>두 개의 공격 사이의 간격이 duration보다 작다는 것은 중첩되는 구간이 있다는 뜻으로 다음 공격 시간과 현재 공격 시간의 차이<small>(<code>timeSeries[i + 1] - timeSeries[i]</code>)</small>만큼만 총 중독 시간에 더한다.</p><p>duration이 두 공격 사이 간격보다 클 경우는 중첩 구간이 없다는 뜻이므로 duration 값 그대로를 총 중독 시간에 더한다. 마지막 공격은 비교군에서 제외되므로 총 중독 시간에 따로 duration을 한 번만 더해준다.</p><h4 id="복잡도-분석"><a class="markdownIt-Anchor" href="#복잡도-분석"></a> 복잡도 분석</h4><ul><li>시간 복잡도 : <i>O(N)</i></li><li>공간 복잡도 : <i>O(1)</i></li></ul>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/LeetCode/">LeetCode</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/LeetCode/">LeetCode</category>
      
      
      <comments>http://june0122.github.io/2021/07/15/leetcode-495/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 레벨 2 : 가장 큰 수</title>
      <link>http://june0122.github.io/2021/07/13/programmers-42746/</link>
      <guid>http://june0122.github.io/2021/07/13/programmers-42746/</guid>
      <pubDate>Tue, 13 Jul 2021 09:59:37 GMT</pubDate>
      
      <description>[코딩테스트 고득점 Kit - 정렬] 레벨 2</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42746">문제 보기</a></h3><p><code>정렬</code></p><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(numbers: <span class="type">IntArray</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">var</span> answer = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> tempArray = numbers.map &#123; it.toString() &#125;.toTypedArray()</span><br><span class="line">        </span><br><span class="line">        tempArray.sortWith(Comparator&lt;String&gt; &#123; a, b -&gt;</span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                a.length == b.length -&gt; b.compareTo(a)</span><br><span class="line">                <span class="keyword">else</span> -&gt; (b + a).compareTo(a + b)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (tempArray[<span class="number">0</span>] == <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">            answer = <span class="string">&quot;0&quot;</span></span><br><span class="line">            <span class="keyword">return</span> answer</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tempArray.forEach &#123;</span><br><span class="line">            answer += it</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/Programmers/">Programmers</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/Programmers/">Programmers</category>
      
      <category domain="http://june0122.github.io/tags/%EC%A0%95%EB%A0%AC/">정렬</category>
      
      
      <comments>http://june0122.github.io/2021/07/13/programmers-42746/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 레벨 2 : 전화번호 목록</title>
      <link>http://june0122.github.io/2021/07/12/programmers-42577/</link>
      <guid>http://june0122.github.io/2021/07/12/programmers-42577/</guid>
      <pubDate>Mon, 12 Jul 2021 06:54:19 GMT</pubDate>
      
      <description>[코딩테스트 고득점 Kit - 해시] 레벨 2</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/42577">문제 보기</a></h3><p><code>해시</code></p><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="java"><a class="markdownIt-Anchor" href="#java"></a> java</h3><blockquote><p>정확성 테스트 통과, 효율성 테스트 실패 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String[] phone_book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> answer = <span class="keyword">true</span>;</span><br><span class="line">        Arrays.sort(phone_book, Comparator.comparing(String::length));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; phone_book.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; phone_book.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (phone_book[i].equals(phone_book[j].substring(<span class="number">0</span>, phone_book[i].length()))) &#123;</span><br><span class="line">                    answer = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Hash 사용</p></blockquote><p><strong>해시</strong>를 사용해야 효율성 통과를 할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String[] phone_book)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(phone_book, Collections.reverseOrder());</span><br><span class="line">        HashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : phone_book) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashMap.get(s) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">                hashMap.put(s.substring(<span class="number">0</span>, i), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String[] phone_book)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : phone_book) hashMap.put(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : phone_book) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hashMap.containsKey(s.substring(<span class="number">0</span>, i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(phone_book: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> hashMap = HashMap&lt;String, <span class="built_in">Int</span>&gt;()</span><br><span class="line">    phone_book.forEach &#123; hashMap[it] = <span class="number">0</span> &#125;</span><br><span class="line">    phone_book.forEach &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until it.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashMap.containsKey(it.substring(<span class="number">0</span>, i))) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/Programmers/">Programmers</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/Programmers/">Programmers</category>
      
      <category domain="http://june0122.github.io/tags/%ED%95%B4%EC%8B%9C/">해시</category>
      
      <category domain="http://june0122.github.io/tags/Java/">Java</category>
      
      
      <comments>http://june0122.github.io/2021/07/12/programmers-42577/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[프로그래머스] 레벨 2 : 행렬 테두리 회전하기</title>
      <link>http://june0122.github.io/2021/07/11/programmers-77485/</link>
      <guid>http://june0122.github.io/2021/07/11/programmers-77485/</guid>
      <pubDate>Sun, 11 Jul 2021 12:08:10 GMT</pubDate>
      
      <description>[2021 Dev-Matching: 웹 백엔드 개발자(상반기)] 레벨 2</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="문제-보기"><a class="markdownIt-Anchor" href="#문제-보기"></a> <a href="https://programmers.co.kr/learn/courses/30/lessons/77485">문제 보기</a></h3><p><code>2021 Dev-Matching: 웹 백엔드 개발자(상반기)</code>, <code>완전 탐색</code></p><h2 id="소스"><a class="markdownIt-Anchor" href="#소스"></a> 소스</h2><h3 id="kotlin"><a class="markdownIt-Anchor" href="#kotlin"></a> kotlin</h3><blockquote><p>연결 리스트 이용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(rows: <span class="type">Int</span>, columns: <span class="type">Int</span>, queries: <span class="type">Array</span>&lt;<span class="type">IntArray</span>&gt;)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">if</span> (queries.size == <span class="number">1</span>) <span class="keyword">return</span> intArrayOf(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> answer = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">val</span> board = Array(rows) &#123; i -&gt; IntArray(columns) &#123; j -&gt; (i * columns) + j + <span class="number">1</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">        queries.forEach &#123;</span><br><span class="line">            <span class="keyword">val</span> list = LinkedList&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line">            <span class="keyword">val</span> values = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">val</span> (row1, col1) = it[<span class="number">0</span>] - <span class="number">1</span> to it[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">val</span> (row2, col2) = it[<span class="number">2</span>] - <span class="number">1</span> to it[<span class="number">3</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> (tempRow, tempCol) = row1 to col1</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (tempCol &lt; col2) &#123;</span><br><span class="line">                list.add(tempRow to tempCol)</span><br><span class="line">                values.add(board[tempRow][tempCol])</span><br><span class="line">                tempCol += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (tempRow &lt; row2) &#123;</span><br><span class="line">                list.add(tempRow to tempCol)</span><br><span class="line">                values.add(board[tempRow][tempCol])</span><br><span class="line">                tempRow += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (tempCol &gt; col1) &#123;</span><br><span class="line">                list.add(tempRow to tempCol)</span><br><span class="line">                values.add(board[tempRow][tempCol])</span><br><span class="line">                tempCol -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (tempRow &gt; row1) &#123;</span><br><span class="line">                list.add(tempRow to tempCol)</span><br><span class="line">                values.add(board[tempRow][tempCol])</span><br><span class="line">                tempRow -= <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            list.add(list.removeAt(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> cnt = <span class="number">0</span></span><br><span class="line">            list.forEach &#123; pos -&gt;</span><br><span class="line">                board[pos.first][pos.second] = values[cnt]</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            answer.add(values.min()!!)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer.toIntArray()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>첫 시도에는 연결 리스트를 이용하는 방법으로 풀이하였지만 코드의 복잡도만 올라가는데다 효율성도 그리 좋지 못하여 아래와 같이 배열만을 이용하는 방법으로 풀이하였다.</p><blockquote><p>배열만 이용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.math.min</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">solution</span><span class="params">(rows: <span class="type">Int</span>, columns: <span class="type">Int</span>, queries: <span class="type">Array</span>&lt;<span class="type">IntArray</span>&gt;)</span></span>: IntArray &#123;</span><br><span class="line">        <span class="keyword">var</span> answer = intArrayOf()</span><br><span class="line">        <span class="keyword">val</span> board = Array(rows) &#123; i -&gt; IntArray(columns) &#123; j -&gt; (columns * i) + j + <span class="number">1</span> &#125; &#125;</span><br><span class="line">        </span><br><span class="line">        queries.forEach &#123;</span><br><span class="line">            <span class="keyword">val</span> (r1, c1) = it[<span class="number">0</span>] - <span class="number">1</span> to it[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">val</span> (r2, c2) = it[<span class="number">2</span>] - <span class="number">1</span> to it[<span class="number">3</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">val</span> a1 = IntArray(c2 - c1) &#123; i -&gt; board[r1][c1 + i] &#125;</span><br><span class="line">            <span class="keyword">val</span> a2 = IntArray(r2 - r1) &#123; i -&gt; board[r1 + i][c2] &#125;</span><br><span class="line">            <span class="keyword">val</span> a3 = IntArray(c2 - c1) &#123; i -&gt; board[r2][c1 + <span class="number">1</span> + i] &#125;</span><br><span class="line">            <span class="keyword">val</span> a4 = IntArray(r2 - r1) &#123; i -&gt; board[r1 + <span class="number">1</span> + i][c1] &#125;</span><br><span class="line">            <span class="keyword">var</span> min = rows * columns</span><br><span class="line">            </span><br><span class="line">            a1.forEachIndexed &#123; i, v -&gt;</span><br><span class="line">                board[r1][c1 + i + <span class="number">1</span>] = v</span><br><span class="line">                min = min(min, v)</span><br><span class="line">            &#125;</span><br><span class="line">            a2.forEachIndexed &#123; i, v -&gt;</span><br><span class="line">                board[r1 + i + <span class="number">1</span>][c2] = v</span><br><span class="line">                min = min(min, v)</span><br><span class="line">            &#125;</span><br><span class="line">            a3.forEachIndexed &#123; i, v -&gt;</span><br><span class="line">                board[r2][c1 + i] = v</span><br><span class="line">                min = min(min, v)</span><br><span class="line">            &#125;</span><br><span class="line">            a4.forEachIndexed &#123; i, v -&gt;</span><br><span class="line">                board[r1 + i][c1] = v</span><br><span class="line">                min = min(min, v)</span><br><span class="line">            &#125;</span><br><span class="line">            answer += min</span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">return</span> answer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/Programmers/">Programmers</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/Programmers/">Programmers</category>
      
      <category domain="http://june0122.github.io/tags/%EC%99%84%EC%A0%84-%ED%83%90%EC%83%89/">완전 탐색</category>
      
      
      <comments>http://june0122.github.io/2021/07/11/programmers-77485/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[코틀린 자료구조] 스택 (Stack)</title>
      <link>http://june0122.github.io/2021/07/05/data-structure-stack/</link>
      <guid>http://june0122.github.io/2021/07/05/data-structure-stack/</guid>
      <pubDate>Mon, 05 Jul 2021 13:25:08 GMT</pubDate>
      
      <description>&lt;b&gt;Stack&lt;small&gt;(스택)&lt;/small&gt;&lt;/b&gt;은 한 쪽에서만 요소의 추가나 제거가 가능한 자료구조이다. Computer science에선 스택은 LIFO&lt;small&gt;(last-in first-out)&lt;/small&gt; 자료구조라고도 한다. 마지막에 들어간&lt;small&gt;(push)&lt;/small&gt; 요소들은 가장 먼저 나온다&lt;small&gt;(pop)&lt;/small&gt;.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="스택의-연산들"><a class="markdownIt-Anchor" href="#스택의-연산들"></a> 스택의 연산들</h2><p>스택에는 오직 두 개의 필수적인 연산들이 존재한다.</p><ul><li><code>push</code> : 스택 맨 위에 요소를 추가</li><li><code>pop</code> : 스택 맨 위의 요소를 제거</li></ul><p>즉, 스택은 한 쪽에서만 요소의 추가나 제거가 가능한 자료구조이다. Computer science에선 스택은 LIFO<small>(last-in first-out)</small> 자료구조라고도 한다. 마지막에 들어간<small>(push)</small> 요소들은 가장 먼저 나온다<small>(pop)</small>.</p><blockquote><p>stack 패키지 내부에 Stack 인터페이스 선언 (stack/Stack.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="type">T : Any</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(element: <span class="type">T</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: T?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">※ 위의 Stack 인터페이스는 Vector 클래스를 상속받고 본문에서 필요로 하지 않는 메서드들을 제공하는 Kotlin과 Java의 Stack 클래스와 다르다.  </span><br></pre></td></tr></table></figure><p>스택은 다음과 같은 프로그래밍 분야에서 눈에 띄게 사용된다.</p><ul><li>안드로이드는 <strong>fragment stack</strong>을 사용하여 Activity의 안팎으로 fragment들을 push 및 pop을 한다.</li><li>메모리 할당은 아키텍처 수준에서 스택을 사용한다. <strong>지역 변수의 메모리</strong>도 스택을 사용하여 관리된다.</li><li>미로에서 길을 찾는 것과 같은 <strong>Search and conquer 알고리즘</strong>은 스택을 사용하여 백트래킹을 용이하게 한다.</li></ul><h2 id="구현"><a class="markdownIt-Anchor" href="#구현"></a> 구현</h2><p>다양한 방식으로 Stack 인터페이스를 구현할 수 있는데 올바른 storage type을 선택하는 것이 중요하다. <strong>ArrayList</strong>는 마지막 인덱스를 매개변수로 사용하여 <code>add</code> 및 <code>removeAt</code>을 통해 한쪽 끝에서 O(1)<small>(상수 시간)</small> 삽입 및 삭제를 제공하므로 확실한 선택이다. 이 두 연산을 사용하면 스택의 LIFO 특성이 쉽게 구현된다.</p><blockquote><p>StackImpl 클래스에 <code>toString</code> 재정의 (StackImpl.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackImpl</span>&lt;<span class="type">T : Any</span>&gt; : <span class="type">Stack</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> storage = arrayListOf&lt;T&gt;()  </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span> = buildString &#123;</span><br><span class="line">      appendLine(<span class="string">&quot;----top----&quot;</span>)</span><br><span class="line">      storage.asReversed().forEach &#123;</span><br><span class="line">        appendLine(<span class="string">&quot;<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      appendLine(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터에 대해 ArrayList 유형의 private property를 정의하고 디버그 목적으로 해당 내용을 표시하기 위해 <code>toString</code> 메서드를 재정의한다. <small>(이 코드를 사용하면 아직 push 및 pop 연산을 구현하지 않았기에 오류가 발생한다.)</small></p><h3 id="push-및-pop-연산"><a class="markdownIt-Anchor" href="#push-및-pop-연산"></a> push 및 pop 연산</h3><blockquote><p><code>push</code> 및 <code>pop</code> 추가 (StackImpl.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">push</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">    storage.add(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">if</span> (storage.size == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> storage.removeAt(storage.size - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>push</code> 메서드에서 ArrayList의 <code>add</code> 메서드를 이용해서 매개변수로 전달된 값을 ArrayList의 끝에 추가한다<small>(append)</small>. <code>pop</code> 메서드는 ArrayList가 비어 있으면 null을 반환하고 그렇지 않다면 마지막에 삽입한 요소를 제거하고 반환한다.</p><p>아래의 코드를 통해 직접 구현한 스택이 올바르게 작동하는지 확인한다.</p><blockquote><p>테스트용 코드 작성 (Main.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> stack = StackImpl&lt;<span class="built_in">Int</span>&gt;().apply &#123;</span><br><span class="line">        push(<span class="number">1</span>)</span><br><span class="line">        push(<span class="number">2</span>)</span><br><span class="line">        push(<span class="number">3</span>)</span><br><span class="line">        push(<span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    print(stack)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> poppedElement = stack.pop()</span><br><span class="line">    <span class="keyword">if</span> (poppedElement != <span class="literal">null</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;Popped: <span class="variable">$poppedElement</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    print(stack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">----top----</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">-----------</span><br><span class="line">Popped: 4</span><br><span class="line">----top----</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">-----------</span><br></pre></td></tr></table></figure><p><code>push</code> 및 <code>pop</code>은 둘 다 O(1) 시간 복잡도를 가진다.</p><h3 id="유용한-추가-연산들"><a class="markdownIt-Anchor" href="#유용한-추가-연산들"></a> 유용한 추가 연산들</h3><p>스택을 더 쉽게 사용할 수 있는 몇 가지 유용한 연산들을 추가한다.</p><blockquote><p>Stack 인터페이스에 <code>peek</code> 추가 (stack/Stack.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="type">T : Any</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> isEmpty: <span class="built_in">Boolean</span></span><br><span class="line">        <span class="keyword">get</span>() = count == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>peek</code>의 개념은 내용을 변경하지 않고 스택의 맨 위 요소를 보는 것이다. <em>count</em> 속성은 스택의 요소 수를 반환하며 <em>isEmpty</em> 속성을 구현하는데 사용된다.</p><blockquote><p><code>peek</code> 구현하기 (StackImpl.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">peek</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">return</span> storage.lastOrNull()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">get</span>() = storage.size</span><br></pre></td></tr></table></figure><p><code>peek</code>을 구현함으로써 <code>pop</code>의 구현을 더 깔끔한 코드로 변경할 수 있다.</p><blockquote><p><code>pop</code> 코드를 더 깔끔하게 수정</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">pop</span><span class="params">()</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> storage.removeAt(storage.size - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="스택과-kotlin-collection-interfaces"><a class="markdownIt-Anchor" href="#스택과-kotlin-collection-interfaces"></a> 스택과 Kotlin Collection Interfaces</h3><p>스택에 Kotlin Collection 인터페이스를 채택할 수 있을지 궁금할 수 있다. 스택의 목적은 데이터에 액세스하는 방법의 수를 제한하는 것인데, <strong>Iterable</strong>과 같은 인터페이스를 채택하면 iterator를 통해 모든 요소들을 노출함으로써 당초의 목표와 어긋나게 된다.</p><p>액세스 순서가 보장되도록 기존의 List를 가져와 스택으로 변환하는 것을 원할 수 있다. 물론 배열의 요소들을 순회하고 각 요소들을 <code>push</code> 할 수 있다. 하지만 이러한 요소를 Stack 구현에 직접적으로 추가하는 <a href="https://github.com/june0122/Effective-Java/blob/b24a45bbf5e320971bf2dfafe5bcbd38feeb9039/item%2001.md"><b>정적 팩토리 메서드<small>(static factory method)</small></b></a>를 작성할 수 있다.</p><blockquote><p>정적 팩토리 메서드 사용하기 (StackImpl.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Any&gt;</span> <span class="title">create</span><span class="params">(items: <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt;)</span></span>: Stack&lt;T&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> stack = StackImpl&lt;T&gt;()</span><br><span class="line">      <span class="keyword">for</span> (item <span class="keyword">in</span> items) &#123;</span><br><span class="line">        stack.push(item)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> stack</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>테스트용 코드 (Main.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> stack = StackImpl.create(list)</span><br><span class="line">    print(stack)</span><br><span class="line">    println(<span class="string">&quot;Popped: <span class="subst">$&#123;stack.pop()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">----top----</span><br><span class="line">D</span><br><span class="line">C</span><br><span class="line">B</span><br><span class="line">A</span><br><span class="line">-----------</span><br><span class="line">Popped: D</span><br></pre></td></tr></table></figure><p>이 코드는 문자열 스택을 생성하고 최상위 요소인 &quot;D&quot;를 pop 한다.</p><p>한 단계 더 나아가 <code>listOf()</code> 및 기타 표준 라이브러리 collection factory 함수와 유사한 요소를 나열하여 스택을 초기화할 수 있다. 이를 Stack.kt의 Stack을 구현한 클래스 외부에 추가한다.</p><blockquote><p>스택 초기화 함수 추가 (Stack.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Any&gt;</span> <span class="title">stackOf</span><span class="params">(<span class="keyword">vararg</span> elements: <span class="type">T</span>)</span></span>: Stack&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> StackImpl.create(elements.asList())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>테스트용 코드 (Main.kt)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> stack = stackOf(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>)</span><br><span class="line">    print(stack)</span><br><span class="line">    println(<span class="string">&quot;Popped: <span class="subst">$&#123;stack.pop()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">----top----</span><br><span class="line">4.0</span><br><span class="line">3.0</span><br><span class="line">2.0</span><br><span class="line">1.0</span><br><span class="line">-----------</span><br><span class="line">Popped: 4.0</span><br></pre></td></tr></table></figure><p>이렇게 하면 Double의 스택이 생성되고 최상위 값인 4.0이 표시된다. 코틀린 컴파일러의 타입 추론 기능 덕분에 <code>stackOf</code> 함수 호출의 제네릭 타입 인자를 지정하지 않아도 된다.</p><p>스택은 트리와 그래프를 검색하는 문제에 매우 중요하다. 미로를 통해 길을 찾는다고 상상할 때, 왼쪽, 오른쪽 또는 직진을 결정해야 하는 지점에 올 때마다 가능한 모든 결정들을 스택에 넣을 수 있다. <small>(When you hit a dead end, backtrack by popping from the stack and continuing until you escape or hit another dead end.)</small></p><h2 id="스택의-활용"><a class="markdownIt-Anchor" href="#스택의-활용"></a> 스택의 활용</h2><h3 id="linkedlist-뒤집기"><a class="markdownIt-Anchor" href="#linkedlist-뒤집기"></a> LinkedList 뒤집기</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Any&gt;</span> LinkedList<span class="type">&lt;T&gt;</span>.<span class="title">printInReverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> stack = StackImpl&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (node <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        stack.push(node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> node = stack.pop()</span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        println(node)</span><br><span class="line">        node = stack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="괄호-확인"><a class="markdownIt-Anchor" href="#괄호-확인"></a> 괄호 확인</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 1</span><br><span class="line">h((e))llo(world)() // balanced parentheses</span><br><span class="line"></span><br><span class="line">// 2</span><br><span class="line">(hello world // unbalanced parentheses</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">checkParentheses</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> stack = StackImpl&lt;<span class="built_in">Char</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (char <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">when</span> (char) &#123;</span><br><span class="line">            <span class="string">&#x27;(&#x27;</span> -&gt; stack.push(char)</span><br><span class="line">            <span class="string">&#x27;)&#x27;</span> -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                <span class="keyword">else</span> stack.pop()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스택은 괄호 관련 코딩 테스트 문제에 자주 등장하므로 사용 방법을 숙지할 필요가 있다.</p><ul><li><a href="https://programmers.co.kr/learn/courses/30/lessons/60058">프로그래머스 레벨 2 - 괄호 변환</a></li><li><a href="https://programmers.co.kr/learn/courses/30/lessons/76502">프로그래머스 레벨 2 - 괄호 회전하기</a></li></ul>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Data-Structure/">Data Structure</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Data-Structure/">Data Structure</category>
      
      <category domain="http://june0122.github.io/tags/Stack/">Stack</category>
      
      
      <comments>http://june0122.github.io/2021/07/05/data-structure-stack/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] BFS (Breadth First Search)</title>
      <link>http://june0122.github.io/2021/07/01/boj-bfs/</link>
      <guid>http://june0122.github.io/2021/07/01/boj-bfs/</guid>
      <pubDate>Thu, 01 Jul 2021 14:23:18 GMT</pubDate>
      
      <description>[바킹독의 실전 알고리즘] 0x09강 - BFS</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="설명"><a class="markdownIt-Anchor" href="#설명"></a> 설명</h2><blockquote><h3 id="다차원-배열에서-각-칸을-방문할-때-너비를-우선으로-방문하는-알고리즘"><a class="markdownIt-Anchor" href="#다차원-배열에서-각-칸을-방문할-때-너비를-우선으로-방문하는-알고리즘"></a> 다차원 배열에서 각 칸을 방문할 때 너비를 우선으로 방문하는 알고리즘</h3></blockquote><ol><li>시작하는 칸을 큐에 넣고 방문했다는 표시를 남김</li><li>큐에서 원소를 꺼내어 그 칸에 상하좌우로 인접한 칸에 대해 <code>3번</code>을 진행</li><li>해당 칸을 이전에 방문했다면 아무것도 하지 않고, 처음으로 방문했다면 방문했다는 표시를 남기고 해당 칸을 큐에 삽입</li><li>큐가 빌 때까지 <code>2번</code>을 반복</li></ol><p>모든 칸이 큐에 1번씩 들어가므로 시간복잡도는 칸이 N개일 때 O(N)</p><h4 id="bfs-구현-시-자주하는-실수"><a class="markdownIt-Anchor" href="#bfs-구현-시-자주하는-실수"></a> BFS 구현 시 자주하는 실수</h4><ol><li>시작점을 큐에 넣긴하는데 정작 방문했다는 표시를 남기지 않은 채로 진행하는 경우</li><li>큐에 넣을 때 해당 칸에 방문했다는 표시를 남기지 않고 큐에서 빼낼 때 남기는 경우</li><li>nx, ny가 배열 바깥으로 벗어났는지에 대한 루틴을 아예 빼먹었거나, 아니면 이상하게 구현을 한 상황</li></ol><h2 id="예시-및-응용"><a class="markdownIt-Anchor" href="#예시-및-응용"></a> 예시 및 응용</h2><h3 id="예시-flood-fill"><a class="markdownIt-Anchor" href="#예시-flood-fill"></a> 예시 : Flood Fill</h3><blockquote><p><a href="https://www.acmicpc.net/problem/1926">BOJ 1926, 그림</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (n, m) = Pair(nextInt(), nextInt())</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>) <span class="comment">// 상하좌우 네 방향을 의미</span></span><br><span class="line">    <span class="keyword">val</span> paper = Array(n) &#123; IntArray(m) &#125;</span><br><span class="line">    <span class="keyword">val</span> visitMap = Array(n) &#123; BooleanArray(m) &#125; <span class="comment">// 해당 칸을 방문했는지 여부를 저장</span></span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">0</span> <span class="comment">// 그림의 최댓값</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span> <span class="comment">// 그림의 개수</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> paper.indices) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> paper[i].indices) &#123;</span><br><span class="line">            paper[i][j] = nextInt()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> paper.indices) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> paper[i].indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (paper[i][j] == <span class="number">0</span> || visitMap[i][j]) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> queue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line">            <span class="keyword">var</span> area = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            visitMap[i][j] = <span class="literal">true</span></span><br><span class="line">            queue.offer(i to j)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">                area += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> cur = queue.poll()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123; <span class="comment">// 상하좌우 칸을 탐색</span></span><br><span class="line">                    <span class="keyword">val</span> nx = cur.first + dx[dir]</span><br><span class="line">                    <span class="keyword">val</span> ny = cur.second + dy[dir] <span class="comment">// nx, ny에 dir에서 정한 방향의 인접한 칸의 좌표가 들어감</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span> <span class="comment">// 범위 밖일 경우 넘어감</span></span><br><span class="line">                    <span class="keyword">if</span> (visitMap[nx][ny]|| paper[nx][ny] != <span class="number">1</span>) <span class="keyword">continue</span> <span class="comment">// 이미 방문한 칸이거나 색칠된 칸이 아닐 경우</span></span><br><span class="line"></span><br><span class="line">                    visitMap[nx][ny] = <span class="literal">true</span> <span class="comment">// (nx, ny)를 방문했다고 명시</span></span><br><span class="line">                    queue.offer(nx to ny)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max = max(max, area)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$num</span>\n<span class="variable">$max</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="응용-1-거리-측정"><a class="markdownIt-Anchor" href="#응용-1-거리-측정"></a> 응용 1 : 거리 측정</h3><blockquote><p><a href="https://www.acmicpc.net/problem/2178">BOJ 2178번, 미로 탐색</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (n, m) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> maze = Array(n) &#123; IntArray(m) &#125;</span><br><span class="line">    <span class="keyword">val</span> dist = Array(n) &#123; IntArray(m) &#123; -<span class="number">1</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123; <span class="comment">// 각각의 수들은 &#x27;붙어서&#x27; 입력으로 주어진다.</span></span><br><span class="line">        <span class="keyword">val</span> line = next()</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            maze[i][j] = line[j] - <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line">    queue.offer(<span class="number">0</span> to <span class="number">0</span>)</span><br><span class="line">    dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> (curX, curY) = queue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> nx = curX + dx[dir]</span><br><span class="line">            <span class="keyword">val</span> ny = curY + dy[dir]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (dist[nx][ny] &gt;= <span class="number">0</span> || maze[nx][ny] != <span class="number">1</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            dist[nx][ny] = dist[curX][curY] + <span class="number">1</span></span><br><span class="line">            queue.offer(nx to ny)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(dist[n - <span class="number">1</span>][m - <span class="number">1</span>] + <span class="number">1</span>) <span class="comment">// 지나는 칸 수를 출력이므로 + 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="응용-2-시작점이-여러-개일-때"><a class="markdownIt-Anchor" href="#응용-2-시작점이-여러-개일-때"></a> 응용 2 : 시작점이 여러 개일 때</h3><blockquote><p><a href="https://www.acmicpc.net/problem/7576">BOJ 7576번, 토마토</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> (m, n) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> box = Array(n) &#123; IntArray(m) &#125;</span><br><span class="line">    <span class="keyword">val</span> vis = Array(n) &#123; BooleanArray(m) &#123; <span class="literal">false</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            box[i][j] = nextInt()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (box[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                queue.offer(i to j)</span><br><span class="line">                vis[i][j] = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> temp = mutableListOf&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (rottenNum <span class="keyword">in</span> <span class="number">0</span> until queue.size) &#123;</span><br><span class="line">            <span class="keyword">val</span> (curX, curY) = queue.poll()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> (nx, ny) = curX + dx[dir] to curY + dy[dir]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> (box[nx][ny] == <span class="number">1</span> || box[nx][ny] == -<span class="number">1</span> || vis[nx][ny]) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                vis[nx][ny] = <span class="literal">true</span></span><br><span class="line">                box[nx][ny] = <span class="number">1</span></span><br><span class="line">                temp.add(nx to ny)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp.forEach &#123;</span><br><span class="line">            queue.offer(it)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        temp.clear()</span><br><span class="line"></span><br><span class="line">        date += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (box[i][j] == <span class="number">0</span>) date = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(date - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> (m, n) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> box = Array(n) &#123; IntArray(m) &#125;</span><br><span class="line">    <span class="keyword">val</span> dist = Array(n) &#123; IntArray(m) &#125; <span class="comment">// 익은 토마토가 들어있거나 토마토가 없는 칸은 값이 0</span></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            box[i][j] = nextInt()</span><br><span class="line">            <span class="keyword">when</span> (box[i][j]) &#123;</span><br><span class="line">                <span class="number">1</span> -&gt; queue.offer(i to j) <span class="comment">// 익은 토마토, 즉 거리가 0인 칸을 큐에 넣음</span></span><br><span class="line">                <span class="number">0</span> -&gt; dist[i][j] = -<span class="number">1</span> <span class="comment">// 익지 않은 토마토의 dist값을 -1로 설정</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> (curX, curY) = queue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> (nx, ny) = curX + dx[dir] to curY + dy[dir]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= n || ny &lt; <span class="number">0</span> || ny &gt;= m) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (dist[nx][ny] &gt;= <span class="number">0</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            dist[nx][ny] = dist[curX][curY] + <span class="number">1</span></span><br><span class="line">            queue.offer(nx to ny)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dist[i][j] == -<span class="number">1</span>) &#123; <span class="comment">// 익지 않은 토마토가 있다면 -1 출력</span></span><br><span class="line">                print(-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            date = max(date, dist[i][j])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="응용-3-시작점이-두-종류일-때"><a class="markdownIt-Anchor" href="#응용-3-시작점이-두-종류일-때"></a> 응용 3 : 시작점이 두 종류일 때</h3><blockquote><p><a href="https://www.acmicpc.net/problem/4179">BOJ 4179번, 불!</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (row, col) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> (dx, dy) = intArrayOf(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>) to intArrayOf(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> maze = Array(row) &#123; CharArray(col) &#125;</span><br><span class="line">    <span class="keyword">val</span> fireDist = Array(row) &#123; IntArray(col) &#123; -<span class="number">1</span> &#125; &#125; <span class="comment">// 불의 전파 시간</span></span><br><span class="line">    <span class="keyword">val</span> jihoonDist = Array(row) &#123; IntArray(col) &#123; -<span class="number">1</span> &#125; &#125; <span class="comment">// 지훈이의 이동 시간</span></span><br><span class="line">    <span class="keyword">val</span> fireQueue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line">    <span class="keyword">val</span> jihoonQueue: Queue&lt;Pair&lt;<span class="built_in">Int</span>, <span class="built_in">Int</span>&gt;&gt; = LinkedList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until row) &#123;</span><br><span class="line">        <span class="keyword">val</span> line = next()</span><br><span class="line">        <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">0</span> until col) &#123;</span><br><span class="line">            maze[i][j] = line[j]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (maze[i][j] == <span class="string">&#x27;F&#x27;</span>) &#123;</span><br><span class="line">                fireQueue.offer(i to j)</span><br><span class="line">                fireDist[i][j] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maze[i][j] == <span class="string">&#x27;J&#x27;</span>) &#123;</span><br><span class="line">                jihoonQueue.offer(i to j)</span><br><span class="line">                jihoonDist[i][j] = <span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 불에 대한 BFS</span></span><br><span class="line">    <span class="keyword">while</span> (fireQueue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> (curX, curY) = fireQueue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> (nx, ny) = curX + dx[dir] to curY + dy[dir]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= row || ny &lt; <span class="number">0</span> || ny &gt;= col) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (fireDist[nx][ny] &gt;= <span class="number">0</span> || maze[nx][ny] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            fireDist[nx][ny] = fireDist[curX][curY] + <span class="number">1</span></span><br><span class="line">            fireQueue.offer(nx to ny)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 지훈이에 대한 BFS</span></span><br><span class="line">    <span class="keyword">while</span> (jihoonQueue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> (curX, curY) = jihoonQueue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> <span class="number">0</span> until <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> (nx, ny) = curX + dx[dir] to curY + dy[dir]</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 범위를 벗어난 것은 탈출에 성공했다는 의미. 큐에 거리 순으로 들어가므로 최초에 탈출한 시간을 출력하면 됨.</span></span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= row || ny &lt; <span class="number">0</span> || ny &gt;= col) &#123;</span><br><span class="line">                println(jihoonDist[curX][curY] + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jihoonDist[nx][ny] &gt;= <span class="number">0</span> || maze[nx][ny] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (fireDist[nx][ny] != -<span class="number">1</span> &amp;&amp; fireDist[nx][ny] &lt;= jihoonDist[curX][curY] + <span class="number">1</span>) <span class="keyword">continue</span></span><br><span class="line">            <span class="comment">// 불의 전파 시간을 조건에 추가. 지훈이 도착한 시간과 동시에, 혹은 더 빨리 불이 도착하는 자리로는 갈 수 없음.</span></span><br><span class="line"></span><br><span class="line">            jihoonDist[nx][ny] = jihoonDist[curX][curY] + <span class="number">1</span></span><br><span class="line">            jihoonQueue.offer(nx to ny)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">&quot;IMPOSSIBLE&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>fireDist[nx][ny] != -1</code> 조건이 필요한 이유를 설명해주는 input 케이스</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">###F</span><br><span class="line">.J#.</span><br><span class="line">###.</span><br></pre></td></tr></table></figure><blockquote><p>continue를 사용하지 않고 조건을 만족할 떄 로직을 실행</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jihoonDist[nx][ny] == -<span class="number">1</span> &amp;&amp; maze[nx][ny] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fireDist[nx][ny] == -<span class="number">1</span> || fireDist[nx][ny] &gt; jihoonDist[curX][curY] + <span class="number">1</span>) &#123;</span><br><span class="line">        jihoonDist[nx][ny] = jihoonDist[curX][curY] + <span class="number">1</span></span><br><span class="line">        jihoonQueue.offer(nx to ny)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>maze 초기화 시 forEachIndeded 사용하는 방법</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until row) &#123;</span><br><span class="line">        next().forEachIndexed &#123; j, char -&gt;</span><br><span class="line">            maze[i][j] = char</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>이렇게 시작점이 두 종류인 문제를 해결할 수 있게 되었다. 하지만 시작점이 두 종류인 문제에 관해서 생각해야 할 점이 추가로 존재한다. 본 문제는 지훈이의 이동은 불의 전파에 영향을 받지만 불의 전파는 지훈이의 이동에 영향을 받지 않아서 불만 먼저 전파를 쭉 시키는게 가능했다. 그러나 시작점이 A, B 두 종류가 있고, A의 전파에 B가 영향을 주고 B의 전파에도 A가 영향을 준다고 가정해본다면 어느 하나를 먼저 끝까지 전파시키는게 불가능하다. (예를 들어, 불과 소방수 내지는 불과 물이 전파되는 문제여서 둘이 만나면 뭔가 상호작용이 발생하는 케이스)</p><p>위의 케이스를 다루는 문제가 바로 <a href="https://www.acmicpc.net/problem/18809">BOJ 18809번, Gaaaaaaaaaarden</a> 문제이다. 아쉽게도 이 문제는 <strong>백트래킹 기법</strong>을 추가로 알고 있어야 해결이 가능하기 때문에 당장 풀어볼 수는 없지만, 두 종류의 BFS에서 BFS를 돌 때 어느 하나가 독립적이지 않고 서로에게 영향을 준다면 위의 방법으로는 해결할 수 없다는 것을 꼭 이해해야 한다. 그런 상황에서는 시간 순으로 A와 B를 동시에 진행시켜야 한다.</p><h3 id="응용-4-1차원에서의-bfs"><a class="markdownIt-Anchor" href="#응용-4-1차원에서의-bfs"></a> 응용 4 : 1차원에서의 BFS</h3><blockquote><p><a href="https://www.acmicpc.net/problem/1697">BOJ 1697번, 숨바꼭질</a></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (n, k) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> line = Array(<span class="number">100001</span>) &#123; -<span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;<span class="built_in">Int</span>&gt; = LinkedList()</span><br><span class="line"></span><br><span class="line">    line[n] = <span class="number">0</span></span><br><span class="line">    queue.offer(n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> current = queue.poll()</span><br><span class="line">        <span class="keyword">val</span> dx = intArrayOf(<span class="number">1</span>, -<span class="number">1</span>, current)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> dx.indices) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = current + dx[dir]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next &lt; <span class="number">0</span> || next &gt; <span class="number">100000</span>) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (line[next] != -<span class="number">1</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            line[next] = line[current] + <span class="number">1</span></span><br><span class="line">            queue.offer(next)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(line[k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h2><p><a href="https://youtu.be/ftOmGdm95XI">[바킹독의 실전 알고리즘] 0x09강 - BFS</a></p>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%94%ED%82%B9%EB%8F%85/">바킹독</category>
      
      <category domain="http://june0122.github.io/tags/BFS/">BFS</category>
      
      
      <comments>http://june0122.github.io/2021/07/01/boj-bfs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[BOJ] 다이나믹 프로그래밍 (Dynamic Programming, DP)</title>
      <link>http://june0122.github.io/2021/06/30/boj-dynamic-programming/</link>
      <guid>http://june0122.github.io/2021/06/30/boj-dynamic-programming/</guid>
      <pubDate>Tue, 29 Jun 2021 16:23:11 GMT</pubDate>
      
      <description>[바킹독의 실전 알고리즘] 0x10강 - 다이나믹 프로그래밍</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>여러 개의 하위 문제를 먼저 푼 후 그 결과를 쌓아올려 주어진 문제를 해결하는 알고리즘</p></blockquote><h3 id="dp를-푸는-과정"><a class="markdownIt-Anchor" href="#dp를-푸는-과정"></a> DP를 푸는 과정</h3><ol><li>테이블 정의하기</li><li>점화식 찾기</li><li>초기값 정하기</li></ol><h2 id="연습-문제"><a class="markdownIt-Anchor" href="#연습-문제"></a> 연습 문제</h2><h3 id="boj-1463-1로-만들기"><a class="markdownIt-Anchor" href="#boj-1463-1로-만들기"></a> <a href="https://www.acmicpc.net/problem/1463">BOJ 1463 : 1로 만들기</a></h3><blockquote><p>DP</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">2.</span>.n) &#123;</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) d[i] = min(d[i], d[i / <span class="number">2</span>] + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) d[i] = min(d[i], d[i / <span class="number">3</span>] + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(d[n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BFS</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> queue: Queue&lt;<span class="built_in">Int</span>&gt; = LinkedList()</span><br><span class="line">    <span class="keyword">val</span> dist = IntArray(n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> dx = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    queue.offer(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (queue.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">val</span> cur = queue.poll()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (dir <span class="keyword">in</span> dx.indices) &#123;</span><br><span class="line">            <span class="keyword">val</span> next = <span class="keyword">when</span> (dir) &#123;</span><br><span class="line">                <span class="number">0</span> -&gt; cur + dx[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span> -&gt; cur * dx[dir]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next &gt; n) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (dist[next] != <span class="number">0</span>) <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            dist[next] = dist[cur] + <span class="number">1</span></span><br><span class="line">            queue.offer(next)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(dist[n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boj-9095-1-2-3-더하기"><a class="markdownIt-Anchor" href="#boj-9095-1-2-3-더하기"></a> <a href="https://www.acmicpc.net/problem/9095">BOJ 9095 : 1, 2, 3 더하기</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> t = nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    d[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    d[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">4</span> until <span class="number">11</span>) &#123;</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + d[i - <span class="number">2</span>] + d[i - <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repeat(t) &#123; println(d[nextInt()]) &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="boj-2579-계단-오르기"><a class="markdownIt-Anchor" href="#boj-2579-계단-오르기"></a> <a href="https://www.acmicpc.net/problem/2579">BOJ 2579 : 계단 오르기</a></h3><blockquote><p>2차원 배열 이용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> s = IntArray(n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> d = Array(n + <span class="number">1</span>) &#123; IntArray(<span class="number">3</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.n) s[i] = nextInt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        println(s[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@with</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d[<span class="number">1</span>][<span class="number">1</span>] = s[<span class="number">1</span>]</span><br><span class="line">    d[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">    d[<span class="number">2</span>][<span class="number">1</span>] = s[<span class="number">2</span>]</span><br><span class="line">    d[<span class="number">2</span>][<span class="number">2</span>] = s[<span class="number">1</span>] + s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3.</span>.n) &#123;</span><br><span class="line">        d[i][<span class="number">1</span>] = max(d[i - <span class="number">2</span>][<span class="number">1</span>], d[i - <span class="number">2</span>][<span class="number">2</span>]) + s[i]</span><br><span class="line">        d[i][<span class="number">2</span>] = d[i - <span class="number">1</span>][<span class="number">1</span>] + s[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(max(d[n][<span class="number">1</span>], d[n][<span class="number">2</span>]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>D[i][j]</code> = 현재까지 <code>j</code>개의 계단을 연속해서 밟고 <code>i</code>번째 계단까지 올라섰을 때 점수 합의 최댓값, 단 <code>i</code>번째 계단은 반드시 밟아야 함</p><p>이렇게 2차원 배열을 선언한 이유는 지금까지 몇 개의 계단을 밟았는지에 대한 정보가 추가로 있어야 점화식을 세울 때 계단을 오르는 규칙을 고려할 수 있기 때문이다. 그리고 i번째 계단은 반드시 밟아야 한다는 조건이 있어야 점화식을 이끌어낼 수 있다. 이 2차원 배열에서 <code>j</code>는 어떤 값을 가지냐 보면 <code>i</code>번째 계단을 반드시 밟아야 한다는 조건이 있어서 <code>j = 1</code> 혹은 <code>2</code>이다. 연속된 세 개의 계단을 모두 밟아서는 안된다는 조건으로 인해 <code>j</code>가 <code>3</code> 이상일 수는 없다.</p><blockquote><p>1차원 배열 이용</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.max</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> s = IntArray(<span class="number">300</span>)</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) s[i] = nextInt()</span><br><span class="line"></span><br><span class="line">    d[<span class="number">0</span>] = s[<span class="number">0</span>]</span><br><span class="line">    d[<span class="number">1</span>] = max(s[<span class="number">0</span>] + s[<span class="number">1</span>], s[<span class="number">1</span>])</span><br><span class="line">    d[<span class="number">2</span>] = max(s[<span class="number">0</span>] + s[<span class="number">2</span>], s[<span class="number">1</span>] + s[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3</span> until n) &#123;</span><br><span class="line">        d[i] = max(d[i - <span class="number">2</span>] + s[i], d[i - <span class="number">3</span>] + s[i - <span class="number">1</span>] + s[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(d[n - <span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boj-1149-rgb거리"><a class="markdownIt-Anchor" href="#boj-1149-rgb거리"></a> <a href="https://www.acmicpc.net/problem/1149">BOJ 1149 : RGB거리</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="keyword">import</span> kotlin.math.min</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">RGB</span></span>(<span class="keyword">var</span> red: <span class="built_in">Int</span>, <span class="keyword">var</span> green: <span class="built_in">Int</span>, <span class="keyword">var</span> blue: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> colors = Array(n + <span class="number">1</span>) &#123; RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &#125;</span><br><span class="line">    <span class="keyword">val</span> d = Array(n + <span class="number">1</span>) &#123; IntArray(<span class="number">3</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until n) &#123;</span><br><span class="line">        colors[i].red = nextInt()</span><br><span class="line">        colors[i].green = nextInt()</span><br><span class="line">        colors[i].blue = nextInt()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = colors[<span class="number">0</span>].red</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">1</span>] = colors[<span class="number">0</span>].green</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">2</span>] = colors[<span class="number">0</span>].blue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until n) &#123;</span><br><span class="line">        d[i][<span class="number">0</span>] = min(d[i-<span class="number">1</span>][<span class="number">1</span>], d[i-<span class="number">1</span>][<span class="number">2</span>]) + colors[i].red</span><br><span class="line">        d[i][<span class="number">1</span>] = min(d[i-<span class="number">1</span>][<span class="number">0</span>], d[i-<span class="number">1</span>][<span class="number">2</span>]) + colors[i].green</span><br><span class="line">        d[i][<span class="number">2</span>] = min(d[i-<span class="number">1</span>][<span class="number">0</span>], d[i-<span class="number">1</span>][<span class="number">1</span>]) + colors[i].blue</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(minOf(d[n - <span class="number">1</span>][<span class="number">0</span>], d[n - <span class="number">1</span>][<span class="number">1</span>], d[n - <span class="number">1</span>][<span class="number">2</span>]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boj-11726-2n-타일링"><a class="markdownIt-Anchor" href="#boj-11726-2n-타일링"></a> <a href="https://www.acmicpc.net/problem/11726">BOJ 11726 : 2×n 타일링</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(n + <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> mod = <span class="number">10007</span></span><br><span class="line"></span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    d[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3.</span>.n) d[i] = (d[i - <span class="number">1</span>] + d[i - <span class="number">2</span>]) % mod</span><br><span class="line"></span><br><span class="line">    println(d[n])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boj-11659-구간-합-구하기-4"><a class="markdownIt-Anchor" href="#boj-11659-구간-합-구하기-4"></a> <a href="https://www.acmicpc.net/problem/11659">BOJ 11659 : 구간 합 구하기 4</a></h3><blockquote><p>Prefix Sum 기법</p></blockquote><p>Prefix Sum은 시작 위치부터 현재 위치까지의 원소 합을 저장하는 배열이다.</p><p>부분 합(partial sum) 또는 누적 합(cumulative sum)이라고도 한다.</p><table><thead><tr><th style="text-align:center">Number</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">Prefix sum</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">6</td><td style="text-align:center">10</td><td style="text-align:center">15</td></tr></tbody></table><p>Prefix sum은 누적 합을 미리 구하는 전처리 과정을 통해 구간 합(range sum)을 빠르게 구할 때 사용된다.</p><ul><li>prefix sum : <code>0 ~ b</code> 까지의 누적합 (반드시 첫번 째 원소를 포함하는 구간)</li><li>range sum : <code>a ~ b</code> 까지의 구간 합</li></ul><h4 id="시간-복잡도"><a class="markdownIt-Anchor" href="#시간-복잡도"></a> 시간 복잡도</h4><ul><li>전처리 단계<ul><li>1차원 : O(n)</li><li>2차원 : O(n*m)</li></ul></li><li>계산 : O(1)</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> (n, m) = nextInt() to nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> a = IntArray(n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span>.n) &#123;</span><br><span class="line">        a[i] = nextInt()</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + a[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repeat(m) &#123;</span><br><span class="line">        <span class="keyword">val</span> (i, j) = nextInt() to nextInt()</span><br><span class="line">        println(d[j] - d[i - <span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// O(n^2)</span><br><span class="line">D[i] = A[i] + A[2] + … + A[i]</span><br><span class="line"></span><br><span class="line">// O(n)</span><br><span class="line">D[i] = D[i-1] + A[i]</span><br><span class="line"></span><br><span class="line">// O(1)</span><br><span class="line">A[i] + A[i+1] + … + A[j]</span><br><span class="line">= (A[1] + A[2] + … + A[j]) - (A[1] + A[2] + … + A[i-1])</span><br><span class="line">= D[j] - D[i-1] </span><br></pre></td></tr></table></figure><h2 id="경로-추적"><a class="markdownIt-Anchor" href="#경로-추적"></a> 경로 추적</h2><h3 id="boj-12852-1로-만들기-2"><a class="markdownIt-Anchor" href="#boj-12852-1로-만들기-2"></a> <a href="https://www.acmicpc.net/problem/12852">BOJ 12852 : 1로 만들기 2</a></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = with(Scanner(System.`<span class="keyword">in</span>`)) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = nextInt()</span><br><span class="line">    <span class="keyword">val</span> d = IntArray(n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">val</span> pre = IntArray(n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">2.</span>.n) &#123;</span><br><span class="line">        d[i] = d[i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        pre[i] = i - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; d[i] &gt; d[i / <span class="number">2</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">            d[i] = d[i / <span class="number">2</span>] + <span class="number">1</span></span><br><span class="line">            pre[i] = i / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; d[i] &gt; d[i / <span class="number">3</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">            d[i] = d[i / <span class="number">3</span>] + <span class="number">1</span></span><br><span class="line">            pre[i] = i / <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(d[n])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cur = n</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        print(<span class="string">&quot;<span class="variable">$cur</span> &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">1</span>) <span class="keyword">break</span></span><br><span class="line">        cur = pre[cur]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 문제를 BFS로 경로 복원 문제 풀이도 가능하다.</li></ul><h2 id="참고"><a class="markdownIt-Anchor" href="#참고"></a> 참고</h2><ul><li>바킹독의 실전 알고리즘 - <a href="https://www.youtube.com/watch?v=5leTtB3PQu0">https://www.youtube.com/watch?v=5leTtB3PQu0</a></li><li>Prefix sum - <a href="https://gamedevlog.tistory.com/68">https://gamedevlog.tistory.com/68</a></li></ul>]]></content:encoded>
      
      
      <category domain="http://june0122.github.io/categories/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/categories/Algorithm/BOJ/">BOJ</category>
      
      
      <category domain="http://june0122.github.io/tags/Kotlin/">Kotlin</category>
      
      <category domain="http://june0122.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="http://june0122.github.io/tags/BOJ/">BOJ</category>
      
      <category domain="http://june0122.github.io/tags/DP/">DP</category>
      
      <category domain="http://june0122.github.io/tags/%EB%B0%94%ED%82%B9%EB%8F%85/">바킹독</category>
      
      
      <comments>http://june0122.github.io/2021/06/30/boj-dynamic-programming/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
